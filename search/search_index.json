{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>     This site serves as a repo for my personal notes. The contents reflect neither community standards nor third-party rules. These notes are disorganized, spontaneously auto-generated, and relevant only to some rare contexts, making them meaningless for most others.          It wouldn't be abnormal if you find nothing valuable here, as these notes were not purposed for general readers. You might prefer to enjoy Felix's excellent work below or navigate your attention elsewhere.          If you need to discuss something else, leave your messages here.   </p> <p> </p> <p> </p>"},{"location":"#_1","title":"Home","text":""},{"location":"codedocs/","title":"Code Docs","text":"<p>Thatool documentation</p> <p>mediaLib documentation</p>"},{"location":"contact/","title":"contact","text":"Name:  Email:  Subject: Message: <p>* Correct your email to receive the feedback.</p> spam bot Sending ... Your message has been sent.  Send another message"},{"location":"contact/#_1","title":"contact","text":""},{"location":"cv/","title":"CV","text":"<p>Loading...</p>"},{"location":"pubs/","title":"Publications","text":"<p>Loading...</p> <p> </p>"},{"location":"research/","title":"Publications","text":"<p>Loading...</p> <p> </p>"},{"location":"soft/","title":"Software","text":"<p>All downloadable softwares</p>"},{"location":"soft/#office-pdf","title":"Office-pdf","text":""},{"location":"soft/#foxitpdfeditor","title":"FoxitPDFEditor","text":"<p>FoxitPDF Editor Pro Portable 2023</p> <p>pass: taiwebs.com</p>"},{"location":"tv/","title":"tv","text":"Load URL News - US News - EU News - Asia Documentary Discovery Movie Sport Music Show Vietnamese Channels Local VTV - VTC"},{"location":"tv/#_1","title":"tv","text":""},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2022/11/30/Deep-Potential/","title":"Accelerated Molecular Simulation Using Deep Potential Workflow with NGC","text":"<p>Credit: NVIDIA's blog</p> <p> </p> <p>Molecular simulation communities have faced the accuracy-versus-efficiency dilemma in modeling the potential energy surface and interatomic forces for decades. Deep Potential, the artificial neural network force field, solves this problem by combining the speed of classical molecular dynamics (MD) simulation with the accuracy of density functional theory (DFT) calculation.1 This is achieved by using the GPU-optimized package DeePMD-kit, which is a deep learning package for many-body potential energy representation and MD simulation.2</p> <p>This post provides an end-to-end demonstration of training a neural network potential for the 2D material graphene and using it to drive MD simulation in the open-source platform Large-scale Atomic/Molecular Massively Parallel Simulator (LAMMPS).3 Training data can be obtained either from the Vienna Ab initio Simulation Package (VASP)4, or Quantum ESPRESSO (QE).5</p> <p>A seamless integration of molecular modeling, machine learning, and high-performance computing (HPC) is demonstrated with the combined efficiency of molecular dynamics with ab initio accuracy \u2014 that is entirely driven through a container-based workflow. Using AI techniques to fit the interatomic forces generated by DFT, the accessible time and size scales can be boosted several orders of magnitude with linear scaling.</p> <p>Deep potential is essentially a combination of machine learning and physical principles, which start a new computing paradigm as shown in Figure 1.</p> <p>The image shows the new computing paradigm that combines molecular modeling, machine learning and high-performance computing to understand the interatomic forces of molecules compared to the traditional methods.</p> <p> Figure 1. A new computing paradigm composed of molecular modeling, AI, and HPC. (Figure courtesy: Dr. Linfeng Zhang, DP Technology) </p> <p>The entire workflow is shown in Figure 2. The data generation step is done with VASP and QE. The data preparation, model training, testing, and compression steps are done using DeePMD-kit. The model deployment is in LAMMPS.</p> <p>This figure displays the workflow of training and deploying a deep potential model. The workflow includes data generation, data preparation, model training, model testing, model compression, and model deployment.</p> <p> Figure 2. Diagram of the DeePMD workflow. </p>"},{"location":"blog/2022/11/30/Deep-Potential/#why-containers","title":"Why Containers?","text":"<p>A container is a portable unit of software that combines the application, and all its dependencies, into a single package that is agnostic to the underlying host OS.</p> <p>The workflow in this post involves AIMD, DP training, and LAMMPS MD simulation. It is nontrivial and time-consuming to install each software package from source with the correct setup of the compiler, MPI, GPU library, and optimization flags.</p> <p>Containers solve this problem by providing a highly optimized GPU-enabled computing environment for each step, and eliminates the time to install and test software.</p> <p>The NGC catalog, a hub of GPU-optimized HPC and AI software, carries a whole of HPC and AI containers that can be readily deployed on any GPU system. The HPC and AI containers from the NGC catalog are updated frequently and are tested for reliability and performance \u2014 necessary to speed up the time to solution.</p> <p>These containers are also scanned for Common Vulnerabilities and Exposure (CVEs), ensuring that they are devoid of any open ports and malware. Additionally, the HPC containers support both Docker and Singularity runtimes, and can be deployed on multi-GPU and multinode systems running in the cloud or on-premises.</p>"},{"location":"blog/2022/11/30/Deep-Potential/#training-data-generation","title":"Training data generation","text":"<p>The first step in the simulation is data generation. We will show you how you can use VASP and Quantum ESPRESSO to run AIMD simulations and generate training datasets for DeePMD. All input files can be downloaded from the GitHub repository using the following command:</p> <pre><code>git clone https://github.com/deepmodeling/SC21_DP_Tutorial.git\n</code></pre>"},{"location":"blog/2022/11/30/Deep-Potential/#vasp","title":"VASP","text":"<p>A two-dimensional graphene system with 98-atoms is used as shown in Figure 3.6 To generate the training datasets, 0.5ps NVT AIMD simulation at 300 K is performed. The time step chosen is 0.5fs. The DP model is created using 1000 time steps from a 0.5ps MD trajectory at a fixed temperature.</p> <p>Due to the short simulation time, the training dataset contains consecutive system snapshots, which are highly correlated. Generally, the training dataset should be sampled from uncorrelated snapshots with various system conditions and configurations. For this example, we used a simplified training data scheme. For production DP training, using DP-GEN is recommended to utilize the concurrent learning scheme to efficiently explore more combinations of conditions.7</p> <p>The projector-augmented wave pseudopotentials are employed to describe the interactions between the valence electrons and frozen cores. The generalized gradient approximation exchange\u2212correlation functional of Perdew\u2212Burke\u2212Ernzerhof. Only the \u0393-point was used for k-space sampling in all systems.</p> <p>This figure displays the top view of a single layer graphene system with 98 carbon atoms.</p> <p> Figure 3. A graphene system composed of 98 carbon atoms is used in AIMD simulation. </p>"},{"location":"blog/2022/11/30/Deep-Potential/#quantum-espresso","title":"Quantum Espresso","text":"<p>The AIMD simulation can also be carried out using Quantum ESPRESSO, available as a container from the NGC Catalog. Quantum ESPRESSO is an integrated suite of open-source computer codes for electronic-structure calculations and materials modeling at the nanoscale based on density-functional theory, plane waves, and pseudopotentials. The same graphene structure is used in the QE calculations. The following command can be used to start the AIMD simulation:</p> <pre><code>$ singularity exec --nv docker://nvcr.io/hpc/quantum_espresso:qe-6.8 cp.x\n&lt; c.md98.cp.in\n</code></pre>"},{"location":"blog/2022/11/30/Deep-Potential/#training-data-preparation","title":"Training data preparation","text":"<p>Once the training data is obtained from AIMD simulation, we want to convert its format using dpdata so that it can be used as input to the deep neural network. The dpdata package is a format conversion toolkit between AIMD, classical MD, and DeePMD-kit.</p> <p>You can use the convenient tool dpdata to convert data directly from the output of first-principles packages to the DeePMD-kit format. For deep potential training, the following information of a physical system has to be provided: atom type, box boundary, coordinate, force, viral, and system energy.</p> <p>A snapshot, or a frame of the system, contains all these data points for all atoms at one-time step, which can be stored in two formats, that is raw and npy.</p> <p>The first format raw is plain text with all information in one file, and each line of the file represents a snapshot. Different system information is stored in different files named as box.raw, coord.raw, force.raw, energy.raw, and virial.raw. We recommended you follow these naming conventions when preparing the training files.</p> <p>An example of force.raw:</p> <pre><code>$ cat force.raw\n-0.724  2.039 -0.951  0.841 -0.464  0.363\n 6.737  1.554 -5.587 -2.803  0.062  2.222\n-1.968 -0.163  1.020 -0.225 -0.789  0.343\n</code></pre> <p>This force.raw contains three frames, with each frame having the forces of two atoms, resulting in three lines and six columns. Each line provides all three force components of two atoms in one frame. The first three numbers are the three force components of the first atom, while the next three numbers are the force components of the second atom.</p> <p>The coordinate file coord.raw is organized similarly. In box.raw, the nine components of the box vectors should be provided on each line. In virial.raw, the nine components of the virial tensor should be provided on each line in the order XX XY XZ YX YY YZ ZX ZY ZZ. The number of lines of all raw files should be identical. We assume that the atom types do not change in all frames. It is provided by type.raw, which has one line with the types of atoms written one by one.</p> <p>The atom types should be integers. For example, the type.raw of a system that has two atoms with zero and one:</p> <pre><code>$ cat type.raw\n0 1\n</code></pre> <p>It is not a requirement to convert the data format to raw, but this process should give a sense on the types of data that can be used as inputs to DeePMD-kit for training.</p> <p>The easiest way to convert the first-principles results to the training data is to save them as numpy binary data.</p> <p>For VASP output, we have prepared an outcartodata.py script to process the VASP OUTCAR file. By running the commands:</p> <pre><code>$ cd SC21_DP_Tutorial/AIMD/VASP/\n$ singularity exec --nv docker://nvcr.io/hpc/deepmd-kit:v2.0.3 python outcartodata.py\n$ mv deepmd_data ../../DP/\n</code></pre> <p>For QE output:</p> <pre><code>$ cd SC21_DP_Tutorial/AIMD/QE/\n$ singularity exec --nv docker://nvcr.io/hpc/deepmd-kit:v2.0.3 python logtodata.py\n$ mv deepmd_data ../../DP/\n</code></pre> <p>A folder called deepmd_data is generated and moved to the training directory. It generates five sets 0/set.000, 1/set.000, 2/set.000, 3/set.000, 4/set.000, with each set containing 200 frames. It is not required to take care of the binary data files in each of the set.* directories. The path containing the set.* folder and type.raw file is called a system. If you want to train a nonperiodic system, an empty nopbc file should be placed under the system directory. box.raw is not necessary as it is a nonperiodic system.</p> <p>We are going to use three of the five sets for training, one for validating, and the remaining one for testing.</p>"},{"location":"blog/2022/11/30/Deep-Potential/#deep-potential-model-training","title":"Deep Potential model training","text":"<p>The input of the deep potential model is a descriptor vector containing the system information mentioned previously. The neural network contains several hidden layers with a composition of linear and nonlinear transformations. In this post, a three layer-neural network with 25, 50 and 100 neurons in each layer is used. The target value, or the label, for the neural network to learn is the atomic energies. The training process optimizes the weights and the bias vectors by minimizing the loss function.</p> <p>The training is initiated by the command where input.json contains the training parameters:</p> <pre><code>$ singularity exec --nv docker://nvcr.io/hpc/deepmd-kit:v2.0.3 dp train input.json\n</code></pre> <p>The DeePMD-kit prints detailed information on the training and validation data sets. The data sets are determined by training_data and validation_data as defined in the training section of the input script. The training dataset is composed of three data systems, while the validation data set is composed of one data system. The number of atoms, batch size, number of batches in the system, and the probability of using the system are all shown in Figure 4. The last column presents if the periodic boundary condition is assumed for the system.</p> <p>This image is a screenshot of the DP training output. Summaries of the training and validation dataset are shown with detailed information on the number of atoms, batch size, number of batches in the system and the probability of using the system.</p> <p> Figure 4. Screenshot of the DP training output. </p> <p>During the training, the error of the model is tested every disp_freq training step with the batch used to train the model and with numb_btch batches from the validating data. The training error and validation error are printed correspondingly in the file disp_file (default is lcurve.out). The batch size can be set in the input script by the key batch_size in the corresponding sections for training and validation data set.</p> <p>An example of the output:</p> <pre><code>#  step      rmse_val    rmse_trn    rmse_e_val  rmse_e_trn    rmse_f_val  rmse_f_trn         lr\n      0      3.33e+01    3.41e+01      1.03e+01    1.03e+01      8.39e-01    8.72e-01    1.0e-03\n    100      2.57e+01    2.56e+01      1.87e+00    1.88e+00      8.03e-01    8.02e-01    1.0e-03\n    200      2.45e+01    2.56e+01      2.26e-01    2.21e-01      7.73e-01    8.10e-01    1.0e-03\n    300      1.62e+01    1.66e+01      5.01e-02    4.46e-02      5.11e-01    5.26e-01    1.0e-03\n    400      1.36e+01    1.32e+01      1.07e-02    2.07e-03      4.29e-01    4.19e-01    1.0e-03\n    500      1.07e+01    1.05e+01      2.45e-03    4.11e-03      3.38e-01    3.31e-01    1.0e-03\n</code></pre> <p>The training error reduces monotonically with training steps as shown in Figure 5. The trained model is tested on the test dataset and compared with the AIMD simulation results. The test command is:</p> <pre><code>$ singularity exec --nv docker://nvcr.io/hpc/deepmd-kit:v2.0.3 dp test -m frozen_model.pb -s deepmd_data/4/ -n 200 -d detail.out\n</code></pre> <p>This image shows the total training loss, energy loss, force loss and learning rate decay with training steps from 0 to 1,000,000. Both the training and validation loss decrease monotonically with training steps.</p> <p> Figure 5. Training loss with steps </p> <p>The results are shown in Figure 6.</p> <p>This image displays the inferenced energy and force in the y-axis, and the ground true on the x-axis. The inferenced values soundly coincide with the ground truth with all data distributed in the diagonal direction.</p> <p> Figure 6. Test of the prediction accuracy of trained DP model with AIMD energies and forces. </p>"},{"location":"blog/2022/11/30/Deep-Potential/#model-export-and-compression","title":"Model export and compression","text":"<p>After the model has been trained, a frozen model is generated for inference in MD simulation. The process of saving neural network from a checkpoint is called \u201cfreezing\u201d a model:</p> <pre><code>$ singularity exec --nv docker://nvcr.io/hpc/deepmd-kit:v2.0.3 dp freeze -o graphene.pb\n</code></pre> <p>After the frozen model is generated, the model can be compressed without sacrificing its accuracy; while greatly speeding up the inference performance in MD. Depending on simulation and training setup, model compression can boost performance by 10X, and reduce memory consumption by 20X when running on GPUs.</p> <p>The frozen model can be compressed using the following command where -i refers to the frozen model and -o points to the output name of the compressed model:</p> <pre><code>$ singularity exec --nv docker://nvcr.io/hpc/deepmd-kit:v2.0.3 dp compress -i graphene.pb -o graphene-compress.pb\n</code></pre>"},{"location":"blog/2022/11/30/Deep-Potential/#model-deployment-in-lammps","title":"Model deployment in LAMMPS","text":"<p>A new pair-style has been implemented in LAMMPS to deploy the trained neural network in prior steps. For users familiar with the LAMMPS workflow, only minimal changes are needed to switch to deep potential. For instance, a traditional LAMMPS input with Tersoff potential has the following setting for potential setup:</p> <pre><code>pair_style      tersoff\npair_coeff      * * BNC.tersoff C\n</code></pre> <p>To use deep potential, replace previous lines with:</p> <pre><code>pair_style      deepmd graphene-compress.pb\npair_coeff      * *\n</code></pre> <p>The pair_style command in the input file uses the DeePMD model to describe the atomic interactions in the graphene system.</p> <p>The graphene-compress.pb file represents the frozen and compressed model for inference. The graphene system in MD simulation contains 1,560 atoms. Periodic boundary conditions are applied in the lateral x\u2013 and y-directions, and free boundary is applied to the z-direction. The time step is set as 1 fs. The system is placed under NVT ensemble at temperature 300 K for relaxation, which is consistent with the AIMD setup. The system configuration after NVT relaxation is shown in Figure 7. It can be observed that the deep potential can describe the atomic structures with small ripples in the cross-plane direction. After 10ps NVT relaxation, the system is placed under NVE ensemble to check system stability.</p> <p>The image displays the side view of the single layer graphene system after thermal relaxation in LAMMPS.</p> <p> Figure 7.  Atomic configuration of the graphene system after relaxation with deep potential. </p> <p>The system temperature is shown in Figure 8.</p> <p>The image displays the temperature profiles of the graphene system under NVT and NVE ensembles from 0 to 20 picoseconds. The first 10 picosecond is NVT and the second 10 picosecond is NVE.</p> <p> Figure 8. System temperature under NVT and NVE ensembles. The MD system driven by deep potential is very stable after relaxation. </p> <p>To validate the accuracy of the trained DP model, the calculated radial distribution function (RDF) from AIMD, DP and Tersoff, are plotted in Figure 9. The DP model-generated RDF is very close to that of AIMD, which indicates that the crystalline structure of graphene can be well presented by the DP model.</p> <p>This image displays the plotted radial distribution function from three different methods, including DP, Tersoff and AIMD, which are denoted in black, red and blue solid lines respectively.</p> <p> Figure 9. Radial distribution function calculated by AIMD, DP and Tersoff potential, respectively. It can be observed that the RDF calculated by DP is very close to that of AIMD. </p>"},{"location":"blog/2022/11/30/Deep-Potential/#conclusion","title":"Conclusion","text":"<p>This post demonstrates a simple case study of graphene under given conditions. The DeePMD-kit package streamlines the workflow from AIMD to classical MD with deep potential, providing the following key advantages:</p> <p>Highly automatic and efficient workflow implemented in the TensorFlow framework. APIs with popular DFT and MD packages such as VASP, QE, and LAMMPS. Broad applications in organic molecules, metals, semiconductors, insulators, and more. Highly efficient code for HPC with MPI and GPU support. Modularization for easy adoption by other deep learning potential models. Furthermore, the use of GPU-optimized containers from the NGC catalog simplifies and accelerates the overall workflow by eliminating the steps to install and configure software. To train a comprehensive model for other applications, download the DeepMD Kit Container from the NGC catalog.</p>"},{"location":"blog/2022/11/30/Deep-Potential/#references","title":"References","text":"<p>[1] Jia W, Wang H, Chen M, Lu D, Lin L, Car R, E W and Zhang L 2020 Pushing the limit of molecular dynamics with ab initio accuracy to 100 million atoms with machine learning IEEE Press 5 1-14</p> <p>[2] Wang H, Zhang L, Han J and E W 2018 DeePMD-kit: A deep learning package for many-body potential energy representation and molecular dynamics Computer Physics Communications 228 178-84</p> <p>[3] Plimpton S 1995 Fast Parallel Algorithms for Short-Range Molecular Dynamics Journal of Computational Physics 117 1-19</p> <p>[4] Kresse G and Hafner J 1993 Ab initio molecular dynamics for liquid metals Physical Review B 47 558-61</p> <p>[5] Giannozzi P, Baroni S, Bonini N, Calandra M, Car R, Cavazzoni C, Ceresoli D, Chiarotti G L, Cococcioni M, Dabo I, Dal Corso A, de Gironcoli S, Fabris S, Fratesi G, Gebauer R, Gerstmann U, Gougoussis C, Kokalj A, Lazzeri M, Martin-Samos L, Marzari N, Mauri F, Mazzarello R, Paolini S, Pasquarello A, Paulatto L, Sbraccia C, Scandolo S, Sclauzero G, Seitsonen A P, Smogunov A, Umari P and Wentzcovitch R M 2009 QUANTUM ESPRESSO: a modular and open-source software project for quantum simulations of materials Journal of Physics: Condensed Matter 21 395502</p> <p>[6] Humphrey W, Dalke A and Schulten K 1996 VMD: Visual molecular dynamics Journal of Molecular Graphics 14 33-8</p> <p>[7] Yuzhi Zhang, Haidi Wang, Weijie Chen, Jinzhe Zeng, Linfeng Zhang, Han Wang, and Weinan E, DP-GEN: A concurrent learning platform for the generation of reliable deep learning based potential energy models, Computer Physics Communications, 2020, 107206.</p>"},{"location":"blog/2024/09/20/awesome-python/","title":"Awesome Python","text":"<p># Awesome Python </p> <p>An opinionated list of awesome Python frameworks, libraries, software and resources.</p> <p>Inspired by awesome-php.</p> <ul> <li>Awesome Python<ul> <li>Admin Panels</li> <li>Algorithms and Design Patterns</li> <li>ASGI Servers</li> <li>Asynchronous Programming</li> <li>Audio</li> <li>Authentication</li> <li>Build Tools</li> <li>Built-in Classes Enhancement</li> <li>Caching</li> <li>ChatOps Tools</li> <li>CMS</li> <li>Code Analysis</li> <li>Command-line Interface Development</li> <li>Command-line Tools</li> <li>Computer Vision</li> <li>Configuration Files</li> <li>Cryptography</li> <li>Data Analysis</li> <li>Data Validation</li> <li>Data Visualization</li> <li>Database Drivers</li> <li>Database</li> <li>Date and Time</li> <li>Debugging Tools</li> <li>Deep Learning</li> <li>DevOps Tools</li> <li>Distributed Computing</li> <li>Distribution</li> <li>Documentation</li> <li>Downloader</li> <li>Editor Plugins and IDEs</li> <li>Email</li> <li>Environment Management</li> <li>File Manipulation</li> <li>Functional Programming</li> <li>Game Development</li> <li>Geolocation</li> <li>GUI Development</li> <li>Hardware</li> <li>HTML Manipulation</li> <li>HTTP Clients</li> <li>Image Processing</li> <li>Implementations</li> <li>Interactive Interpreter</li> <li>Internationalization</li> <li>Job Scheduler</li> <li>Logging</li> <li>Machine Learning</li> <li>Miscellaneous</li> <li>Natural Language Processing</li> <li>Network Virtualization</li> <li>News Feed</li> <li>ORM</li> <li>Package Management</li> <li>Package Repositories</li> <li>Penetration testing</li> <li>Permissions</li> <li>Processes</li> <li>Recommender Systems</li> <li>Refactoring</li> <li>RESTful API</li> <li>Robotics</li> <li>RPC Servers</li> <li>Science</li> <li>Search</li> <li>Serialization</li> <li>Serverless Frameworks</li> <li>Shell</li> <li>Specific Formats Processing</li> <li>Static Site Generator</li> <li>Tagging</li> <li>Task Queues</li> <li>Template Engine</li> <li>Testing</li> <li>Text Processing</li> <li>Third-party APIs</li> <li>URL Manipulation</li> <li>Video</li> <li>Web Asset Management</li> <li>Web Content Extracting</li> <li>Web Crawling</li> <li>Web Frameworks</li> <li>WebSocket</li> <li>WSGI Servers</li> </ul> </li> <li>Resources<ul> <li>Newsletters</li> <li>Podcasts</li> </ul> </li> <li>Contributing</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#admin-panels","title":"Admin Panels","text":"<p>Libraries for administrative interfaces.</p> <ul> <li>ajenti - The admin panel your servers deserve.</li> <li>django-grappelli - A jazzy skin for the Django Admin-Interface.</li> <li>flask-admin - Simple and extensible administrative interface framework for Flask.</li> <li>flower - Real-time monitor and web admin for Celery.</li> <li>jet-bridge - Admin panel framework for any application with nice UI (ex Jet Django).</li> <li>wooey - A Django app which creates automatic web UIs for Python scripts.</li> <li>streamlit - A framework which lets you build dashboards, generate reports, or create chat apps in minutes.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#algorithms-and-design-patterns","title":"Algorithms and Design Patterns","text":"<p>Python implementation of data structures, algorithms and design patterns. Also see awesome-algorithms.</p> <ul> <li>Algorithms<ul> <li>algorithms - Minimal examples of data structures and algorithms.</li> <li>python-ds - A collection of data structure and algorithms for coding interviews.</li> <li>sortedcontainers - Fast and pure-Python implementation of sorted collections.</li> <li>thealgorithms - All Algorithms implemented in Python.</li> </ul> </li> <li>Design Patterns<ul> <li>pypattyrn - A simple yet effective library for implementing common design patterns.</li> <li>python-patterns - A collection of design patterns in Python.</li> <li>transitions - A lightweight, object-oriented finite state machine implementation.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#asgi-servers","title":"ASGI Servers","text":"<p>ASGI-compatible web servers.</p> <ul> <li>daphne - A HTTP, HTTP2 and WebSocket protocol server for ASGI and ASGI-HTTP.</li> <li>uvicorn - A lightning-fast ASGI server implementation, using uvloop and httptools.</li> <li>hypercorn - An ASGI and WSGI Server based on Hyper libraries and inspired by Gunicorn.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#asynchronous-programming","title":"Asynchronous Programming","text":"<p>Libraries for asynchronous, concurrent and parallel execution. Also see awesome-asyncio.</p> <ul> <li>asyncio - (Python standard library) Asynchronous I/O, event loop, coroutines and tasks.<ul> <li>awesome-asyncio</li> </ul> </li> <li>concurrent.futures - (Python standard library) A high-level interface for asynchronously executing callables.</li> <li>multiprocessing - (Python standard library) Process-based parallelism.</li> <li>trio - A friendly library for async concurrency and I/O.</li> <li>twisted - An event-driven networking engine.</li> <li>uvloop - Ultra fast asyncio event loop.</li> <li>eventlet - Asynchronous framework with WSGI support.</li> <li>gevent - A coroutine-based Python networking library that uses greenlet.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#audio","title":"Audio","text":"<p>Libraries for manipulating audio and its metadata.</p> <ul> <li>Audio<ul> <li>audioread - Cross-library (GStreamer + Core Audio + MAD + FFmpeg) audio decoding.</li> <li>audioFlux - A library for audio and music analysis, feature extraction.</li> <li>dejavu - Audio fingerprinting and recognition.</li> <li>kapre - Keras Audio Preprocessors.</li> <li>librosa - Python library for audio and music analysis.</li> <li>matchering - A library for automated reference audio mastering.</li> <li>mingus - An advanced music theory and notation package with MIDI file and playback support.</li> <li>pyaudioanalysis - Audio feature extraction, classification, segmentation and applications.</li> <li>pydub - Manipulate audio with a simple and easy high level interface.</li> <li>timeside - Open web audio processing framework.</li> </ul> </li> <li>Metadata<ul> <li>beets - A music library manager and MusicBrainz tagger.</li> <li>eyed3 - A tool for working with audio files, specifically MP3 files containing ID3 metadata.</li> <li>mutagen - A Python module to handle audio metadata.</li> <li>tinytag - A library for reading music meta data of MP3, OGG, FLAC and Wave files.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#authentication","title":"Authentication","text":"<p>Libraries for implementing authentications schemes.</p> <ul> <li>OAuth<ul> <li>authlib - JavaScript Object Signing and Encryption draft implementation.</li> <li>django-allauth - Authentication app for Django that \"just works.\"</li> <li>django-oauth-toolkit - OAuth 2 goodies for Django.</li> <li>oauthlib - A generic and thorough implementation of the OAuth request-signing logic.</li> </ul> </li> <li>JWT<ul> <li>pyjwt - JSON Web Token implementation in Python.</li> <li>python-jose - A JOSE implementation in Python.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#build-tools","title":"Build Tools","text":"<p>Compile software from source code.</p> <ul> <li>bitbake - A make-like build tool for embedded Linux.</li> <li>buildout - A build system for creating, assembling and deploying applications from multiple parts.</li> <li>platformio - A console tool to build code with different development platforms.</li> <li>pybuilder - A continuous build tool written in pure Python.</li> <li>scons - A software construction tool.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#built-in-classes-enhancement","title":"Built-in Classes Enhancement","text":"<p>Libraries for enhancing Python built-in classes.</p> <ul> <li>attrs - Replacement for <code>__init__</code>, <code>__eq__</code>, <code>__repr__</code>, etc. boilerplate in class definitions.</li> <li>bidict - Efficient, Pythonic bidirectional map data structures and related functionality..</li> <li>box - Python dictionaries with advanced dot notation access.</li> <li>dataclasses - (Python standard library) Data classes.</li> <li>dotteddict - A library that provides a method of accessing lists and dicts with a dotted path notation.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#cms","title":"CMS","text":"<p>Content Management Systems.</p> <ul> <li>feincms - One of the most advanced Content Management Systems built on Django.</li> <li>indico - A feature-rich event management system, made @ CERN.</li> <li>wagtail - A Django content management system.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#caching","title":"Caching","text":"<p>Libraries for caching data.</p> <ul> <li>beaker - A WSGI middleware for sessions and caching.</li> <li>django-cache-machine - Automatic caching and invalidation for Django models.</li> <li>django-cacheops - A slick ORM cache with automatic granular event-driven invalidation.</li> <li>dogpile.cache - dogpile.cache is a next generation replacement for Beaker made by the same authors.</li> <li>hermescache - Python caching library with tag-based invalidation and dogpile effect prevention.</li> <li>pylibmc - A Python wrapper around the libmemcached interface.</li> <li>python-diskcache - SQLite and file backed cache backend with faster lookups than memcached and redis.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#chatops-tools","title":"ChatOps Tools","text":"<p>Libraries for chatbot development.</p> <ul> <li>errbot - The easiest and most popular chatbot to implement ChatOps.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#code-analysis","title":"Code Analysis","text":"<p>Tools of static analysis, linters and code quality checkers. Also see awesome-static-analysis.</p> <ul> <li>Code Analysis<ul> <li>code2flow - Turn your Python and JavaScript code into DOT flowcharts.</li> <li>prospector - A tool to analyse Python code.</li> <li>vulture - A tool for finding and analysing dead Python code.</li> </ul> </li> <li>Code Linters<ul> <li>flake8 - A wrapper around <code>pycodestyle</code>, <code>pyflakes</code> and McCabe.<ul> <li>awesome-flake8-extensions</li> </ul> </li> <li>pylint - A fully customizable source code analyzer.</li> </ul> </li> <li>Code Formatters<ul> <li>black - The uncompromising Python code formatter.</li> <li>isort - A Python utility / library to sort imports.</li> <li>yapf - Yet another Python code formatter from Google.</li> </ul> </li> <li>Static Type Checkers, also see awesome-python-typing<ul> <li>mypy - Check variable types during compile time.</li> <li>pyre-check - Performant type checking.</li> <li>typeshed - Collection of library stubs for Python, with static types.</li> </ul> </li> <li>Static Type Annotations Generators<ul> <li>monkeytype - A system for Python that generates static type annotations by collecting runtime types.</li> <li>pytype - Pytype checks and infers types for Python code - without requiring type annotations.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#command-line-interface-development","title":"Command-line Interface Development","text":"<p>Libraries for building command-line applications.</p> <ul> <li>Command-line Application Development<ul> <li>cement - CLI Application Framework for Python.</li> <li>click - A package for creating beautiful command line interfaces in a composable way.</li> <li>cliff - A framework for creating command-line programs with multi-level commands.</li> <li>python-fire - A library for creating command line interfaces from absolutely any Python object.</li> <li>python-prompt-toolkit - A library for building powerful interactive command lines.</li> </ul> </li> <li>Terminal Rendering<ul> <li>alive-progress - A new kind of Progress Bar, with real-time throughput, eta and very cool animations.</li> <li>asciimatics - A package to create full-screen text UIs (from interactive forms to ASCII animations).</li> <li>bashplotlib - Making basic plots in the terminal.</li> <li>colorama - Cross-platform colored terminal text.</li> <li>rich - Python library for rich text and beautiful formatting in the terminal. Also provides a great <code>RichHandler</code> log handler.</li> <li>tqdm - Fast, extensible progress bar for loops and CLI.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#command-line-tools","title":"Command-line Tools","text":"<p>Useful CLI-based tools for productivity.</p> <ul> <li>Productivity Tools<ul> <li>copier - A library and command-line utility for rendering projects templates.</li> <li>cookiecutter - A command-line utility that creates projects from cookiecutters (project templates).</li> <li>doitlive - A tool for live presentations in the terminal.</li> <li>howdoi - Instant coding answers via the command line.</li> <li>invoke - A tool for managing shell-oriented subprocesses and organizing executable Python code into CLI-invokable tasks.</li> <li>pathpicker - Select files out of bash output.</li> <li>thefuck - Correcting your previous console command.</li> <li>tmuxp - A tmux session manager.</li> <li>try - A dead simple CLI to try out python packages - it's never been easier.</li> </ul> </li> <li>CLI Enhancements<ul> <li>httpie - A command line HTTP client, a user-friendly cURL replacement.</li> <li>iredis - Redis CLI with autocompletion and syntax highlighting.</li> <li>litecli - SQLite CLI with autocompletion and syntax highlighting.</li> <li>mycli - MySQL CLI with autocompletion and syntax highlighting.</li> <li>pgcli - PostgreSQL CLI with autocompletion and syntax highlighting.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#computer-vision","title":"Computer Vision","text":"<p>Libraries for Computer Vision.</p> <ul> <li>easyocr - Ready-to-use OCR with 40+ languages supported.</li> <li>kornia - Open Source Differentiable Computer Vision Library for PyTorch.</li> <li>opencv - Open Source Computer Vision Library.</li> <li>pytesseract - A wrapper for Google Tesseract OCR.</li> <li>tesserocr - Another simple, Pillow-friendly, wrapper around the <code>tesseract-ocr</code> API for OCR.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#configuration-files","title":"Configuration Files","text":"<p>Libraries for storing and parsing configuration options.</p> <ul> <li>configparser - (Python standard library) INI file parser.</li> <li>configobj - INI file parser with validation.</li> <li>hydra - Hydra is a framework for elegantly configuring complex applications.</li> <li>python-decouple - Strict separation of settings from code.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#cryptography","title":"Cryptography","text":"<ul> <li>cryptography - A package designed to expose cryptographic primitives and recipes to Python developers.</li> <li>paramiko - The leading native Python SSHv2 protocol library.</li> <li>pynacl - Python binding to the Networking and Cryptography (NaCl) library.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#data-analysis","title":"Data Analysis","text":"<p>Libraries for data analyzing.</p> <ul> <li>pandas - A library providing high-performance, easy-to-use data structures and data analysis tools.</li> <li>aws-sdk-pandas - Pandas on AWS.</li> <li>datasette - An open source multi-tool for exploring and publishing data.</li> <li>optimus - Agile Data Science Workflows made easy with PySpark.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#data-validation","title":"Data Validation","text":"<p>Libraries for validating data. Used for forms in many cases.</p> <ul> <li>cerberus - A lightweight and extensible data validation library.</li> <li>colander - Validating and deserializing data obtained via XML, JSON, an HTML form post.</li> <li>jsonschema - An implementation of JSON Schema for Python.</li> <li>schema - A library for validating Python data structures.</li> <li>schematics - Data Structure Validation.</li> <li>voluptuous - A Python data validation library.</li> <li>pydantic - Data validation using Python type hints.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#data-visualization","title":"Data Visualization","text":"<p>Libraries for visualizing data. Also see awesome-javascript.</p> <ul> <li>altair - Declarative statistical visualization library for Python.</li> <li>bokeh - Interactive Web Plotting for Python.</li> <li>bqplot - Interactive Plotting Library for the Jupyter Notebook.</li> <li>cartopy - A cartographic python library with matplotlib support.</li> <li>diagrams - Diagram as Code.</li> <li>matplotlib - A Python 2D plotting library.</li> <li>plotnine - A grammar of graphics for Python based on ggplot2.</li> <li>pygal - A Python SVG Charts Creator.</li> <li>pygraphviz - Python interface to Graphviz.</li> <li>pyqtgraph - Interactive and realtime 2D/3D/Image plotting and science/engineering widgets.</li> <li>seaborn - Statistical data visualization using Matplotlib.</li> <li>vispy - High-performance scientific visualization based on OpenGL.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#database","title":"Database","text":"<p>Databases implemented in Python.</p> <ul> <li>pickleDB - A simple and lightweight key-value store for Python.</li> <li>tinydb - A tiny, document-oriented database.</li> <li>zodb - A native object database for Python. A key-value and object graph database.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#database-drivers","title":"Database Drivers","text":"<p>Libraries for connecting and operating databases.</p> <ul> <li>MySQL - awesome-mysql<ul> <li>mysqlclient - MySQL connector with Python 3 support (mysql-python fork).</li> <li>pymysql - A pure Python MySQL driver compatible to mysql-python.</li> </ul> </li> <li>PostgreSQL - awesome-postgres<ul> <li>psycopg - The most popular PostgreSQL adapter for Python.</li> </ul> </li> <li>SQlite - awesome-sqlite<ul> <li>sqlite3 - (Python standard library) SQlite interface compliant with DB-API 2.0.</li> <li>sqlite-utils - Python CLI utility and library for manipulating SQLite databases.</li> </ul> </li> <li>Other Relational Databases<ul> <li>pymssql - A simple database interface to Microsoft SQL Server.</li> <li>clickhouse-driver - Python driver with native interface for ClickHouse.</li> </ul> </li> <li>NoSQL Databases<ul> <li>cassandra-driver - The Python Driver for Apache Cassandra.</li> <li>happybase - A developer-friendly library for Apache HBase.</li> <li>kafka-python - The Python client for Apache Kafka.</li> <li>pymongo - The official Python client for MongoDB.</li> <li>motor - The async Python driver for MongoDB.</li> <li>redis-py - The Python client for Redis.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#date-and-time","title":"Date and Time","text":"<p>Libraries for working with dates and times.</p> <ul> <li>arrow - A Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting dates, times and timestamps.</li> <li>dateutil - Extensions to the standard Python datetime module.</li> <li>pendulum - Python datetimes made easy.</li> <li>pytz - World timezone definitions, modern and historical. Brings the tz database into Python.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#debugging-tools","title":"Debugging Tools","text":"<p>Libraries for debugging code.</p> <ul> <li>pdb-like Debugger<ul> <li>ipdb - IPython-enabled pdb.</li> <li>pudb - A full-screen, console-based Python debugger.</li> </ul> </li> <li>Tracing<ul> <li>manhole - Debugging UNIX socket connections and present the stacktraces for all threads and an interactive prompt.</li> <li>python-hunter - A flexible code tracing toolkit.</li> </ul> </li> <li>Profiler<ul> <li>py-spy - A sampling profiler for Python programs. Written in Rust.</li> <li>vprof - Visual Python profiler.</li> </ul> </li> <li>Others<ul> <li>django-debug-toolbar - Display various debug information for Django.</li> <li>flask-debugtoolbar - A port of the django-debug-toolbar to flask.</li> <li>icecream - Inspect variables, expressions, and program execution with a single, simple function call.</li> <li>pyelftools - Parsing and analyzing ELF files and DWARF debugging information.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#deep-learning","title":"Deep Learning","text":"<p>Frameworks for Neural Networks and Deep Learning. Also see awesome-deep-learning.</p> <ul> <li>keras - A high-level neural networks library and capable of running on top of either TensorFlow or Theano.</li> <li>pytorch - Tensors and Dynamic neural networks in Python with strong GPU acceleration.</li> <li>pytorch-lightning - Deep learning framework to train, deploy, and ship AI products Lightning fast.</li> <li>stable-baselines3 - PyTorch implementations of Stable Baselines (deep) reinforcement learning algorithms.</li> <li>tensorflow - The most popular Deep Learning framework created by Google.</li> <li>theano - A library for fast numerical computation.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#devops-tools","title":"DevOps Tools","text":"<p>Software and libraries for DevOps.</p> <ul> <li>Configuration Management<ul> <li>ansible - A radically simple IT automation platform.</li> <li>cloudinit - A multi-distribution package that handles early initialization of a cloud instance.</li> <li>openstack - Open source software for building private and public clouds.</li> <li>pyinfra - A versatile CLI tools and python libraries to automate infrastructure.</li> <li>saltstack - Infrastructure automation and management system.</li> </ul> </li> <li>SSH-style Deployment<ul> <li>cuisine - Chef-like functionality for Fabric.</li> <li>fabric - A simple, Pythonic tool for remote execution and deployment.</li> </ul> </li> <li>Process Management<ul> <li>supervisor - Supervisor process control system for UNIX.</li> </ul> </li> <li>Monitoring<ul> <li>psutil - A cross-platform process and system utilities module.</li> </ul> </li> <li>Backup<ul> <li>borg - A deduplicating archiver with compression and encryption.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#distributed-computing","title":"Distributed Computing","text":"<p>Frameworks and libraries for Distributed Computing.</p> <ul> <li>Batch Processing<ul> <li>dask - A flexible parallel computing library for analytic computing.</li> <li>luigi - A module that helps you build complex pipelines of batch jobs.</li> <li>PySpark - Apache Spark Python API.</li> <li>Ray - A system for parallel and distributed Python that unifies the machine learning ecosystem.</li> </ul> </li> <li>Stream Processing<ul> <li>faust - A stream processing library, porting the ideas from Kafka Streams to Python.</li> <li>streamparse - Run Python code against real-time streams of data via Apache Storm.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#distribution","title":"Distribution","text":"<p>Libraries to create packaged executables for release distribution.</p> <ul> <li>py2app - Freezes Python scripts (Mac OS X).</li> <li>py2exe - Freezes Python scripts (Windows).</li> <li>pyarmor - A tool used to obfuscate python scripts, bind obfuscated scripts to fixed machine or expire obfuscated scripts.</li> <li>pyinstaller - Converts Python programs into stand-alone executables (cross-platform).</li> <li>shiv - A command line utility for building fully self-contained zipapps (PEP 441), but with all their dependencies included.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#documentation","title":"Documentation","text":"<p>Libraries for generating project documentation.</p> <ul> <li>sphinx - Python Documentation generator.<ul> <li>awesome-sphinxdoc</li> </ul> </li> <li>pdoc - Epydoc replacement to auto generate API documentation for Python libraries.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#downloader","title":"Downloader","text":"<p>Libraries for downloading.</p> <ul> <li>akshare - A financial data interface library, built for human beings!</li> <li>s3cmd - A command line tool for managing Amazon S3 and CloudFront.</li> <li>youtube-dl - A command-line program to download videos from YouTube and other video sites.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#editor-plugins-and-ides","title":"Editor Plugins and IDEs","text":"<ul> <li>Emacs<ul> <li>elpy - Emacs Python Development Environment.</li> </ul> </li> <li>Vim<ul> <li>jedi-vim - Vim bindings for the Jedi auto-completion library for Python.</li> <li>python-mode - An all in one plugin for turning Vim into a Python IDE.</li> <li>YouCompleteMe - Includes Jedi-based completion engine for Python.</li> </ul> </li> <li>Visual Studio<ul> <li>PTVS - Python Tools for Visual Studio.</li> </ul> </li> <li>Visual Studio Code<ul> <li>Python - The official VSCode extension with rich support for Python.</li> </ul> </li> <li>IDE<ul> <li>PyCharm - Commercial Python IDE by JetBrains. Has free community edition available.</li> <li>spyder - Open Source Python IDE.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#email","title":"Email","text":"<p>Libraries for sending and parsing email.</p> <ul> <li>Mail Servers<ul> <li>modoboa - A mail hosting and management platform including a modern Web UI.</li> <li>salmon - A Python Mail Server.</li> </ul> </li> <li>Clients<ul> <li>imbox - Python IMAP for Humans.</li> <li>yagmail - Yet another Gmail/SMTP client.</li> </ul> </li> <li>Others<ul> <li>flanker - An email address and Mime parsing library.</li> <li>mailer - High-performance extensible mail delivery framework.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#environment-management","title":"Environment Management","text":"<p>Libraries for Python version and virtual environment management.</p> <ul> <li>pyenv - Simple Python version management.</li> <li>virtualenv - A tool to create isolated Python environments.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#file-manipulation","title":"File Manipulation","text":"<p>Libraries for file manipulation.</p> <ul> <li>mimetypes - (Python standard library) Map filenames to MIME types.</li> <li>pathlib - (Python standard library) An cross-platform, object-oriented path library.</li> <li>path.py - A module wrapper for os.path.</li> <li>python-magic - A Python interface to the libmagic file type identification library.</li> <li>watchdog - API and shell utilities to monitor file system events.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#functional-programming","title":"Functional Programming","text":"<p>Functional Programming with Python.</p> <ul> <li>coconut - A variant of Python built for simple, elegant, Pythonic functional programming.</li> <li>funcy - A fancy and practical functional tools.</li> <li>more-itertools - More routines for operating on iterables, beyond <code>itertools</code>.</li> <li>returns - A set of type-safe monads, transformers, and composition utilities.</li> <li>cytoolz - Cython implementation of <code>Toolz</code>: High performance functional utilities.</li> <li>toolz - A collection of functional utilities for iterators, functions, and dictionaries.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#gui-development","title":"GUI Development","text":"<p>Libraries for working with graphical user interface applications.</p> <ul> <li>curses - Built-in wrapper for ncurses used to create terminal GUI applications.</li> <li>Eel - A library for making simple Electron-like offline HTML/JS GUI apps.</li> <li>enaml - Creating beautiful user-interfaces with Declarative Syntax like QML.</li> <li>Flexx - Flexx is a pure Python toolkit for creating GUI's, that uses web technology for its rendering.</li> <li>Gooey - Turn command line programs into a full GUI application with one line.</li> <li>kivy - A library for creating NUI applications, running on Windows, Linux, Mac OS X, Android and iOS.</li> <li>pyglet - A cross-platform windowing and multimedia library for Python.</li> <li>PyGObject - Python Bindings for GLib/GObject/GIO/GTK+ (GTK+3).</li> <li>PyQt - Python bindings for the Qt cross-platform application and UI framework.</li> <li>PySimpleGUI - Wrapper for tkinter, Qt, WxPython and Remi.</li> <li>pywebview - A lightweight cross-platform native wrapper around a webview component.</li> <li>Tkinter - Tkinter is Python's de-facto standard GUI package.</li> <li>Toga - A Python native, OS native GUI toolkit.</li> <li>urwid - A library for creating terminal GUI applications with strong support for widgets, events, rich colors, etc.</li> <li>wxPython - A blending of the wxWidgets C++ class library with the Python.</li> <li>DearPyGui - A Simple GPU accelerated Python GUI framework</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#graphql","title":"GraphQL","text":"<p>Libraries for working with GraphQL.</p> <ul> <li>graphene - GraphQL framework for Python.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#game-development","title":"Game Development","text":"<p>Awesome game development libraries.</p> <ul> <li>Arcade - Arcade is a modern Python framework for crafting games with compelling graphics and sound.</li> <li>Cocos2d - cocos2d is a framework for building 2D games, demos, and other graphical/interactive applications.</li> <li>Harfang3D - Python framework for 3D, VR and game development.</li> <li>Panda3D - 3D game engine developed by Disney.</li> <li>Pygame - Pygame is a set of Python modules designed for writing games.</li> <li>PyOgre - Python bindings for the Ogre 3D render engine, can be used for games, simulations, anything 3D.</li> <li>PyOpenGL - Python ctypes bindings for OpenGL and it's related APIs.</li> <li>PySDL2 - A ctypes based wrapper for the SDL2 library.</li> <li>RenPy - A Visual Novel engine.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#geolocation","title":"Geolocation","text":"<p>Libraries for geocoding addresses and working with latitudes and longitudes.</p> <ul> <li>django-countries - A Django app that provides a country field for models and forms.</li> <li>geodjango - A world-class geographic web framework.</li> <li>geojson - Python bindings and utilities for GeoJSON.</li> <li>geopy - Python Geocoding Toolbox.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#html-manipulation","title":"HTML Manipulation","text":"<p>Libraries for working with HTML and XML.</p> <ul> <li>beautifulsoup - Providing Pythonic idioms for iterating, searching, and modifying HTML or XML.</li> <li>bleach - A whitelist-based HTML sanitization and text linkification library.</li> <li>cssutils - A CSS library for Python.</li> <li>html5lib - A standards-compliant library for parsing and serializing HTML documents and fragments.</li> <li>lxml - A very fast, easy-to-use and versatile library for handling HTML and XML.</li> <li>markupsafe - Implements a XML/HTML/XHTML Markup safe string for Python.</li> <li>pyquery - A jQuery-like library for parsing HTML.</li> <li>untangle - Converts XML documents to Python objects for easy access.</li> <li>WeasyPrint - A visual rendering engine for HTML and CSS that can export to PDF.</li> <li>xmldataset - Simple XML Parsing.</li> <li>xmltodict - Working with XML feel like you are working with JSON.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#http-clients","title":"HTTP Clients","text":"<p>Libraries for working with HTTP.</p> <ul> <li>httpx - A next generation HTTP client for Python.</li> <li>requests - HTTP Requests for Humans.</li> <li>treq - Python requests like API built on top of Twisted's HTTP client.</li> <li>urllib3 - A HTTP library with thread-safe connection pooling, file post support, sanity friendly.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#hardware","title":"Hardware","text":"<p>Libraries for programming with hardware.</p> <ul> <li>keyboard - Hook and simulate global keyboard events on Windows and Linux.</li> <li>mouse - Hook and simulate global mouse events on Windows and Linux.</li> <li>pynput - A library to control and monitor input devices.</li> <li>scapy - A brilliant packet manipulation library.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#image-processing","title":"Image Processing","text":"<p>Libraries for manipulating images.</p> <ul> <li>pillow - Pillow is the friendly PIL fork.</li> <li>python-barcode - Create barcodes in Python with no extra dependencies.</li> <li>pymatting - A library for alpha matting.</li> <li>python-qrcode - A pure Python QR Code generator.</li> <li>pywal - A tool that generates color schemes from images.</li> <li>pyvips - A fast image processing library with low memory needs.</li> <li>quads - Computer art based on quadtrees.</li> <li>scikit-image - A Python library for (scientific) image processing.</li> <li>thumbor - A smart imaging service. It enables on-demand crop, re-sizing and flipping of images.</li> <li>wand - Python bindings for MagickWand, C API for ImageMagick.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#implementations","title":"Implementations","text":"<p>Implementations of Python.</p> <ul> <li>cpython - Default, most widely used implementation of the Python programming language written in C.</li> <li>cython - Optimizing Static Compiler for Python.</li> <li>clpython - Implementation of the Python programming language written in Common Lisp.</li> <li>ironpython - Implementation of the Python programming language written in C#.</li> <li>micropython - A lean and efficient Python programming language implementation.</li> <li>numba - Python JIT compiler to LLVM aimed at scientific Python.</li> <li>peachpy - x86-64 assembler embedded in Python.</li> <li>pypy - A very fast and compliant implementation of the Python language.</li> <li>pyston - A Python implementation using JIT techniques.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#interactive-interpreter","title":"Interactive Interpreter","text":"<p>Interactive Python interpreters (REPL).</p> <ul> <li>bpython - A fancy interface to the Python interpreter.</li> <li>Jupyter Notebook (IPython) - A rich toolkit to help you make the most out of using Python interactively.<ul> <li>awesome-jupyter</li> </ul> </li> <li>ptpython - Advanced Python REPL built on top of the python-prompt-toolkit.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#internationalization","title":"Internationalization","text":"<p>Libraries for working with i18n.</p> <ul> <li>Babel - An internationalization library for Python.</li> <li>PyICU - A wrapper of International Components for Unicode C++ library (ICU).</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#job-scheduler","title":"Job Scheduler","text":"<p>Libraries for scheduling jobs.</p> <ul> <li>Airflow - Airflow is a platform to programmatically author, schedule and monitor workflows.</li> <li>APScheduler - A light but powerful in-process task scheduler that lets you schedule functions.</li> <li>django-schedule - A calendaring app for Django.</li> <li>doit - A task runner and build tool.</li> <li>gunnery - Multipurpose task execution tool for distributed systems with web-based interface.</li> <li>Joblib - A set of tools to provide lightweight pipelining in Python.</li> <li>Plan - Writing crontab file in Python like a charm.</li> <li>Prefect - A modern workflow orchestration framework that makes it easy to build, schedule and monitor robust data pipelines.</li> <li>schedule - Python job scheduling for humans.</li> <li>Spiff - A powerful workflow engine implemented in pure Python.</li> <li>TaskFlow - A Python library that helps to make task execution easy, consistent and reliable.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#logging","title":"Logging","text":"<p>Libraries for generating and working with logs.</p> <ul> <li>logbook - Logging replacement for Python.</li> <li>logging - (Python standard library) Logging facility for Python.</li> <li>loguru - Library which aims to bring enjoyable logging in Python.</li> <li>sentry-python - Sentry SDK for Python.</li> <li>structlog - Structured logging made easy.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#machine-learning","title":"Machine Learning","text":"<p>Libraries for Machine Learning. Also see awesome-machine-learning.</p> <ul> <li>gym - A toolkit for developing and comparing reinforcement learning algorithms.</li> <li>H2O - Open Source Fast Scalable Machine Learning Platform.</li> <li>Metrics - Machine learning evaluation metrics.</li> <li>NuPIC - Numenta Platform for Intelligent Computing.</li> <li>scikit-learn - The most popular Python library for Machine Learning.</li> <li>Spark ML - Apache Spark's scalable Machine Learning library.</li> <li>vowpal_porpoise - A lightweight Python wrapper for Vowpal Wabbit.</li> <li>xgboost - A scalable, portable, and distributed gradient boosting library.</li> <li>MindsDB - MindsDB is an open source AI layer for existing databases that allows you to effortlessly develop, train and deploy state-of-the-art machine learning models using standard queries.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#microsoft-windows","title":"Microsoft Windows","text":"<p>Python programming on Microsoft Windows.</p> <ul> <li>Python(x,y) - Scientific-applications-oriented Python Distribution based on Qt and Spyder.</li> <li>pythonlibs - Unofficial Windows binaries for Python extension packages.</li> <li>PythonNet - Python Integration with the .NET Common Language Runtime (CLR).</li> <li>PyWin32 - Python Extensions for Windows.</li> <li>WinPython - Portable development environment for Windows \u215e.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#miscellaneous","title":"Miscellaneous","text":"<p>Useful libraries or tools that don't fit in the categories above.</p> <ul> <li>blinker - A fast Python in-process signal/event dispatching system.</li> <li>boltons - A set of pure-Python utilities.</li> <li>itsdangerous - Various helpers to pass trusted data to untrusted environments.</li> <li>magenta - A tool to generate music and art using artificial intelligence.</li> <li>pluginbase - A simple but flexible plugin system for Python.</li> <li>tryton - A general purpose business framework.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#natural-language-processing","title":"Natural Language Processing","text":"<p>Libraries for working with human languages.</p> <ul> <li>General<ul> <li>gensim - Topic Modeling for Humans.</li> <li>langid.py - Stand-alone language identification system.</li> <li>nltk - A leading platform for building Python programs to work with human language data.</li> <li>pattern - A web mining module.</li> <li>polyglot - Natural language pipeline supporting hundreds of languages.</li> <li>pytext - A natural language modeling framework based on PyTorch.</li> <li>PyTorch-NLP - A toolkit enabling rapid deep learning NLP prototyping for research.</li> <li>spacy - A library for industrial-strength natural language processing in Python and Cython.</li> <li>Stanza - The Stanford NLP Group's official Python library, supporting 60+ languages.</li> </ul> </li> <li>Chinese<ul> <li>funNLP - A collection of tools and datasets for Chinese NLP.</li> <li>jieba - The most popular Chinese text segmentation library.</li> <li>pkuseg-python - A toolkit for Chinese word segmentation in various domains.</li> <li>snownlp - A library for processing Chinese text.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#network-virtualization","title":"Network Virtualization","text":"<p>Tools and libraries for Virtual Networking and SDN (Software Defined Networking).</p> <ul> <li>mininet - A popular network emulator and API written in Python.</li> <li>napalm - Cross-vendor API to manipulate network devices.</li> <li>pox - A Python-based SDN control applications, such as OpenFlow SDN controllers.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#news-feed","title":"News Feed","text":"<p>Libraries for building user's activities.</p> <ul> <li>django-activity-stream - Generating generic activity streams from the actions on your site.</li> <li>Stream Framework - Building news feed and notification systems using Cassandra and Redis.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#orm","title":"ORM","text":"<p>Libraries that implement Object-Relational Mapping or data mapping techniques.</p> <ul> <li>Relational Databases<ul> <li>Django Models - The Django ORM.</li> <li>SQLAlchemy - The Python SQL Toolkit and Object Relational Mapper.<ul> <li>awesome-sqlalchemy</li> </ul> </li> <li>dataset - Store Python dicts in a database - works with SQLite, MySQL, and PostgreSQL.</li> <li>orator -  The Orator ORM provides a simple yet beautiful ActiveRecord implementation.</li> <li>orm - An async ORM.</li> <li>peewee - A small, expressive ORM.</li> <li>pony - ORM that provides a generator-oriented interface to SQL.</li> <li>pydal - A pure Python Database Abstraction Layer.</li> </ul> </li> <li>NoSQL Databases<ul> <li>hot-redis - Rich Python data types for Redis.</li> <li>mongoengine - A Python Object-Document-Mapper for working with MongoDB.</li> <li>PynamoDB - A Pythonic interface for Amazon DynamoDB.</li> <li>redisco - A Python Library for Simple Models and Containers Persisted in Redis.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#package-management","title":"Package Management","text":"<p>Libraries for package and dependency management.</p> <ul> <li>pip - The package installer for Python.<ul> <li>pip-tools - A set of tools to keep your pinned Python dependencies fresh.</li> <li>PyPI</li> </ul> </li> <li>conda - Cross-platform, Python-agnostic binary package manager.</li> <li>poetry - Python dependency management and packaging made easy.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#package-repositories","title":"Package Repositories","text":"<p>Local PyPI repository server and proxies.</p> <ul> <li>bandersnatch - PyPI mirroring tool provided by Python Packaging Authority (PyPA).</li> <li>devpi - PyPI server and packaging/testing/release tool.</li> <li>localshop - Local PyPI server (custom packages and auto-mirroring of pypi).</li> <li>warehouse - Next generation Python Package Repository (PyPI).</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#penetration-testing","title":"Penetration Testing","text":"<p>Frameworks and tools for penetration testing.</p> <ul> <li>fsociety - A Penetration testing framework.</li> <li>setoolkit - A toolkit for social engineering.</li> <li>sqlmap - Automatic SQL injection and database takeover tool.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#permissions","title":"Permissions","text":"<p>Libraries that allow or deny users access to data or functionality.</p> <ul> <li>django-guardian - Implementation of per object permissions for Django 1.2+</li> <li>django-rules - A tiny but powerful app providing object-level permissions to Django, without requiring a database.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#processes","title":"Processes","text":"<p>Libraries for starting and communicating with OS processes.</p> <ul> <li>delegator.py - Subprocesses for Humans 2.0.</li> <li>sarge - Yet another wrapper for subprocess.</li> <li>sh - A full-fledged subprocess replacement for Python.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#recommender-systems","title":"Recommender Systems","text":"<p>Libraries for building recommender systems.</p> <ul> <li>annoy - Approximate Nearest Neighbors in C++/Python optimized for memory usage.</li> <li>fastFM - A library for Factorization Machines.</li> <li>implicit - A fast Python implementation of collaborative filtering for implicit datasets.</li> <li>libffm - A library for Field-aware Factorization Machine (FFM).</li> <li>lightfm - A Python implementation of a number of popular recommendation algorithms.</li> <li>spotlight - Deep recommender models using PyTorch.</li> <li>Surprise - A scikit for building and analyzing recommender systems.</li> <li>tensorrec - A Recommendation Engine Framework in TensorFlow.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#refactoring","title":"Refactoring","text":"<p>Refactoring tools and libraries for Python</p> <ul> <li>Bicycle Repair Man - Bicycle Repair Man, a refactoring tool for Python.</li> <li>Bowler - Safe code refactoring for modern Python.</li> <li>Rope -  Rope is a python refactoring library.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#restful-api","title":"RESTful API","text":"<p>Libraries for building RESTful APIs.</p> <ul> <li>Django<ul> <li>django-rest-framework - A powerful and flexible toolkit to build web APIs.</li> <li>django-tastypie - Creating delicious APIs for Django apps.</li> </ul> </li> <li>Flask<ul> <li>eve - REST API framework powered by Flask, MongoDB and good intentions.</li> <li>flask-api - Browsable Web APIs for Flask.</li> <li>flask-restful - Quickly building REST APIs for Flask.</li> </ul> </li> <li>Pyramid<ul> <li>cornice - A RESTful framework for Pyramid.</li> </ul> </li> <li>Framework agnostic<ul> <li>falcon - A high-performance framework for building cloud APIs and web app backends.</li> <li>fastapi - A modern, fast, web framework for building APIs with Python 3.6+ based on standard Python type hints.</li> <li>hug - A Python 3 framework for cleanly exposing APIs.</li> <li>sandman2 - Automated REST APIs for existing database-driven systems.</li> <li>sanic - A Python 3.6+ web server and web framework that's written to go fast.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#robotics","title":"Robotics","text":"<p>Libraries for robotics.</p> <ul> <li>PythonRobotics - This is a compilation of various robotics algorithms with visualizations.</li> <li>rospy - This is a library for ROS (Robot Operating System).</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#rpc-servers","title":"RPC Servers","text":"<p>RPC-compatible servers.</p> <ul> <li>RPyC (Remote Python Call) - A transparent and symmetric RPC library for Python</li> <li>zeroRPC - zerorpc is a flexible RPC implementation based on ZeroMQ and MessagePack.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#science","title":"Science","text":"<p>Libraries for scientific computing. Also see Python-for-Scientists.</p> <ul> <li>astropy - A community Python library for Astronomy.</li> <li>bcbio-nextgen - Providing best-practice pipelines for fully automated high throughput sequencing analysis.</li> <li>bccb - Collection of useful code related to biological analysis.</li> <li>Biopython - Biopython is a set of freely available tools for biological computation.</li> <li>cclib - A library for parsing and interpreting the results of computational chemistry packages.</li> <li>Colour - Implementing a comprehensive number of colour theory transformations and algorithms.</li> <li>Karate Club - Unsupervised machine learning toolbox for graph structured data.</li> <li>NetworkX - A high-productivity software for complex networks.</li> <li>NIPY - A collection of neuroimaging toolkits.</li> <li>NumPy - A fundamental package for scientific computing with Python.</li> <li>ObsPy - A Python toolbox for seismology.</li> <li>Open Babel - A chemical toolbox designed to speak the many languages of chemical data.</li> <li>PyDy - Short for Python Dynamics, used to assist with workflow in the modeling of dynamic motion.</li> <li>PyMC - Markov Chain Monte Carlo sampling toolkit.</li> <li>QuTiP - Quantum Toolbox in Python.</li> <li>RDKit - Cheminformatics and Machine Learning Software.</li> <li>SciPy - A Python-based ecosystem of open-source software for mathematics, science, and engineering.</li> <li>SimPy -  A process-based discrete-event simulation framework.</li> <li>statsmodels - Statistical modeling and econometrics in Python.</li> <li>SymPy - A Python library for symbolic mathematics.</li> <li>Zipline - A Pythonic algorithmic trading library.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#search","title":"Search","text":"<p>Libraries and software for indexing and performing search queries on data.</p> <ul> <li>django-haystack - Modular search for Django.</li> <li>elasticsearch-dsl-py - The official high-level Python client for Elasticsearch.</li> <li>elasticsearch-py - The official low-level Python client for Elasticsearch.</li> <li>pysolr - A lightweight Python wrapper for Apache Solr.</li> <li>whoosh - A fast, pure Python search engine library.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#serialization","title":"Serialization","text":"<p>Libraries for serializing complex data types</p> <ul> <li>marshmallow - A lightweight library for converting complex objects to and from simple Python datatypes.</li> <li>pysimdjson - A Python bindings for simdjson.</li> <li>python-rapidjson - A Python wrapper around RapidJSON.</li> <li>ultrajson - A fast JSON decoder and encoder written in C with Python bindings.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#serverless-frameworks","title":"Serverless Frameworks","text":"<p>Frameworks for developing serverless Python code.</p> <ul> <li>python-lambda - A toolkit for developing and deploying Python code in AWS Lambda.</li> <li>Zappa - A tool for deploying WSGI applications on AWS Lambda and API Gateway.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#shell","title":"Shell","text":"<p>Shells based on Python.</p> <ul> <li>xonsh - A Python-powered, cross-platform, Unix-gazing shell language and command prompt.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#specific-formats-processing","title":"Specific Formats Processing","text":"<p>Libraries for parsing and manipulating specific text formats.</p> <ul> <li>General<ul> <li>tablib - A module for Tabular Datasets in XLS, CSV, JSON, YAML.</li> </ul> </li> <li>Office<ul> <li>docxtpl - Editing a docx document by jinja2 template</li> <li>openpyxl - A library for reading and writing Excel 2010 xlsx/xlsm/xltx/xltm files.</li> <li>pyexcel - Providing one API for reading, manipulating and writing csv, ods, xls, xlsx and xlsm files.</li> <li>python-docx - Reads, queries and modifies Microsoft Word 2007/2008 docx files.</li> <li>python-pptx - Python library for creating and updating PowerPoint (.pptx) files.</li> <li>unoconv - Convert between any document format supported by LibreOffice/OpenOffice.</li> <li>XlsxWriter - A Python module for creating Excel .xlsx files.</li> <li>xlwings - A BSD-licensed library that makes it easy to call Python from Excel and vice versa.</li> <li>xlwt / xlrd - Writing and reading data and formatting information from Excel files.</li> </ul> </li> <li>PDF<ul> <li>pdfminer.six - Pdfminer.six is a community maintained fork of the original PDFMiner.</li> <li>PyPDF2 - A library capable of splitting, merging and transforming PDF pages.</li> <li>ReportLab - Allowing Rapid creation of rich PDF documents.</li> </ul> </li> <li>Markdown<ul> <li>Mistune - Fastest and full featured pure Python parsers of Markdown.</li> <li>Python-Markdown - A Python implementation of John Gruber\u2019s Markdown.</li> </ul> </li> <li>YAML<ul> <li>PyYAML - YAML implementations for Python.</li> </ul> </li> <li>CSV<ul> <li>csvkit - Utilities for converting to and working with CSV.</li> </ul> </li> <li>Archive<ul> <li>unp - A command line tool that can unpack archives easily.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#static-site-generator","title":"Static Site Generator","text":"<p>Static site generator is a software that takes some text + templates as input and produces HTML files on the output.</p> <ul> <li>lektor - An easy to use static CMS and blog engine.</li> <li>mkdocs - Markdown friendly documentation generator.</li> <li>makesite - Simple, lightweight, and magic-free static site/blog generator (&lt; 130 lines).</li> <li>nikola - A static website and blog generator.</li> <li>pelican - Static site generator that supports Markdown and reST syntax.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#tagging","title":"Tagging","text":"<p>Libraries for tagging items.</p> <ul> <li>django-taggit - Simple tagging for Django.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#task-queues","title":"Task Queues","text":"<p>Libraries for working with task queues.</p> <ul> <li>celery - An asynchronous task queue/job queue based on distributed message passing.</li> <li>dramatiq - A fast and reliable background task processing library for Python 3.</li> <li>huey - Little multi-threaded task queue.</li> <li>mrq - A distributed worker task queue in Python using Redis &amp; gevent.</li> <li>rq - Simple job queues for Python.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#template-engine","title":"Template Engine","text":"<p>Libraries and tools for templating and lexing.</p> <ul> <li>Genshi - Python templating toolkit for generation of web-aware output.</li> <li>Jinja2 - A modern and designer friendly templating language.</li> <li>Mako - Hyperfast and lightweight templating for the Python platform.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#testing","title":"Testing","text":"<p>Libraries for testing codebases and generating test data.</p> <ul> <li>Testing Frameworks<ul> <li>hypothesis - Hypothesis is an advanced Quickcheck style property based testing library.</li> <li>nose2 - The successor to <code>nose</code>, based on `unittest2.</li> <li>pytest - A mature full-featured Python testing tool.</li> <li>Robot Framework - A generic test automation framework.</li> <li>unittest - (Python standard library) Unit testing framework.</li> </ul> </li> <li>Test Runners<ul> <li>green - A clean, colorful test runner.</li> <li>mamba - The definitive testing tool for Python. Born under the banner of BDD.</li> <li>tox - Auto builds and tests distributions in multiple Python versions</li> </ul> </li> <li>GUI / Web Testing<ul> <li>locust - Scalable user load testing tool written in Python.</li> <li>PyAutoGUI - PyAutoGUI is a cross-platform GUI automation Python module for human beings.</li> <li>Schemathesis - A tool for automatic property-based testing of web applications built with Open API / Swagger specifications.</li> <li>Selenium - Python bindings for Selenium WebDriver.</li> <li>sixpack - A language-agnostic A/B Testing framework.</li> <li>splinter - Open source tool for testing web applications.</li> </ul> </li> <li>Mock<ul> <li>doublex - Powerful test doubles framework for Python.</li> <li>freezegun - Travel through time by mocking the datetime module.</li> <li>httmock - A mocking library for requests for Python 2.6+ and 3.2+.</li> <li>httpretty - HTTP request mock tool for Python.</li> <li>mock - (Python standard library) A mocking and patching library.</li> <li>mocket - A socket mock framework with gevent/asyncio/SSL support.</li> <li>responses - A utility library for mocking out the requests Python library.</li> <li>VCR.py - Record and replay HTTP interactions on your tests.</li> </ul> </li> <li>Object Factories<ul> <li>factory_boy - A test fixtures replacement for Python.</li> <li>mixer - Another fixtures replacement. Supports Django, Flask, SQLAlchemy, Peewee and etc.</li> <li>model_mommy - Creating random fixtures for testing in Django.</li> </ul> </li> <li>Code Coverage<ul> <li>coverage - Code coverage measurement.</li> </ul> </li> <li>Fake Data<ul> <li>fake2db - Fake database generator.</li> <li>faker - A Python package that generates fake data.</li> <li>mimesis - is a Python library that help you generate fake data.</li> <li>radar - Generate random datetime / time.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#text-processing","title":"Text Processing","text":"<p>Libraries for parsing and manipulating plain texts.</p> <ul> <li>General<ul> <li>chardet - Python \u2154 compatible character encoding detector.</li> <li>difflib - (Python standard library) Helpers for computing deltas.</li> <li>ftfy - Makes Unicode text less broken and more consistent automagically.</li> <li>fuzzywuzzy - Fuzzy String Matching.</li> <li>Levenshtein - Fast computation of Levenshtein distance and string similarity.</li> <li>pangu.py - Paranoid text spacing.</li> <li>pyfiglet - An implementation of figlet written in Python.</li> <li>pypinyin - Convert Chinese hanzi (\u6f22\u5b57) to pinyin (\u62fc\u97f3).</li> <li>textdistance - Compute distance between sequences with 30+ algorithms.</li> <li>unidecode - ASCII transliterations of Unicode text.</li> </ul> </li> <li>Slugify<ul> <li>awesome-slugify - A Python slugify library that can preserve unicode.</li> <li>python-slugify - A Python slugify library that translates unicode to ASCII.</li> <li>unicode-slugify - A slugifier that generates unicode slugs with Django as a dependency.</li> </ul> </li> <li>Unique identifiers<ul> <li>hashids - Implementation of hashids in Python.</li> <li>shortuuid - A generator library for concise, unambiguous and URL-safe UUIDs.</li> </ul> </li> <li>Parser<ul> <li>ply - Implementation of lex and yacc parsing tools for Python.</li> <li>pygments - A generic syntax highlighter.</li> <li>pyparsing - A general purpose framework for generating parsers.</li> <li>python-nameparser - Parsing human names into their individual components.</li> <li>python-phonenumbers - Parsing, formatting, storing and validating international phone numbers.</li> <li>python-user-agents - Browser user agent parser.</li> <li>sqlparse - A non-validating SQL parser.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#third-party-apis","title":"Third-party APIs","text":"<p>Libraries for accessing third party services APIs. Also see List of Python API Wrappers and Libraries.</p> <ul> <li>apache-libcloud - One Python library for all clouds.</li> <li>boto3 - Python interface to Amazon Web Services.</li> <li>django-wordpress - WordPress models and views for Django.</li> <li>facebook-sdk - Facebook Platform Python SDK.</li> <li>google-api-python-client - Google APIs Client Library for Python.</li> <li>gspread - Google Spreadsheets Python API.</li> <li>twython - A Python wrapper for the Twitter API.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#url-manipulation","title":"URL Manipulation","text":"<p>Libraries for parsing URLs.</p> <ul> <li>furl - A small Python library that makes parsing and manipulating URLs easy.</li> <li>purl - A simple, immutable URL class with a clean API for interrogation and manipulation.</li> <li>pyshorteners - A pure Python URL shortening lib.</li> <li>webargs - A friendly library for parsing HTTP request arguments with built-in support for popular web frameworks.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#video","title":"Video","text":"<p>Libraries for manipulating video and GIFs.</p> <ul> <li>moviepy - A module for script-based movie editing with many formats, including animated GIFs.</li> <li>scikit-video - Video processing routines for SciPy.</li> <li>vidgear - Most Powerful multi-threaded Video Processing framework.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#web-asset-management","title":"Web Asset Management","text":"<p>Tools for managing, compressing and minifying website assets.</p> <ul> <li>django-compressor - Compresses linked and inline JavaScript or CSS into a single cached file.</li> <li>django-pipeline - An asset packaging library for Django.</li> <li>django-storages - A collection of custom storage back ends for Django.</li> <li>fanstatic - Packages, optimizes, and serves static file dependencies as Python packages.</li> <li>fileconveyor - A daemon to detect and sync files to CDNs, S3 and FTP.</li> <li>flask-assets - Helps you integrate webassets into your Flask app.</li> <li>webassets - Bundles, optimizes, and manages unique cache-busting URLs for static resources.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#web-content-extracting","title":"Web Content Extracting","text":"<p>Libraries for extracting web contents.</p> <ul> <li>html2text - Convert HTML to Markdown-formatted text.</li> <li>lassie - Web Content Retrieval for Humans.</li> <li>micawber - A small library for extracting rich content from URLs.</li> <li>newspaper - News extraction, article extraction and content curation in Python.</li> <li>python-readability - Fast Python port of arc90's readability tool.</li> <li>requests-html - Pythonic HTML Parsing for Humans.</li> <li>sumy - A module for automatic summarization of text documents and HTML pages.</li> <li>textract - Extract text from any document, Word, PowerPoint, PDFs, etc.</li> <li>toapi - Every web site provides APIs.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#web-crawling","title":"Web Crawling","text":"<p>Libraries to automate web scraping.</p> <ul> <li>feedparser - Universal feed parser.</li> <li>grab - Site scraping framework.</li> <li>mechanicalsoup - A Python library for automating interaction with websites.</li> <li>scrapy - A fast high-level screen scraping and web crawling framework.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#web-frameworks","title":"Web Frameworks","text":"<p>Traditional full stack web frameworks. Also see RESTful API.</p> <ul> <li>Synchronous<ul> <li>django - The most popular web framework in Python.<ul> <li>awesome-django</li> <li>awesome-django</li> </ul> </li> <li>flask - A microframework for Python.<ul> <li>awesome-flask</li> </ul> </li> <li>pyramid - A small, fast, down-to-earth, open source Python web framework.<ul> <li>awesome-pyramid</li> </ul> </li> <li>masonite - The modern and developer centric Python web framework.</li> </ul> </li> <li>Asynchronous<ul> <li>tornado - A web framework and asynchronous networking library.</li> </ul> </li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#websocket","title":"WebSocket","text":"<p>Libraries for working with WebSocket.</p> <ul> <li>autobahn-python - WebSocket &amp; WAMP for Python on Twisted and asyncio.</li> <li>channels - Developer-friendly asynchrony for Django.</li> <li>websockets - A library for building WebSocket servers and clients with a focus on correctness and simplicity.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#wsgi-servers","title":"WSGI Servers","text":"<p>WSGI-compatible web servers.</p> <ul> <li>gunicorn - Pre-forked, ported from Ruby's Unicorn project.</li> <li>uwsgi - A project aims at developing a full stack for building hosting services, written in C.</li> <li>waitress - Multi-threaded, powers Pyramid.</li> <li>werkzeug - A WSGI utility library for Python that powers Flask and can easily be embedded into your own projects.</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#resources","title":"Resources","text":"<p>Where to discover learning resources or new Python libraries.</p>"},{"location":"blog/2024/09/20/awesome-python/#newsletters","title":"Newsletters","text":"<ul> <li>Awesome Python Newsletter</li> <li>Pycoder's Weekly</li> <li>Python Tricks</li> <li>Python Weekly</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#podcasts","title":"Podcasts","text":"<ul> <li>Django Chat</li> <li>Python Bytes</li> <li>Talk Python To Me</li> <li>Python Test</li> <li>The Real Python Podcast</li> </ul>"},{"location":"blog/2024/09/20/awesome-python/#contributing","title":"Contributing","text":"<p>Your contributions are always welcome! Please take a look at the contribution guidelines first.</p> <p>If you have any question about this opinionated list, do not hesitate to contact me @VintaChen on Twitter or open an issue on GitHub.</p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/","title":"Best of Atomistic Machine Learning","text":"Best of Atomistic Machine Learning \u269b\ufe0f\ud83e\uddec\ud83d\udc8e      <p> \ud83c\udfc6\u00a0 A ranked list of awesome atomistic machine learning (AML) projects. Updated regularly. </p> <p> </p> <p>This curated list contains 430 awesome open-source projects with a total of 190K stars grouped into 22 categories. All projects are ranked by a project-quality score, which is calculated based on various metrics automatically collected from GitHub and different package managers. If you like to add or update projects, feel free to open an issue, submit a pull request, or directly edit the projects.yaml.</p> <p>The current focus of this list is more on simulation data rather than experimental data, and more on materials rather than drug design. Nevertheless, contributions from other fields are warmly welcome!</p> <p>How to cite. See the button \"Cite this repository\" on the right side-bar.</p> <p>\ud83e\uddd9\u200d\u2642\ufe0f  Discover other best-of lists or create your own.</p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#contents","title":"Contents","text":"<ul> <li>Active learning 6 projects</li> <li>Community resources 30 projects</li> <li>Datasets 45 projects</li> <li>Data Structures 4 projects</li> <li>Density functional theory (ML-DFT) 33 projects</li> <li>Educational Resources 28 projects</li> <li>Explainable Artificial intelligence (XAI) 3 projects</li> <li>Electronic structure methods (ML-ESM) 5 projects</li> <li>General Tools 22 projects</li> <li>Generative Models 14 projects</li> <li>Interatomic Potentials (ML-IAP) 70 projects</li> <li>Language Models 22 projects</li> <li>Materials Discovery 12 projects</li> <li>Mathematical tools 11 projects</li> <li>Molecular Dynamics 10 projects</li> <li>Reinforcement Learning 2 projects</li> <li>Representation Engineering 25 projects</li> <li>Representation Learning 58 projects</li> <li>Universal Potentials 10 projects</li> <li>Unsupervised Learning 7 projects</li> <li>Visualization 6 projects</li> <li>Wavefunction methods (ML-WFT) 5 projects</li> <li>Others 1 projects</li> </ul>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#explanation","title":"Explanation","text":"<ul> <li>\ud83e\udd47\ud83e\udd48\ud83e\udd49\u00a0 Combined project-quality score</li> <li>\u2b50\ufe0f\u00a0 Star count from GitHub</li> <li>\ud83d\udc23\u00a0 New project (less than 6 months old)</li> <li>\ud83d\udca4\u00a0 Inactive project (6 months no activity)</li> <li>\ud83d\udc80\u00a0 Dead project (12 months no activity)</li> <li>\ud83d\udcc8\ud83d\udcc9\u00a0 Project is trending up or down</li> <li>\u2795\u00a0 Project was recently added</li> <li>\ud83d\udc68\u200d\ud83d\udcbb\u00a0 Contributors count from GitHub</li> <li>\ud83d\udd00\u00a0 Fork count from GitHub</li> <li>\ud83d\udccb\u00a0 Issue count from GitHub</li> <li>\u23f1\ufe0f\u00a0 Last update timestamp on package manager</li> <li>\ud83d\udce5\u00a0 Download count from package manager</li> <li>\ud83d\udce6\u00a0 Number of dependent projects</li> </ul>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#active-learning","title":"Active learning","text":"<p>Projects that focus on enabling active learning, iterative learning schemes for atomistic ML.</p> FLARE (\ud83e\udd4722 \u00b7  \u2b50 290) - An open-source Python package for creating fast and accurate interatomic potentials. <code>MIT</code> <code>C++</code> <code>ML-IAP</code>  - [GitHub](https://github.com/mir-group/flare) (\ud83d\udc68\u200d\ud83d\udcbb 42 \u00b7 \ud83d\udd00 67 \u00b7 \ud83d\udce5 8 \u00b7 \ud83d\udce6 11 \u00b7 \ud83d\udccb 220 - 16% open \u00b7 \u23f1\ufe0f 30.09.2024):      <pre><code>git clone https://github.com/mir-group/flare\n</code></pre> IPSuite (\ud83e\udd4817 \u00b7  \u2b50 18) - A Python toolkit for FAIR development and deployment of machine-learned interatomic potentials. <code>EPL-2.0</code> <code>ML-IAP</code> <code>MD</code> <code>workflows</code> <code>HTC</code> <code>FAIR</code>  - [GitHub](https://github.com/zincware/IPSuite) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 10 \u00b7 \ud83d\udce6 6 \u00b7 \ud83d\udccb 130 - 51% open \u00b7 \u23f1\ufe0f 19.09.2024):      <pre><code>git clone https://github.com/zincware/IPSuite\n</code></pre> - [PyPi](https://pypi.org/project/ipsuite) (\ud83d\udce5 150 / month \u00b7 \u23f1\ufe0f 08.08.2024):     <pre><code>pip install ipsuite\n</code></pre> Finetuna (\ud83e\udd4910 \u00b7  \u2b50 42) - Active Learning for Machine Learning Potentials. <code>MIT</code>  - [GitHub](https://github.com/ulissigroup/finetuna) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 11 \u00b7 \ud83d\udccb 20 - 25% open \u00b7 \u23f1\ufe0f 15.05.2024):      <pre><code>git clone https://github.com/ulissigroup/finetuna\n</code></pre> Show 3 hidden projects...  - flare++ (\ud83e\udd4813 \u00b7  \u2b50 35 \u00b7 \ud83d\udc80) - A many-body extension of the FLARE code. <code>MIT</code> <code>C++</code> <code>ML-IAP</code> - ACEHAL (\ud83e\udd495 \u00b7  \u2b50 11 \u00b7 \ud83d\udc80) - Hyperactive Learning (HAL) Python interface for building Atomic Cluster Expansion potentials. <code>Unlicensed</code> <code>Julia</code> - ALEBREW (\ud83e\udd493 \u00b7  \u2b50 9 \u00b7 \ud83d\udca4) - Official repository for the paper Uncertainty-biased molecular dynamics for learning uniformly accurate interatomic.. <code>Custom</code> <code>ML-IAP</code> <code>MD</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#community-resources","title":"Community resources","text":"<p>Projects that collect atomistic ML resources or foster communication within community.</p> <p>\ud83d\udd17\u00a0AI for Science Map  - Interactive mindmap of the AI4Science research field, including atomistic machine learning, including papers,..</p> <p>\ud83d\udd17\u00a0Atomic Cluster Expansion  - Atomic Cluster Expansion (ACE) community homepage.</p> <p>\ud83d\udd17\u00a0CrystaLLM  - Generate a crystal structure from a composition. <code>language-models</code> <code>generative</code> <code>pretrained</code> <code>transformer</code></p> <p>\ud83d\udd17\u00a0GAP-ML.org community homepage <code>ML-IAP</code></p> <p>\ud83d\udd17\u00a0matsci.org  - A community forum for the discussion of anything materials science, with a focus on computational materials science..</p> <p>\ud83d\udd17\u00a0Matter Modeling Stack Exchange - Machine Learning  - Forum StackExchange, site Matter Modeling, ML-tagged questions.</p> Best-of Machine Learning with Python (\ud83e\udd4722 \u00b7  \u2b50 16K) - A ranked list of awesome machine learning Python libraries. Updated weekly. <code>CC-BY-4.0</code> <code>general-ml</code> <code>Python</code>  - [GitHub](https://github.com/ml-tooling/best-of-ml-python) (\ud83d\udc68\u200d\ud83d\udcbb 47 \u00b7 \ud83d\udd00 2.3K \u00b7 \ud83d\udccb 59 - 42% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/ml-tooling/best-of-ml-python\n</code></pre> Graph-based Deep Learning Literature (\ud83e\udd4719 \u00b7  \u2b50 4.7K) - links to conference publications in graph-based deep learning. <code>MIT</code> <code>general-ml</code> <code>rep-learn</code>  - [GitHub](https://github.com/naganandy/graph-based-deep-learning-literature) (\ud83d\udc68\u200d\ud83d\udcbb 12 \u00b7 \ud83d\udd00 770 \u00b7 \u23f1\ufe0f 09.09.2024):      <pre><code>git clone https://github.com/naganandy/graph-based-deep-learning-literature\n</code></pre> MatBench (\ud83e\udd4718 \u00b7  \u2b50 110 \u00b7 \ud83d\udca4) - Matbench: Benchmarks for materials science property prediction. <code>MIT</code> <code>datasets</code> <code>benchmarking</code> <code>model-repository</code>  - [GitHub](https://github.com/materialsproject/matbench) (\ud83d\udc68\u200d\ud83d\udcbb 25 \u00b7 \ud83d\udd00 46 \u00b7 \ud83d\udce6 16 \u00b7 \ud83d\udccb 65 - 60% open \u00b7 \u23f1\ufe0f 20.01.2024):      <pre><code>git clone https://github.com/materialsproject/matbench\n</code></pre> - [PyPi](https://pypi.org/project/matbench) (\ud83d\udce5 410 / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 27.07.2022):     <pre><code>pip install matbench\n</code></pre> MatBench Discovery (\ud83e\udd4718 \u00b7  \u2b50 92) - An evaluation framework for machine learning models simulating high-throughput materials discovery. <code>MIT</code> <code>datasets</code> <code>benchmarking</code> <code>model-repository</code>  - [GitHub](https://github.com/janosh/matbench-discovery) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 12 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 39 - 10% open \u00b7 \u23f1\ufe0f 02.10.2024):      <pre><code>git clone https://github.com/janosh/matbench-discovery\n</code></pre> - [PyPi](https://pypi.org/project/matbench-discovery) (\ud83d\udce5 1.7K / month \u00b7 \u23f1\ufe0f 11.09.2024):     <pre><code>pip install matbench-discovery\n</code></pre> OpenML (\ud83e\udd4817 \u00b7  \u2b50 660) - Open Machine Learning. <code>BSD-3</code> <code>datasets</code>  - [GitHub](https://github.com/openml/OpenML) (\ud83d\udc68\u200d\ud83d\udcbb 35 \u00b7 \ud83d\udd00 90 \u00b7 \ud83d\udccb 930 - 39% open \u00b7 \u23f1\ufe0f 08.09.2024):      <pre><code>git clone https://github.com/openml/OpenML\n</code></pre> GT4SD - Generative Toolkit for Scientific Discovery (\ud83e\udd4815 \u00b7  \u2b50 340) - Gradio apps of generative models in GT4SD. <code>MIT</code> <code>generative</code> <code>pretrained</code> <code>drug-discovery</code> <code>model-repository</code>  - [GitHub](https://github.com/GT4SD/gt4sd-core) (\ud83d\udc68\u200d\ud83d\udcbb 20 \u00b7 \ud83d\udd00 68 \u00b7 \ud83d\udccb 110 - 12% open \u00b7 \u23f1\ufe0f 12.09.2024):      <pre><code>git clone https://github.com/GT4SD/gt4sd-core\n</code></pre> AI for Science Resources (\ud83e\udd4813 \u00b7  \u2b50 500) - List of resources for AI4Science research, including learning resources. <code>GPL-3.0 license</code>  - [GitHub](https://github.com/divelab/AIRS) (\ud83d\udc68\u200d\ud83d\udcbb 29 \u00b7 \ud83d\udd00 58 \u00b7 \ud83d\udccb 15 - 6% open \u00b7 \u23f1\ufe0f 03.09.2024):      <pre><code>git clone https://github.com/divelab/AIRS\n</code></pre> Neural-Network-Models-for-Chemistry (\ud83e\udd4811 \u00b7  \u2b50 78) - A collection of Nerual Network Models for chemistry. <code>Unlicensed</code> <code>rep-learn</code>  - [GitHub](https://github.com/Eipgen/Neural-Network-Models-for-Chemistry) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 10 \u00b7 \ud83d\udccb 2 - 50% open \u00b7 \u23f1\ufe0f 20.09.2024):      <pre><code>git clone https://github.com/Eipgen/Neural-Network-Models-for-Chemistry\n</code></pre> Awesome Neural Geometry (\ud83e\udd489 \u00b7  \u2b50 910) - A curated collection of resources and research related to the geometry of representations in the brain, deep networks,.. <code>Unlicensed</code> <code>educational</code> <code>rep-learn</code>  - [GitHub](https://github.com/neurreps/awesome-neural-geometry) (\ud83d\udc68\u200d\ud83d\udcbb 12 \u00b7 \ud83d\udd00 57 \u00b7 \u23f1\ufe0f 25.09.2024):      <pre><code>git clone https://github.com/neurreps/awesome-neural-geometry\n</code></pre> GNoME Explorer (\ud83e\udd489 \u00b7  \u2b50 870) - Graph Networks for Materials Exploration Database. <code>Apache-2</code> <code>datasets</code> <code>materials-discovery</code>  - [GitHub](https://github.com/google-deepmind/materials_discovery) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udccb 22 - 81% open \u00b7 \u23f1\ufe0f 04.09.2024):      <pre><code>git clone https://github.com/google-deepmind/materials_discovery\n</code></pre> Awesome Materials Informatics (\ud83e\udd489 \u00b7  \u2b50 370) - Curated list of known efforts in materials informatics, i.e. in modern materials science. <code>Custom</code>  - [GitHub](https://github.com/tilde-lab/awesome-materials-informatics) (\ud83d\udc68\u200d\ud83d\udcbb 19 \u00b7 \ud83d\udd00 81 \u00b7 \u23f1\ufe0f 18.09.2024):      <pre><code>git clone https://github.com/tilde-lab/awesome-materials-informatics\n</code></pre> MoLFormers UI (\ud83e\udd489 \u00b7  \u2b50 250 \u00b7 \ud83d\udca4) - A family of foundation models trained on chemicals. <code>Apache-2</code> <code>transformer</code> <code>language-models</code> <code>pretrained</code> <code>drug-discovery</code>  - [GitHub](https://github.com/IBM/molformer) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 41 \u00b7 \ud83d\udccb 19 - 47% open \u00b7 \u23f1\ufe0f 16.10.2023):      <pre><code>git clone https://github.com/IBM/molformer\n</code></pre> AI for Science paper collection (\ud83e\udd489 \u00b7  \u2b50 57 \u00b7 \ud83d\udc23) - List the AI for Science papers accepted by top conferences. <code>Apache-2</code>  - [GitHub](https://github.com/sherrylixuecheng/AI_for_Science_paper_collection) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 6 \u00b7 \u23f1\ufe0f 14.09.2024):      <pre><code>git clone https://github.com/sherrylixuecheng/AI_for_Science_paper_collection\n</code></pre> optimade.science (\ud83e\udd498 \u00b7  \u2b50 8) - A sky-scanner Optimade browser-only GUI. <code>MIT</code> <code>datasets</code>  - [GitHub](https://github.com/tilde-lab/optimade.science) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 2 \u00b7 \ud83d\udccb 26 - 26% open \u00b7 \u23f1\ufe0f 10.06.2024):      <pre><code>git clone https://github.com/tilde-lab/optimade.science\n</code></pre> Awesome-Graph-Generation (\ud83e\udd497 \u00b7  \u2b50 270 \u00b7 \ud83d\udca4) - A curated list of up-to-date graph generation papers and resources. <code>Unlicensed</code> <code>rep-learn</code>  - [GitHub](https://github.com/yuanqidu/awesome-graph-generation) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 17 \u00b7 \u23f1\ufe0f 17.03.2024):      <pre><code>git clone https://github.com/yuanqidu/awesome-graph-generation\n</code></pre> Awesome Neural SBI (\ud83e\udd497 \u00b7  \u2b50 85) - Community-sourced list of papers and resources on neural simulation-based inference. <code>MIT</code> <code>active-learning</code>  - [GitHub](https://github.com/smsharma/awesome-neural-sbi) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 6 \u00b7 \ud83d\udccb 2 - 50% open \u00b7 \u23f1\ufe0f 17.06.2024):      <pre><code>git clone https://github.com/smsharma/awesome-neural-sbi\n</code></pre> Awesome-Crystal-GNNs (\ud83e\udd497 \u00b7  \u2b50 60) - This repository contains a collection of resources and papers on GNN Models on Crystal Solid State Materials. <code>MIT</code>  - [GitHub](https://github.com/kdmsit/Awesome-Crystal-GNNs) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 8 \u00b7 \u23f1\ufe0f 16.06.2024):      <pre><code>git clone https://github.com/kdmsit/Awesome-Crystal-GNNs\n</code></pre> The Collection of Database and Dataset Resources in Materials Science (\ud83e\udd496 \u00b7  \u2b50 260) - A list of databases, datasets and books/handbooks where you can find materials properties for machine learning.. <code>Unlicensed</code> <code>datasets</code>  - [GitHub](https://github.com/sedaoturak/data-resources-for-materials-science) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 42 \u00b7 \ud83d\udccb 2 - 50% open \u00b7 \u23f1\ufe0f 07.06.2024):      <pre><code>git clone https://github.com/sedaoturak/data-resources-for-materials-science\n</code></pre> Show 6 hidden projects...  - A Highly Opinionated List of Open-Source Materials Informatics Resources (\ud83e\udd497 \u00b7  \u2b50 120 \u00b7 \ud83d\udc80) - A Highly Opinionated List of Open Source Materials Informatics Resources. <code>MIT</code> - MADICES Awesome Interoperability (\ud83e\udd497 \u00b7  \u2b50 1) - Linked data interoperability resources of the Machine-actionable data interoperability for the chemical sciences.. <code>MIT</code> <code>datasets</code> - Geometric-GNNs (\ud83e\udd494 \u00b7  \u2b50 92 \u00b7 \ud83d\udca4) - List of Geometric GNNs for 3D atomic systems. <code>Unlicensed</code> <code>datasets</code> <code>educational</code> <code>rep-learn</code> - Does this material exist? (\ud83e\udd494 \u00b7  \u2b50 15) - Vote on whether you think predicted crystal structures could be synthesised. <code>MIT</code> <code>for-fun</code> <code>materials-discovery</code> - GitHub topic materials-informatics (\ud83e\udd491) - GitHub topic materials-informatics. <code>Unlicensed</code> - MateriApps (\ud83e\udd491) - A Portal Site of Materials Science Simulation. <code>Unlicensed</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#datasets","title":"Datasets","text":"<p>Datasets, databases and trained models for atomistic ML.</p> <p>\ud83d\udd17\u00a0Alexandria Materials Database  - A database of millions of theoretical crystal structures (3D, 2D and 1D) discovered by machine learning accelerated..</p> <p>\ud83d\udd17\u00a0Catalysis Hub  - A web-platform for sharing data and software for computational catalysis research!.</p> <p>\ud83d\udd17\u00a0Citrination Datasets  - AI-Powered Materials Data Platform. Open Citrination has been decommissioned.</p> <p>\ud83d\udd17\u00a0crystals.ai  - Curated datasets for reproducible AI in materials science.</p> <p>\ud83d\udd17\u00a0DeepChem Models  - DeepChem models on HuggingFace. <code>model-repository</code> <code>pretrained</code> <code>language-models</code></p> <p>\ud83d\udd17\u00a0Graphs of Materials Project 20190401  - The dataset used to train the MEGNet interatomic potential. <code>ML-IAP</code></p> <p>\ud83d\udd17\u00a0HME21 Dataset  - High-temperature multi-element 2021 dataset for the PreFerred Potential (PFP).. <code>UIP</code></p> <p>\ud83d\udd17\u00a0JARVIS-Leaderboard ( \u2b50 58)  - Explore State-of-the-Art Materials Design Methods: https://www.nature.com/articles/s41524-024-01259-w. <code>model-repository</code> <code>benchmarking</code> <code>community-resource</code> <code>educational</code></p> <p>\ud83d\udd17\u00a0Materials Project - Charge Densities  - Materials Project has started offering charge density information available for download via their public API.</p> <p>\ud83d\udd17\u00a0Materials Project Trajectory (MPtrj) Dataset  - The dataset used to train the CHGNet universal potential. <code>UIP</code></p> <p>\ud83d\udd17\u00a0matterverse.ai  - Database of yet-to-be-sythesized materials predicted using state-of-the-art machine learning algorithms.</p> <p>\ud83d\udd17\u00a0MPF.2021.2.8  - The dataset used to train the M3GNet universal potential. <code>UIP</code></p> <p>\ud83d\udd17\u00a0NRELMatDB  - Computational materials database with the specific focus on materials for renewable energy applications including, but..</p> <p>\ud83d\udd17\u00a0Quantum-Machine.org Datasets  - Collection of datasets, including QM7, QM9, etc. MD, DFT. Small organic molecules, mostly.</p> <p>\ud83d\udd17\u00a0sGDML Datasets  - MD17, MD22, DFT datasets.</p> <p>\ud83d\udd17\u00a0MoleculeNet  - A Benchmark for Molecular Machine Learning. <code>benchmarking</code></p> <p>\ud83d\udd17\u00a0ZINC15  - A free database of commercially-available compounds for virtual screening. ZINC contains over 230 million purchasable.. <code>graph</code> <code>biomolecules</code></p> <p>\ud83d\udd17\u00a0ZINC20  - A free database of commercially-available compounds for virtual screening. ZINC contains over 230 million purchasable.. <code>graph</code> <code>biomolecules</code></p> OPTIMADE Python tools (\ud83e\udd4727 \u00b7  \u2b50 68) - Tools for implementing and consuming OPTIMADE APIs in Python. <code>MIT</code>  - [GitHub](https://github.com/Materials-Consortia/optimade-python-tools) (\ud83d\udc68\u200d\ud83d\udcbb 28 \u00b7 \ud83d\udd00 42 \u00b7 \ud83d\udce6 60 \u00b7 \ud83d\udccb 450 - 23% open \u00b7 \u23f1\ufe0f 30.09.2024):      <pre><code>git clone https://github.com/Materials-Consortia/optimade-python-tools\n</code></pre> - [PyPi](https://pypi.org/project/optimade) (\ud83d\udce5 8.8K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 16.09.2024):     <pre><code>pip install optimade\n</code></pre> - [Conda](https://anaconda.org/conda-forge/optimade) (\ud83d\udce5 92K \u00b7 \u23f1\ufe0f 16.09.2024):     <pre><code>conda install -c conda-forge optimade\n</code></pre> MPContribs (\ud83e\udd4723 \u00b7  \u2b50 35) - Platform for materials scientists to contribute and disseminate their materials data through Materials Project. <code>MIT</code>  - [GitHub](https://github.com/materialsproject/MPContribs) (\ud83d\udc68\u200d\ud83d\udcbb 25 \u00b7 \ud83d\udd00 20 \u00b7 \ud83d\udce6 39 \u00b7 \ud83d\udccb 99 - 21% open \u00b7 \u23f1\ufe0f 30.09.2024):      <pre><code>git clone https://github.com/materialsproject/MPContribs\n</code></pre> - [PyPi](https://pypi.org/project/mpcontribs-client) (\ud83d\udce5 2.7K / month \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 20.06.2024):     <pre><code>pip install mpcontribs-client\n</code></pre> FAIR Chemistry datasets (\ud83e\udd4721 \u00b7  \u2b50 770) - Datasets OC20, OC22, etc. Formerly known as Open Catalyst Project. <code>MIT</code> <code>catalysis</code>  - [GitHub](https://github.com/FAIR-Chem/fairchem) (\ud83d\udc68\u200d\ud83d\udcbb 42 \u00b7 \ud83d\udd00 230 \u00b7 \ud83d\udccb 210 - 6% open \u00b7 \u23f1\ufe0f 01.10.2024):      <pre><code>git clone https://github.com/FAIR-Chem/fairchem\n</code></pre> Open Databases Integration for Materials Design (OPTIMADE) (\ud83e\udd4818 \u00b7  \u2b50 82) - Specification of a common REST API for access to materials databases. <code>CC-BY-4.0</code>  - [GitHub](https://github.com/Materials-Consortia/OPTIMADE) (\ud83d\udc68\u200d\ud83d\udcbb 21 \u00b7 \ud83d\udd00 35 \u00b7 \ud83d\udccb 240 - 28% open \u00b7 \u23f1\ufe0f 12.06.2024):      <pre><code>git clone https://github.com/Materials-Consortia/OPTIMADE\n</code></pre> load-atoms (\ud83e\udd4815 \u00b7  \u2b50 38) - download and manipulate atomistic datasets. <code>MIT</code> <code>data-structures</code>  - [GitHub](https://github.com/jla-gardner/load-atoms) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 2 \u00b7 \ud83d\udce6 3 \u00b7 \ud83d\udccb 31 - 3% open \u00b7 \u23f1\ufe0f 16.09.2024):      <pre><code>git clone https://github.com/jla-gardner/load-atoms\n</code></pre> - [PyPi](https://pypi.org/project/load-atoms) (\ud83d\udce5 1K / month \u00b7 \u23f1\ufe0f 16.09.2024):     <pre><code>pip install load-atoms\n</code></pre> QH9 (\ud83e\udd4813 \u00b7  \u2b50 500) - A Quantum Hamiltonian Prediction Benchmark. <code>CC-BY-NC-SA-4.0</code> <code>ML-DFT</code>  - [GitHub](https://github.com/divelab/AIRS) (\ud83d\udc68\u200d\ud83d\udcbb 29 \u00b7 \ud83d\udd00 58 \u00b7 \ud83d\udccb 15 - 6% open \u00b7 \u23f1\ufe0f 03.09.2024):      <pre><code>git clone https://github.com/divelab/AIRS\n</code></pre> SPICE (\ud83e\udd4810 \u00b7  \u2b50 150) - A collection of QM data for training potential functions. <code>MIT</code> <code>ML-IAP</code> <code>MD</code>  - [GitHub](https://github.com/openmm/spice-dataset) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 9 \u00b7 \ud83d\udce5 260 \u00b7 \ud83d\udccb 64 - 26% open \u00b7 \u23f1\ufe0f 19.08.2024):      <pre><code>git clone https://github.com/openmm/spice-dataset\n</code></pre> Materials Data Facility (MDF) (\ud83e\udd489 \u00b7  \u2b50 10 \u00b7 \ud83d\udca4) - A simple way to publish, discover, and access materials datasets. Publication of very large datasets supported (e.g.,.. <code>Apache-2</code>  - [GitHub](https://github.com/materials-data-facility/connect_client) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 1 \u00b7 \ud83d\udccb 7 - 14% open \u00b7 \u23f1\ufe0f 05.02.2024):      <pre><code>git clone https://github.com/materials-data-facility/connect_client\n</code></pre> 2DMD dataset (\ud83e\udd489 \u00b7  \u2b50 6 \u00b7 \ud83d\udca4) - Code for Kazeev, N., Al-Maeeni, A.R., Romanov, I. et al. Sparse representation for machine learning the properties of.. <code>Apache-2</code> <code>material-defect</code>  - [GitHub](https://github.com/HSE-LAMBDA/ai4material_design) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 3 \u00b7 \u23f1\ufe0f 21.11.2023):      <pre><code>git clone https://github.com/HSE-LAMBDA/ai4material_design\n</code></pre> AIS Square (\ud83e\udd497 \u00b7  \u2b50 10 \u00b7 \ud83d\udca4) - A collaborative and open-source platform for sharing AI for Science datasets, models, and workflows. Home of the.. <code>LGPL-3.0</code> <code>community-resource</code> <code>model-repository</code>  - [GitHub](https://github.com/deepmodeling/AIS-Square) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 8 \u00b7 \ud83d\udccb 6 - 83% open \u00b7 \u23f1\ufe0f 06.12.2023):      <pre><code>git clone https://github.com/deepmodeling/AIS-Square\n</code></pre> The Perovskite Database Project (\ud83e\udd495 \u00b7  \u2b50 58 \u00b7 \ud83d\udca4) - Perovskite Database Project aims at making all perovskite device data, both past and future, available in a form.. <code>Unlicensed</code> <code>community-resource</code>  - [GitHub](https://github.com/Jesperkemist/perovskitedatabase) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 18 \u00b7 \u23f1\ufe0f 07.03.2024):      <pre><code>git clone https://github.com/Jesperkemist/perovskitedatabase\n</code></pre> 3DSC Database (\ud83e\udd495 \u00b7  \u2b50 15 \u00b7 \ud83d\udca4) - Repo for the paper publishing the superconductor database with 3D crystal structures. <code>Custom</code> <code>superconductors</code> <code>materials-discovery</code>  - [GitHub](https://github.com/aimat-lab/3DSC) (\ud83d\udd00 4 \u00b7 \u23f1\ufe0f 08.01.2024):      <pre><code>git clone https://github.com/aimat-lab/3DSC\n</code></pre> Show 15 hidden projects...  - ATOM3D (\ud83e\udd4819 \u00b7  \u2b50 300 \u00b7 \ud83d\udc80) - ATOM3D: tasks on molecules in three dimensions. <code>MIT</code> <code>biomolecules</code> <code>benchmarking</code> - OpenKIM (\ud83e\udd4810 \u00b7  \u2b50 31 \u00b7 \ud83d\udc80) - The Open Knowledgebase of Interatomic Models (OpenKIM) aims to be an online resource for standardized testing, long-.. <code>LGPL-2.1</code> <code>model-repository</code> <code>knowledge-base</code> <code>pretrained</code> - ANI-1 Dataset (\ud83e\udd498 \u00b7  \u2b50 96 \u00b7 \ud83d\udc80) - A data set of 20 million calculated off-equilibrium conformations for organic molecules. <code>MIT</code> - MoleculeNet Leaderboard (\ud83e\udd498 \u00b7  \u2b50 89 \u00b7 \ud83d\udc80) -  <code>MIT</code> <code>benchmarking</code> - GEOM (\ud83e\udd497 \u00b7  \u2b50 200 \u00b7 \ud83d\udc80) - GEOM: Energy-annotated molecular conformations. <code>Unlicensed</code> <code>drug-discovery</code> - ANI-1x Datasets (\ud83e\udd496 \u00b7  \u2b50 55 \u00b7 \ud83d\udc80) - The ANI-1ccx and ANI-1x data sets, coupled-cluster and density functional theory properties for organic molecules. <code>MIT</code> - COMP6 Benchmark dataset (\ud83e\udd496 \u00b7  \u2b50 39 \u00b7 \ud83d\udc80) - COMP6 Benchmark dataset for ML potentials. <code>MIT</code> - SciGlass (\ud83e\udd495 \u00b7  \u2b50 10 \u00b7 \ud83d\udc80) - The database contains a vast set of data on the properties of glass materials. <code>MIT</code> - GDB-9-Ex9 and ORNL_AISD-Ex (\ud83e\udd495 \u00b7  \u2b50 6 \u00b7 \ud83d\udc80) - Distributed computing workflow for generation and analysis of large scale molecular datasets obtained running multi-.. <code>Unlicensed</code> - linear-regression-benchmarks (\ud83e\udd495 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Data sets used for linear regression benchmarks. <code>MIT</code> <code>benchmarking</code> <code>single-paper</code> - paper-data-redundancy (\ud83e\udd494 \u00b7  \u2b50 8) - Repo for the paper Exploiting redundancy in large materials datasets for efficient machine learning with less data. <code>BSD-3</code> <code>small-data</code> <code>single-paper</code> - Visual Graph Datasets (\ud83e\udd494 \u00b7  \u2b50 2) - Datasets for the training of graph neural networks (GNNs) and subsequent visualization of attributional explanations.. <code>MIT</code> <code>XAI</code> <code>rep-learn</code> - OPTIMADE providers dashboard (\ud83e\udd494 \u00b7  \u2b50 1) - A dashboard of known providers. <code>Unlicensed</code> - nep-data (\ud83e\udd492 \u00b7  \u2b50 13 \u00b7 \ud83d\udc80) - Data related to the NEP machine-learned potential of GPUMD. <code>Unlicensed</code> <code>ML-IAP</code> <code>MD</code> <code>transport-phenomena</code> - tmQM_wB97MV Dataset (\ud83e\udd492 \u00b7  \u2b50 6) - Code for Applying Large Graph Neural Networks to Predict Transition Metal Complex Energies Using the tmQM_wB97MV.. <code>Unlicensed</code> <code>catalysis</code> <code>rep-learn</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#data-structures","title":"Data Structures","text":"<p>Projects that focus on providing data structures used in atomistic machine learning.</p> dpdata (\ud83e\udd4724 \u00b7  \u2b50 200) - A Python package for manipulating atomistic data of software in computational science. <code>LGPL-3.0</code>  - [GitHub](https://github.com/deepmodeling/dpdata) (\ud83d\udc68\u200d\ud83d\udcbb 61 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce6 120 \u00b7 \ud83d\udccb 120 - 28% open \u00b7 \u23f1\ufe0f 20.09.2024):      <pre><code>git clone https://github.com/deepmodeling/dpdata\n</code></pre> - [PyPi](https://pypi.org/project/dpdata) (\ud83d\udce5 43K / month \u00b7 \ud83d\udce6 40 \u00b7 \u23f1\ufe0f 20.09.2024):     <pre><code>pip install dpdata\n</code></pre> - [Conda](https://anaconda.org/deepmodeling/dpdata) (\ud83d\udce5 230 \u00b7 \u23f1\ufe0f 27.09.2023):     <pre><code>conda install -c deepmodeling dpdata\n</code></pre> Metatensor (\ud83e\udd4821 \u00b7  \u2b50 52) - Self-describing sparse tensor data format for atomistic machine learning and beyond. <code>BSD-3</code> <code>Rust</code> <code>C-lang</code> <code>C++</code> <code>Python</code>  - [GitHub](https://github.com/metatensor/metatensor) (\ud83d\udc68\u200d\ud83d\udcbb 22 \u00b7 \ud83d\udd00 15 \u00b7 \ud83d\udce5 28K \u00b7 \ud83d\udce6 11 \u00b7 \ud83d\udccb 210 - 34% open \u00b7 \u23f1\ufe0f 02.10.2024):      <pre><code>git clone https://github.com/lab-cosmo/metatensor\n</code></pre> mp-pyrho (\ud83e\udd4917 \u00b7  \u2b50 36 \u00b7 \ud83d\udca4) - Tools for re-griding volumetric quantum chemistry data for machine-learning purposes. <code>Custom</code> <code>ML-DFT</code>  - [GitHub](https://github.com/materialsproject/pyrho) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 7 \u00b7 \ud83d\udce6 24 \u00b7 \ud83d\udccb 4 - 25% open \u00b7 \u23f1\ufe0f 23.02.2024):      <pre><code>git clone https://github.com/materialsproject/pyrho\n</code></pre> - [PyPi](https://pypi.org/project/mp-pyrho) (\ud83d\udce5 18K / month \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 23.02.2024):     <pre><code>pip install mp-pyrho\n</code></pre> dlpack (\ud83e\udd4915 \u00b7  \u2b50 890) - common in-memory tensor structure. <code>Apache-2</code> <code>C++</code>  - [GitHub](https://github.com/dmlc/dlpack) (\ud83d\udc68\u200d\ud83d\udcbb 24 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udccb 71 - 40% open \u00b7 \u23f1\ufe0f 28.09.2024):      <pre><code>git clone https://github.com/dmlc/dlpack\n</code></pre> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#density-functional-theory-ml-dft","title":"Density functional theory (ML-DFT)","text":"<p>Projects and models that focus on quantities of DFT, such as density functional approximations (ML-DFA), the charge density, density of states, the Hamiltonian, etc.</p> <p>\ud83d\udd17\u00a0IKS-PIML  - Code and generated data for the paper Inverting the Kohn-Sham equations with physics-informed machine learning.. <code>neural-operator</code> <code>pinn</code> <code>datasets</code> <code>single-paper</code></p> JAX-DFT (\ud83e\udd4725 \u00b7  \u2b50 34K) - This library provides basic building blocks that can construct DFT calculations as a differentiable program. <code>Apache-2</code>  - [GitHub](https://github.com/google-research/google-research) (\ud83d\udc68\u200d\ud83d\udcbb 800 \u00b7 \ud83d\udd00 7.8K \u00b7 \ud83d\udccb 1.8K - 81% open \u00b7 \u23f1\ufe0f 03.10.2024):      <pre><code>git clone https://github.com/google-research/google-research\n</code></pre> MALA (\ud83e\udd4717 \u00b7  \u2b50 81) - Materials Learning Algorithms. A framework for machine learning materials properties from first-principles data. <code>BSD-3</code>  - [GitHub](https://github.com/mala-project/mala) (\ud83d\udc68\u200d\ud83d\udcbb 44 \u00b7 \ud83d\udd00 23 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 270 - 15% open \u00b7 \u23f1\ufe0f 04.07.2024):      <pre><code>git clone https://github.com/mala-project/mala\n</code></pre> QHNet (\ud83e\udd4713 \u00b7  \u2b50 500) - Artificial Intelligence Research for Science (AIRS). <code>GPL-3.0</code> <code>rep-learn</code>  - [GitHub](https://github.com/divelab/AIRS) (\ud83d\udc68\u200d\ud83d\udcbb 29 \u00b7 \ud83d\udd00 58 \u00b7 \ud83d\udccb 15 - 6% open \u00b7 \u23f1\ufe0f 03.09.2024):      <pre><code>git clone https://github.com/divelab/AIRS\n</code></pre> SALTED (\ud83e\udd4713 \u00b7  \u2b50 30) - Symmetry-Adapted Learning of Three-dimensional Electron Densities. <code>GPL-3.0</code>  - [GitHub](https://github.com/andreagrisafi/SALTED) (\ud83d\udc68\u200d\ud83d\udcbb 17 \u00b7 \ud83d\udd00 4 \u00b7 \ud83d\udccb 6 - 16% open \u00b7 \u23f1\ufe0f 27.09.2024):      <pre><code>git clone https://github.com/andreagrisafi/SALTED\n</code></pre> DeepH-pack (\ud83e\udd4812 \u00b7  \u2b50 220) - Deep neural networks for density functional theory Hamiltonian. <code>LGPL-3.0</code> <code>Julia</code>  - [GitHub](https://github.com/mzjb/DeepH-pack) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 44 \u00b7 \ud83d\udccb 51 - 25% open \u00b7 \u23f1\ufe0f 22.05.2024):      <pre><code>git clone https://github.com/mzjb/DeepH-pack\n</code></pre> DeePKS-kit (\ud83e\udd4810 \u00b7  \u2b50 100) - a package for developing machine learning-based chemically accurate energy and density functional models. <code>LGPL-3.0</code>  - [GitHub](https://github.com/deepmodeling/deepks-kit) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 35 \u00b7 \ud83d\udccb 19 - 26% open \u00b7 \u23f1\ufe0f 13.04.2024):      <pre><code>git clone https://github.com/deepmodeling/deepks-kit\n</code></pre> Grad DFT (\ud83e\udd4810 \u00b7  \u2b50 74 \u00b7 \ud83d\udca4) - GradDFT is a JAX-based library enabling the differentiable design and experimentation of exchange-correlation.. <code>Apache-2</code>  - [GitHub](https://github.com/XanaduAI/GradDFT) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 6 \u00b7 \ud83d\udccb 54 - 20% open \u00b7 \u23f1\ufe0f 13.02.2024):      <pre><code>git clone https://github.com/XanaduAI/GradDFT\n</code></pre> HamGNN (\ud83e\udd488 \u00b7  \u2b50 55) - An E(3) equivariant Graph Neural Network for predicting electronic Hamiltonian matrix. <code>GPL-3.0</code> <code>rep-learn</code> <code>magnetism</code> <code>C-lang</code>  - [GitHub](https://github.com/QuantumLab-ZY/HamGNN) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 15 \u00b7 \ud83d\udccb 29 - 79% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/QuantumLab-ZY/HamGNN\n</code></pre> ChargE3Net (\ud83e\udd487 \u00b7  \u2b50 29) - Higher-order equivariant neural networks for charge density prediction in materials. <code>MIT</code> <code>rep-learn</code>  - [GitHub](https://github.com/AIforGreatGood/charge3net) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 8 \u00b7 \ud83d\udccb 5 - 40% open \u00b7 \u23f1\ufe0f 15.08.2024):      <pre><code>git clone https://github.com/AIforGreatGood/charge3net\n</code></pre> Q-stack (\ud83e\udd487 \u00b7  \u2b50 14) - Stack of codes for dedicated pre- and post-processing tasks for Quantum Machine Learning (QML). <code>MIT</code> <code>excited-states</code> <code>general-tool</code>  - [GitHub](https://github.com/lcmd-epfl/Q-stack) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 5 \u00b7 \ud83d\udccb 29 - 31% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/lcmd-epfl/Q-stack\n</code></pre> InfGCN for Electron Density Estimation (\ud83e\udd495 \u00b7  \u2b50 11 \u00b7 \ud83d\udca4) - Official implementation of the NeurIPS 23 spotlight paper of InfGCN. <code>MIT</code> <code>rep-learn</code> <code>neural-operator</code>  - [GitHub](https://github.com/ccr-cheng/InfGCN-pytorch) (\ud83d\udd00 3 \u00b7 \u23f1\ufe0f 05.12.2023):      <pre><code>git clone https://github.com/ccr-cheng/infgcn-pytorch\n</code></pre> charge-density-models (\ud83e\udd495 \u00b7  \u2b50 10 \u00b7 \ud83d\udca4) - Tools to build charge density models using [fairchem](https://github.com/FAIR-Chem/fairchem). <code>MIT</code> <code>rep-learn</code>  - [GitHub](https://github.com/ulissigroup/charge-density-models) (\ud83d\udd00 2 \u00b7 \ud83d\udccb 4 - 25% open \u00b7 \u23f1\ufe0f 29.11.2023):      <pre><code>git clone https://github.com/ulissigroup/charge-density-models\n</code></pre> Show 20 hidden projects...  - DM21 (\ud83e\udd4720 \u00b7  \u2b50 13K \u00b7 \ud83d\udc80) - This package provides a PySCF interface to the DM21 (DeepMind 21) family of exchange-correlation functionals described.. <code>Apache-2</code> - NeuralXC (\ud83e\udd4810 \u00b7  \u2b50 33 \u00b7 \ud83d\udc80) - Implementation of a machine learned density functional. <code>BSD-3</code> - PROPhet (\ud83e\udd489 \u00b7  \u2b50 63 \u00b7 \ud83d\udc80) - PROPhet is a code to integrate machine learning techniques with first-principles quantum chemistry approaches. <code>GPL-3.0</code> <code>ML-IAP</code> <code>MD</code> <code>single-paper</code> <code>C++</code> - ACEhamiltonians (\ud83e\udd489 \u00b7  \u2b50 12 \u00b7 \ud83d\udc80) - Provides tools for constructing, fitting, and predicting self-consistent Hamiltonian and overlap matrices in solid-.. <code>MIT</code> <code>Julia</code> - Mat2Spec (\ud83e\udd487 \u00b7  \u2b50 27 \u00b7 \ud83d\udc80) - Density of States Prediction for Materials Discovery via Contrastive Learning from Probabilistic Embeddings. <code>MIT</code> <code>spectroscopy</code> - Libnxc (\ud83e\udd487 \u00b7  \u2b50 16 \u00b7 \ud83d\udc80) - A library for using machine-learned exchange-correlation functionals for density-functional theory. <code>MPL-2.0</code> <code>C++</code> <code>Fortran</code> - DeepH-E3 (\ud83e\udd496 \u00b7  \u2b50 70 \u00b7 \ud83d\udc80) - General framework for E(3)-equivariant neural network representation of density functional theory Hamiltonian. <code>MIT</code> <code>magnetism</code> - DeepDFT (\ud83e\udd496 \u00b7  \u2b50 57 \u00b7 \ud83d\udc80) - Official implementation of DeepDFT model. <code>MIT</code> - KSR-DFT (\ud83e\udd496 \u00b7  \u2b50 4 \u00b7 \ud83d\udc80) - Kohn-Sham regularizer for machine-learned DFT functionals. <code>Apache-2</code> - xDeepH (\ud83e\udd495 \u00b7  \u2b50 32 \u00b7 \ud83d\udc80) - Extended DeepH (xDeepH) method for magnetic materials. <code>LGPL-3.0</code> <code>magnetism</code> <code>Julia</code> - ML-DFT (\ud83e\udd495 \u00b7  \u2b50 23 \u00b7 \ud83d\udc80) - A package for density functional approximation using machine learning. <code>MIT</code> - rho_learn (\ud83e\udd495 \u00b7  \u2b50 4 \u00b7 \ud83d\udc80) - A proof-of-concept workflow for torch-based electron density learning. <code>MIT</code> - gprep (\ud83e\udd494 \u00b7 \ud83d\udc80) - Fitting DFTB repulsive potentials with GPR. <code>MIT</code> <code>single-paper</code> - DeepCDP (\ud83e\udd493 \u00b7  \u2b50 6 \u00b7 \ud83d\udc80) - DeepCDP: Deep learning Charge Density Prediction. <code>Unlicensed</code> - APET (\ud83e\udd493 \u00b7  \u2b50 4 \u00b7 \ud83d\udc80) - Atomic Positional Embedding-based Transformer. <code>GPL-3.0</code> <code>density-of-states</code> <code>transformer</code> - CSNN (\ud83e\udd493 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Primary codebase of CSNN - Concentric Spherical Neural Network for 3D Representation Learning. <code>BSD-3</code> - A3MD (\ud83e\udd492 \u00b7  \u2b50 8 \u00b7 \ud83d\udc80) - MPNN-like + Analytic Density Model = Accurate electron densities. <code>Unlicensed</code> <code>rep-learn</code> <code>single-paper</code> - MALADA (\ud83e\udd492 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - MALA Data Acquisition: Helpful tools to build data for MALA. <code>BSD-3</code> - kdft (\ud83e\udd491 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - The Kernel Density Functional (KDF) code allows generating ML based DFT functionals. <code>Unlicensed</code> - MLDensity ( \u2b50 2 \u00b7 \ud83d\udc80) - Linear Jacobi-Legendre expansion of the charge density for machine learning-accelerated electronic structure.. <code>Unlicensed</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#educational-resources","title":"Educational Resources","text":"<p>Tutorials, guides, cookbooks, recipes, etc.</p> <p>\ud83d\udd17\u00a0AI for Science 101 <code>community-resource</code> <code>rep-learn</code></p> <p>\ud83d\udd17\u00a0AL4MS 2023 workshop tutorials <code>active-learning</code></p> <p>\ud83d\udd17\u00a0Quantum Chemistry in the Age of Machine Learning  - Book, 2022.</p> jarvis-tools-notebooks (\ud83e\udd4712 \u00b7  \u2b50 62) - A Google-Colab Notebook Collection for Materials Design: https://jarvis.nist.gov/. <code>NIST</code>  - [GitHub](https://github.com/JARVIS-Materials-Design/jarvis-tools-notebooks) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 26 \u00b7 \u23f1\ufe0f 14.08.2024):      <pre><code>git clone https://github.com/JARVIS-Materials-Design/jarvis-tools-notebooks\n</code></pre> AI4Chemistry course (\ud83e\udd4810 \u00b7  \u2b50 130) - EPFL AI for chemistry course, Spring 2023. https://schwallergroup.github.io/ai4chem_course. <code>MIT</code> <code>chemistry</code>  - [GitHub](https://github.com/schwallergroup/ai4chem_course) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 31 \u00b7 \ud83d\udccb 4 - 25% open \u00b7 \u23f1\ufe0f 02.05.2024):      <pre><code>git clone https://github.com/schwallergroup/ai4chem_course\n</code></pre> DSECOP (\ud83e\udd489 \u00b7  \u2b50 43) - This repository contains data science educational materials developed by DSECOP Fellows. <code>CCO-1.0</code>  - [GitHub](https://github.com/GDS-Education-Community-of-Practice/DSECOP) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 25 \u00b7 \ud83d\udccb 8 - 12% open \u00b7 \u23f1\ufe0f 26.06.2024):      <pre><code>git clone https://github.com/GDS-Education-Community-of-Practice/DSECOP\n</code></pre> iam-notebooks (\ud83e\udd489 \u00b7  \u2b50 26) - Jupyter notebooks for the lectures of the Introduction to Atomistic Modeling. <code>Apache-2</code>  - [GitHub](https://github.com/ceriottm/iam-notebooks) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 5 \u00b7 \u23f1\ufe0f 26.06.2024):      <pre><code>git clone https://github.com/ceriottm/iam-notebooks\n</code></pre> BestPractices (\ud83e\udd488 \u00b7  \u2b50 170 \u00b7 \ud83d\udca4) - Things that you should (and should not) do in your Materials Informatics research. <code>MIT</code>  - [GitHub](https://github.com/anthony-wang/BestPractices) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 70 \u00b7 \ud83d\udccb 7 - 71% open \u00b7 \u23f1\ufe0f 17.11.2023):      <pre><code>git clone https://github.com/anthony-wang/BestPractices\n</code></pre> COSMO Software Cookbook (\ud83e\udd488 \u00b7  \u2b50 16) - A cookbook wtih recipes for atomic-scale modeling of materials and molecules. <code>BSD-3</code>  - [GitHub](https://github.com/lab-cosmo/atomistic-cookbook) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 1 \u00b7 \ud83d\udccb 12 - 16% open \u00b7 \u23f1\ufe0f 03.10.2024):      <pre><code>git clone https://github.com/lab-cosmo/software-cookbook\n</code></pre> MACE-tutorials (\ud83e\udd496 \u00b7  \u2b50 38) - Another set of tutorials for the MACE interatomic potential by one of the authors. <code>MIT</code> <code>ML-IAP</code> <code>rep-learn</code> <code>MD</code>  - [GitHub](https://github.com/ilyes319/mace-tutorials) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 10 \u00b7 \u23f1\ufe0f 16.07.2024):      <pre><code>git clone https://github.com/ilyes319/mace-tutorials\n</code></pre> Show 18 hidden projects...  - Geometric GNN Dojo (\ud83e\udd4712 \u00b7  \u2b50 460 \u00b7 \ud83d\udc80) - New to geometric GNNs: try our practical notebook, prepared for MPhil students at the University of Cambridge. <code>MIT</code> <code>rep-learn</code> - DeepLearningLifeSciences (\ud83e\udd4712 \u00b7  \u2b50 350 \u00b7 \ud83d\udc80) - Example code from the book Deep Learning for the Life Sciences. <code>MIT</code> - Deep Learning for Molecules and Materials Book (\ud83e\udd4811 \u00b7  \u2b50 610 \u00b7 \ud83d\udc80) - Deep learning for molecules and materials book. <code>Custom</code> - OPTIMADE Tutorial Exercises (\ud83e\udd489 \u00b7  \u2b50 15 \u00b7 \ud83d\udc80) - Tutorial exercises for the OPTIMADE API. <code>MIT</code> <code>datasets</code> - RDKit Tutorials (\ud83e\udd488 \u00b7  \u2b50 260 \u00b7 \ud83d\udc80) - Tutorials to learn how to work with the RDKit. <code>Custom</code> - MAChINE (\ud83e\udd497 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Client-Server Web App to introduce usage of ML in materials science to beginners. <code>MIT</code> - Applied AI for Materials (\ud83e\udd496 \u00b7  \u2b50 58 \u00b7 \ud83d\udc80) - Course materials for Applied AI for Materials Science and Engineering. <code>Unlicensed</code> - ML for catalysis tutorials (\ud83e\udd496 \u00b7  \u2b50 8 \u00b7 \ud83d\udc80) - A jupyter book repo for tutorial on how to use OCP ML models for catalysis. <code>MIT</code> - AI4Science101 (\ud83e\udd495 \u00b7  \u2b50 83 \u00b7 \ud83d\udc80) - AI for Science. <code>Unlicensed</code> - Machine Learning for Materials Hard and Soft (\ud83e\udd495 \u00b7  \u2b50 34 \u00b7 \ud83d\udc80) - ESI-DCAFM-TACO-VDSP Summer School on Machine Learning for Materials Hard and Soft. <code>Unlicensed</code> - Data Handling, DoE and Statistical Analysis for Material Chemists (\ud83e\udd495 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Notebooks for workshops of DoE course, hosted by the Computational Materials Chemistry group at Uppsala University. <code>GPL-3.0</code> - ML-in-chemistry-101 (\ud83e\udd494 \u00b7  \u2b50 68 \u00b7 \ud83d\udc80) - The course materials for Machine Learning in Chemistry 101. <code>Unlicensed</code> - chemrev-gpr (\ud83e\udd494 \u00b7  \u2b50 6 \u00b7 \ud83d\udc80) - Notebooks accompanying the paper on GPR in materials and molecules in Chemical Reviews 2020. <code>Unlicensed</code> - AI4ChemMat Hands-On Series (\ud83e\udd494 \u00b7  \u2b50 1) - Hands-On Series organized by Chemistry and Materials working group at Argonne Nat Lab. <code>MPL-2.0</code> - PiNN Lab (\ud83e\udd493 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Material for running a lab session on atomic neural networks. <code>GPL-3.0</code> - MLDensity_tutorial (\ud83e\udd492 \u00b7  \u2b50 9 \u00b7 \ud83d\udc80) - Tutorial files to work with ML for the charge density in molecules and solids. <code>Unlicensed</code> - LAMMPS-style pair potentials with GAP (\ud83e\udd492 \u00b7  \u2b50 4 \u00b7 \ud83d\udc80) - A tutorial on how to create LAMMPS-style pair potentials and use them in combination with GAP potentials to run MD.. <code>Unlicensed</code> <code>ML-IAP</code> <code>MD</code> <code>rep-eng</code> - MALA Tutorial (\ud83e\udd492 \u00b7  \u2b50 2 \u00b7 \ud83d\udca4) - A full MALA hands-on tutorial. <code>Unlicensed</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#explainable-artificial-intelligence-xai","title":"Explainable Artificial intelligence (XAI)","text":"<p>Projects that focus on explainability and model interpretability in atomistic ML.</p> exmol (\ud83e\udd4718 \u00b7  \u2b50 280 \u00b7 \ud83d\udca4) - Explainer for black box models that predict molecule properties. <code>MIT</code>  - [GitHub](https://github.com/ur-whitelab/exmol) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 40 \u00b7 \ud83d\udce6 20 \u00b7 \ud83d\udccb 69 - 15% open \u00b7 \u23f1\ufe0f 04.12.2023):      <pre><code>git clone https://github.com/ur-whitelab/exmol\n</code></pre> - [PyPi](https://pypi.org/project/exmol) (\ud83d\udce5 1K / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 03.06.2022):     <pre><code>pip install exmol\n</code></pre> MEGAN: Multi Explanation Graph Attention Student (\ud83e\udd495 \u00b7  \u2b50 5) - Minimal implementation of graph attention student model architecture. <code>MIT</code> <code>rep-learn</code>  - [GitHub](https://github.com/aimat-lab/graph_attention_student) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 1 \u00b7 \ud83d\udccb 3 - 33% open \u00b7 \u23f1\ufe0f 19.08.2024):      <pre><code>git clone https://github.com/aimat-lab/graph_attention_student\n</code></pre> Show 1 hidden projects...  - Linear vs blackbox (\ud83e\udd493 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Code and data related to the publication: Interpretable models for extrapolation in scientific machine learning. <code>MIT</code> <code>XAI</code> <code>single-paper</code> <code>rep-eng</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#electronic-structure-methods-ml-esm","title":"Electronic structure methods (ML-ESM)","text":"<p>Projects and models that focus on quantities of electronic structure methods, which do not fit into either of the categories ML-WFT or ML-DFT.</p> Show 5 hidden projects...  - QDF for molecule (\ud83e\udd478 \u00b7  \u2b50 200 \u00b7 \ud83d\udc80) - Quantum deep field: data-driven wave function, electron density generation, and energy prediction and extrapolation.. <code>MIT</code> - QMLearn (\ud83e\udd485 \u00b7  \u2b50 11 \u00b7 \ud83d\udc80) - Quantum Machine Learning by learning one-body reduced density matrices in the AO basis... <code>MIT</code> - q-pac (\ud83e\udd485 \u00b7  \u2b50 4 \u00b7 \ud83d\udc80) - Kernel charge equilibration method. <code>MIT</code> <code>electrostatics</code> - halex (\ud83e\udd485 \u00b7  \u2b50 3 \u00b7 \ud83d\udca4) - Hamiltonian Learning for Excited States https://doi.org/10.48550/arXiv.2311.00844. <code>Unlicensed</code> <code>excited-states</code> - e3psi (\ud83e\udd493 \u00b7  \u2b50 3 \u00b7 \ud83d\udca4) - Equivariant machine learning library for learning from electronic structures. <code>LGPL-3.0</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#general-tools","title":"General Tools","text":"<p>General tools for atomistic machine learning.</p> RDKit (\ud83e\udd4735 \u00b7  \u2b50 2.6K) -  <code>BSD-3</code> <code>C++</code>  - [GitHub](https://github.com/rdkit/rdkit) (\ud83d\udc68\u200d\ud83d\udcbb 230 \u00b7 \ud83d\udd00 860 \u00b7 \ud83d\udce5 1.1K \u00b7 \ud83d\udce6 3 \u00b7 \ud83d\udccb 3.4K - 29% open \u00b7 \u23f1\ufe0f 03.10.2024):      <pre><code>git clone https://github.com/rdkit/rdkit\n</code></pre> - [PyPi](https://pypi.org/project/rdkit) (\ud83d\udce5 2.4M / month \u00b7 \ud83d\udce6 730 \u00b7 \u23f1\ufe0f 07.08.2024):     <pre><code>pip install rdkit\n</code></pre> - [Conda](https://anaconda.org/rdkit/rdkit) (\ud83d\udce5 2.6M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c rdkit rdkit\n</code></pre> DeepChem (\ud83e\udd4734 \u00b7  \u2b50 5.4K \u00b7 \ud83d\udcc9) - Democratizing Deep-Learning for Drug Discovery, Quantum Chemistry, Materials Science and Biology. <code>MIT</code>  - [GitHub](https://github.com/deepchem/deepchem) (\ud83d\udc68\u200d\ud83d\udcbb 250 \u00b7 \ud83d\udd00 1.7K \u00b7 \ud83d\udce6 430 \u00b7 \ud83d\udccb 1.9K - 33% open \u00b7 \u23f1\ufe0f 20.09.2024):      <pre><code>git clone https://github.com/deepchem/deepchem\n</code></pre> - [PyPi](https://pypi.org/project/deepchem) (\ud83d\udce5 44K / month \u00b7 \ud83d\udce6 13 \u00b7 \u23f1\ufe0f 20.09.2024):     <pre><code>pip install deepchem\n</code></pre> - [Conda](https://anaconda.org/conda-forge/deepchem) (\ud83d\udce5 110K \u00b7 \u23f1\ufe0f 05.04.2024):     <pre><code>conda install -c conda-forge deepchem\n</code></pre> - [Docker Hub](https://hub.docker.com/r/deepchemio/deepchem) (\ud83d\udce5 7.7K \u00b7 \u2b50 5 \u00b7 \u23f1\ufe0f 20.09.2024):     <pre><code>docker pull deepchemio/deepchem\n</code></pre> Matminer (\ud83e\udd4728 \u00b7  \u2b50 470) - Data mining for materials science. <code>Custom</code>  - [GitHub](https://github.com/hackingmaterials/matminer) (\ud83d\udc68\u200d\ud83d\udcbb 55 \u00b7 \ud83d\udd00 190 \u00b7 \ud83d\udce6 320 \u00b7 \ud83d\udccb 230 - 12% open \u00b7 \u23f1\ufe0f 02.10.2024):      <pre><code>git clone https://github.com/hackingmaterials/matminer\n</code></pre> - [PyPi](https://pypi.org/project/matminer) (\ud83d\udce5 14K / month \u00b7 \ud83d\udce6 58 \u00b7 \u23f1\ufe0f 27.03.2024):     <pre><code>pip install matminer\n</code></pre> - [Conda](https://anaconda.org/conda-forge/matminer) (\ud83d\udce5 71K \u00b7 \u23f1\ufe0f 28.03.2024):     <pre><code>conda install -c conda-forge matminer\n</code></pre> QUIP (\ud83e\udd4827 \u00b7  \u2b50 350 \u00b7 \ud83d\udcc8) - libAtoms/QUIP molecular dynamics framework: https://libatoms.github.io. <code>GPL-2.0</code> <code>MD</code> <code>ML-IAP</code> <code>rep-eng</code> <code>Fortran</code>  - [GitHub](https://github.com/libAtoms/QUIP) (\ud83d\udc68\u200d\ud83d\udcbb 85 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce5 670 \u00b7 \ud83d\udce6 42 \u00b7 \ud83d\udccb 470 - 22% open \u00b7 \u23f1\ufe0f 27.09.2024):      <pre><code>git clone https://github.com/libAtoms/QUIP\n</code></pre> - [PyPi](https://pypi.org/project/quippy-ase) (\ud83d\udce5 9.5K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 15.01.2023):     <pre><code>pip install quippy-ase\n</code></pre> - [Docker Hub](https://hub.docker.com/r/libatomsquip/quip) (\ud83d\udce5 10K \u00b7 \u2b50 4 \u00b7 \u23f1\ufe0f 24.04.2023):     <pre><code>docker pull libatomsquip/quip\n</code></pre> MAML (\ud83e\udd4824 \u00b7  \u2b50 360) - Python for Materials Machine Learning, Materials Descriptors, Machine Learning Force Fields, Deep Learning, etc. <code>BSD-3</code>  - [GitHub](https://github.com/materialsvirtuallab/maml) (\ud83d\udc68\u200d\ud83d\udcbb 33 \u00b7 \ud83d\udd00 78 \u00b7 \ud83d\udce6 10 \u00b7 \ud83d\udccb 71 - 12% open \u00b7 \u23f1\ufe0f 18.09.2024):      <pre><code>git clone https://github.com/materialsvirtuallab/maml\n</code></pre> - [PyPi](https://pypi.org/project/maml) (\ud83d\udce5 520 / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 13.06.2024):     <pre><code>pip install maml\n</code></pre> JARVIS-Tools (\ud83e\udd4823 \u00b7  \u2b50 300) - JARVIS-Tools: an open-source software package for data-driven atomistic materials design. Publications:.. <code>Custom</code>  - [GitHub](https://github.com/usnistgov/jarvis) (\ud83d\udc68\u200d\ud83d\udcbb 15 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce6 99 \u00b7 \ud83d\udccb 90 - 50% open \u00b7 \u23f1\ufe0f 07.09.2024):      <pre><code>git clone https://github.com/usnistgov/jarvis\n</code></pre> - [PyPi](https://pypi.org/project/jarvis-tools) (\ud83d\udce5 20K / month \u00b7 \ud83d\udce6 31 \u00b7 \u23f1\ufe0f 07.09.2024):     <pre><code>pip install jarvis-tools\n</code></pre> - [Conda](https://anaconda.org/conda-forge/jarvis-tools) (\ud83d\udce5 78K \u00b7 \u23f1\ufe0f 07.09.2024):     <pre><code>conda install -c conda-forge jarvis-tools\n</code></pre> MAST-ML (\ud83e\udd4820 \u00b7  \u2b50 100 \u00b7 \ud83d\udcc8) - MAterials Simulation Toolkit for Machine Learning (MAST-ML). <code>MIT</code>  - [GitHub](https://github.com/uw-cmg/MAST-ML) (\ud83d\udc68\u200d\ud83d\udcbb 19 \u00b7 \ud83d\udd00 58 \u00b7 \ud83d\udce5 120 \u00b7 \ud83d\udce6 43 \u00b7 \ud83d\udccb 220 - 14% open \u00b7 \u23f1\ufe0f 27.09.2024):      <pre><code>git clone https://github.com/uw-cmg/MAST-ML\n</code></pre> Scikit-Matter (\ud83e\udd4818 \u00b7  \u2b50 76) - A collection of scikit-learn compatible utilities that implement methods born out of the materials science and.. <code>BSD-3</code> <code>scikit-learn</code>  - [GitHub](https://github.com/scikit-learn-contrib/scikit-matter) (\ud83d\udc68\u200d\ud83d\udcbb 15 \u00b7 \ud83d\udd00 20 \u00b7 \ud83d\udce6 10 \u00b7 \ud83d\udccb 70 - 20% open \u00b7 \u23f1\ufe0f 06.08.2024):      <pre><code>git clone https://github.com/scikit-learn-contrib/scikit-matter\n</code></pre> - [PyPi](https://pypi.org/project/skmatter) (\ud83d\udce5 2.2K / month \u00b7 \u23f1\ufe0f 24.08.2023):     <pre><code>pip install skmatter\n</code></pre> - [Conda](https://anaconda.org/conda-forge/skmatter) (\ud83d\udce5 2.2K \u00b7 \u23f1\ufe0f 24.08.2023):     <pre><code>conda install -c conda-forge skmatter\n</code></pre> MLatom (\ud83e\udd4816 \u00b7  \u2b50 48) - AI-enhanced computational chemistry. <code>MIT</code> <code>UIP</code> <code>ML-IAP</code> <code>MD</code> <code>ML-DFT</code> <code>ML-ESM</code> <code>transfer-learning</code> <code>active-learning</code> <code>spectroscopy</code> <code>structure-optimization</code>  - [GitHub](https://github.com/dralgroup/mlatom) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 9 \u00b7 \ud83d\udccb 4 - 25% open \u00b7 \u23f1\ufe0f 23.09.2024):      <pre><code>git clone https://github.com/dralgroup/mlatom\n</code></pre> - [PyPi](https://pypi.org/project/mlatom) (\ud83d\udce5 1.6K / month \u00b7 \u23f1\ufe0f 23.09.2024):     <pre><code>pip install mlatom\n</code></pre> XenonPy (\ud83e\udd4915 \u00b7  \u2b50 140) - XenonPy is a Python Software for Materials Informatics. <code>BSD-3</code>  - [GitHub](https://github.com/yoshida-lab/XenonPy) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 57 \u00b7 \ud83d\udce5 1.4K \u00b7 \ud83d\udccb 87 - 24% open \u00b7 \u23f1\ufe0f 21.04.2024):      <pre><code>git clone https://github.com/yoshida-lab/XenonPy\n</code></pre> - [PyPi](https://pypi.org/project/xenonpy) (\ud83d\udce5 670 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 31.10.2022):     <pre><code>pip install xenonpy\n</code></pre> Artificial Intelligence for Science (AIRS) (\ud83e\udd4913 \u00b7  \u2b50 500) - Artificial Intelligence Research for Science (AIRS). <code>GPL-3.0 license</code> <code>rep-learn</code> <code>generative</code> <code>ML-IAP</code> <code>MD</code> <code>ML-DFT</code> <code>ML-WFT</code> <code>biomolecules</code>  - [GitHub](https://github.com/divelab/AIRS) (\ud83d\udc68\u200d\ud83d\udcbb 29 \u00b7 \ud83d\udd00 58 \u00b7 \ud83d\udccb 15 - 6% open \u00b7 \u23f1\ufe0f 03.09.2024):      <pre><code>git clone https://github.com/divelab/AIRS\n</code></pre> Equisolve (\ud83e\udd496 \u00b7  \u2b50 5 \u00b7 \ud83d\udca4) - A ML toolkit package utilizing the metatensor data format to build models for the prediction of equivariant properties.. <code>BSD-3</code> <code>ML-IAP</code>  - [GitHub](https://github.com/lab-cosmo/equisolve) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 1 \u00b7 \ud83d\udccb 23 - 82% open \u00b7 \u23f1\ufe0f 27.10.2023):      <pre><code>git clone https://github.com/lab-cosmo/equisolve\n</code></pre> Show 10 hidden projects...  - QML (\ud83e\udd4816 \u00b7  \u2b50 200 \u00b7 \ud83d\udc80) - QML: Quantum Machine Learning. <code>MIT</code> - Automatminer (\ud83e\udd4915 \u00b7  \u2b50 140 \u00b7 \ud83d\udc80) - An automatic engine for predicting materials properties. <code>Custom</code> <code>autoML</code> - AMPtorch (\ud83e\udd4911 \u00b7  \u2b50 59 \u00b7 \ud83d\udc80) - AMPtorch: Atomistic Machine Learning Package (AMP) - PyTorch. <code>GPL-3.0</code> - OpenChem (\ud83e\udd4910 \u00b7  \u2b50 670 \u00b7 \ud83d\udc80) - OpenChem: Deep Learning toolkit for Computational Chemistry and Drug Design Research. <code>MIT</code> - JAXChem (\ud83e\udd497 \u00b7  \u2b50 79 \u00b7 \ud83d\udc80) - JAXChem is a JAX-based deep learning library for complex and versatile chemical modeling. <code>MIT</code> - uncertainty_benchmarking (\ud83e\udd497 \u00b7  \u2b50 39 \u00b7 \ud83d\udc80) - Various code/notebooks to benchmark different ways we could estimate uncertainty in ML predictions. <code>Unlicensed</code> <code>benchmarking</code> <code>probabilistic</code> - torchchem (\ud83e\udd497 \u00b7  \u2b50 35 \u00b7 \ud83d\udc80) - An experimental repo for experimenting with PyTorch models. <code>MIT</code> - ACEatoms (\ud83e\udd494 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Generic code for modelling atomic properties using ACE. <code>Custom</code> <code>Julia</code> - Magpie (\ud83e\udd493) - Materials Agnostic Platform for Informatics and Exploration (Magpie). <code>MIT</code> <code>Java</code> - quantum-structure-ml (\ud83e\udd492 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Multi-class classification model for predicting the magnetic order of magnetic structures and a binary classification.. <code>Unlicensed</code> <code>magnetism</code> <code>benchmarking</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#generative-models","title":"Generative Models","text":"<p>Projects that implement generative models for atomistic ML.</p> GT4SD (\ud83e\udd4718 \u00b7  \u2b50 340) - GT4SD, an open-source library to accelerate hypothesis generation in the scientific discovery process. <code>MIT</code> <code>pretrained</code> <code>drug-discovery</code> <code>rep-learn</code>  - [GitHub](https://github.com/GT4SD/gt4sd-core) (\ud83d\udc68\u200d\ud83d\udcbb 20 \u00b7 \ud83d\udd00 68 \u00b7 \ud83d\udccb 110 - 12% open \u00b7 \u23f1\ufe0f 12.09.2024):      <pre><code>git clone https://github.com/GT4SD/gt4sd-core\n</code></pre> - [PyPi](https://pypi.org/project/gt4sd) (\ud83d\udce5 2.1K / month \u00b7 \u23f1\ufe0f 12.09.2024):     <pre><code>pip install gt4sd\n</code></pre> MoLeR (\ud83e\udd4715 \u00b7  \u2b50 260 \u00b7 \ud83d\udca4) - Implementation of MoLeR: a generative model of molecular graphs which supports scaffold-constrained generation. <code>MIT</code>  - [GitHub](https://github.com/microsoft/molecule-generation) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 42 \u00b7 \ud83d\udccb 39 - 23% open \u00b7 \u23f1\ufe0f 03.01.2024):      <pre><code>git clone https://github.com/microsoft/molecule-generation\n</code></pre> - [PyPi](https://pypi.org/project/molecule-generation) (\ud83d\udce5 320 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 05.01.2024):     <pre><code>pip install molecule-generation\n</code></pre> PMTransformer (\ud83e\udd4715 \u00b7  \u2b50 85) - Universal Transfer Learning in Porous Materials, including MOFs. <code>MIT</code> <code>transfer-learning</code> <code>pretrained</code> <code>transformer</code>  - [GitHub](https://github.com/hspark1212/MOFTransformer) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 12 \u00b7 \ud83d\udce6 6 \u00b7 \u23f1\ufe0f 20.06.2024):      <pre><code>git clone https://github.com/hspark1212/MOFTransformer\n</code></pre> - [PyPi](https://pypi.org/project/moftransformer) (\ud83d\udce5 440 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 20.06.2024):     <pre><code>pip install moftransformer\n</code></pre> SchNetPack G-SchNet (\ud83e\udd4812 \u00b7  \u2b50 46 \u00b7 \ud83d\udcc9) - G-SchNet extension for SchNetPack. <code>MIT</code>  - [GitHub](https://github.com/atomistic-machine-learning/schnetpack-gschnet) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 8 \u00b7 \u23f1\ufe0f 05.09.2024):      <pre><code>git clone https://github.com/atomistic-machine-learning/schnetpack-gschnet\n</code></pre> SiMGen (\ud83e\udd489 \u00b7  \u2b50 12 \u00b7 \ud83d\udca4) - Zero Shot Molecular Generation via Similarity Kernels. <code>MIT</code> <code>viz</code>  - [GitHub](https://github.com/RokasEl/simgen) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 2 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 4 - 25% open \u00b7 \u23f1\ufe0f 15.02.2024):      <pre><code>git clone https://github.com/RokasEl/simgen\n</code></pre> - [PyPi](https://pypi.org/project/simgen) (\ud83d\udce5 47 / month \u00b7 \u23f1\ufe0f 14.02.2024):     <pre><code>pip install simgen\n</code></pre> COATI (\ud83e\udd495 \u00b7  \u2b50 98 \u00b7 \ud83d\udca4) - COATI: multi-modal contrastive pre-training for representing and traversing chemical space. <code>Apache-2</code> <code>drug-discovery</code> <code>multimodal</code> <code>pretrained</code> <code>rep-learn</code>  - [GitHub](https://github.com/terraytherapeutics/COATI) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 5 \u00b7 \ud83d\udccb 3 - 33% open \u00b7 \u23f1\ufe0f 23.03.2024):      <pre><code>git clone https://github.com/terraytherapeutics/COATI\n</code></pre> Show 8 hidden projects...  - synspace (\ud83e\udd4813 \u00b7  \u2b50 35 \u00b7 \ud83d\udc80) - Synthesis generative model. <code>MIT</code> - EDM (\ud83e\udd489 \u00b7  \u2b50 430 \u00b7 \ud83d\udc80) - E(3) Equivariant Diffusion Model for Molecule Generation in 3D. <code>MIT</code> - G-SchNet (\ud83e\udd498 \u00b7  \u2b50 130 \u00b7 \ud83d\udc80) - G-SchNet - a generative model for 3d molecular structures. <code>MIT</code> - bVAE-IM (\ud83e\udd498 \u00b7  \u2b50 11 \u00b7 \ud83d\udc80) - Implementation of Chemical Design with GPU-based Ising Machine. <code>MIT</code> <code>QML</code> <code>single-paper</code> - cG-SchNet (\ud83e\udd497 \u00b7  \u2b50 52 \u00b7 \ud83d\udc80) - cG-SchNet - a conditional generative neural network for 3d molecular structures. <code>MIT</code> - rxngenerator (\ud83e\udd496 \u00b7  \u2b50 11 \u00b7 \ud83d\udc80) - A generative model for molecular generation via multi-step chemical reactions. <code>MIT</code> - MolSLEPA (\ud83e\udd495 \u00b7  \u2b50 5 \u00b7 \ud83d\udc80) - Interpretable Fragment-based Molecule Design with Self-learning Entropic Population Annealing. <code>MIT</code> <code>XAI</code> - Mapping out phase diagrams with generative classifiers (\ud83e\udd494 \u00b7  \u2b50 7 \u00b7 \ud83d\udc80) - Repository for our ``Mapping out phase diagrams with generative models paper. <code>MIT</code> <code>phase-transition</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#interatomic-potentials-ml-iap","title":"Interatomic Potentials (ML-IAP)","text":"<p>Machine learning interatomic potentials (aka ML-IAP, MLIAP, MLIP, MLP) and force fields (ML-FF) for molecular dynamics.</p> DeePMD-kit (\ud83e\udd4725 \u00b7  \u2b50 1.5K \u00b7 \ud83d\udcc9) - A deep learning package for many-body potential energy representation and molecular dynamics. <code>LGPL-3.0</code> <code>C++</code>  - [GitHub](https://github.com/deepmodeling/deepmd-kit) (\ud83d\udc68\u200d\ud83d\udcbb 69 \u00b7 \ud83d\udd00 500 \u00b7 \ud83d\udce5 40K \u00b7 \ud83d\udce6 16 \u00b7 \ud83d\udccb 790 - 12% open \u00b7 \u23f1\ufe0f 17.09.2024):      <pre><code>git clone https://github.com/deepmodeling/deepmd-kit\n</code></pre> - [PyPi](https://pypi.org/project/deepmd-kit) (\ud83d\udce5 3.2K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 25.09.2024):     <pre><code>pip install deepmd-kit\n</code></pre> - [Conda](https://anaconda.org/deepmodeling/deepmd-kit) (\ud83d\udce5 1.3K \u00b7 \u23f1\ufe0f 06.04.2024):     <pre><code>conda install -c deepmodeling deepmd-kit\n</code></pre> - [Docker Hub](https://hub.docker.com/r/deepmodeling/deepmd-kit) (\ud83d\udce5 2.9K \u00b7 \u2b50 1 \u00b7 \u23f1\ufe0f 27.07.2024):     <pre><code>docker pull deepmodeling/deepmd-kit\n</code></pre> TorchANI (\ud83e\udd4724 \u00b7  \u2b50 460 \u00b7 \ud83d\udca4) - Accurate Neural Network Potential on PyTorch. <code>MIT</code>  - [GitHub](https://github.com/aiqm/torchani) (\ud83d\udc68\u200d\ud83d\udcbb 19 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce6 42 \u00b7 \ud83d\udccb 170 - 13% open \u00b7 \u23f1\ufe0f 14.11.2023):      <pre><code>git clone https://github.com/aiqm/torchani\n</code></pre> - [PyPi](https://pypi.org/project/torchani) (\ud83d\udce5 3K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 14.11.2023):     <pre><code>pip install torchani\n</code></pre> - [Conda](https://anaconda.org/conda-forge/torchani) (\ud83d\udce5 490K \u00b7 \u23f1\ufe0f 11.09.2024):     <pre><code>conda install -c conda-forge torchani\n</code></pre> NequIP (\ud83e\udd4723 \u00b7  \u2b50 610 \u00b7 \ud83d\udcc9) - NequIP is a code for building E(3)-equivariant interatomic potentials. <code>MIT</code>  - [GitHub](https://github.com/mir-group/nequip) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce6 25 \u00b7 \ud83d\udccb 92 - 28% open \u00b7 \u23f1\ufe0f 09.07.2024):      <pre><code>git clone https://github.com/mir-group/nequip\n</code></pre> - [PyPi](https://pypi.org/project/nequip) (\ud83d\udce5 3K / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 09.07.2024):     <pre><code>pip install nequip\n</code></pre> - [Conda](https://anaconda.org/conda-forge/nequip) (\ud83d\udce5 6K \u00b7 \u23f1\ufe0f 10.07.2024):     <pre><code>conda install -c conda-forge nequip\n</code></pre> MACE (\ud83e\udd4722 \u00b7  \u2b50 490) - MACE - Fast and accurate machine learning interatomic potentials with higher order equivariant message passing. <code>MIT</code>  - [GitHub](https://github.com/ACEsuit/mace) (\ud83d\udc68\u200d\ud83d\udcbb 41 \u00b7 \ud83d\udd00 180 \u00b7 \ud83d\udccb 280 - 25% open \u00b7 \u23f1\ufe0f 02.10.2024):      <pre><code>git clone https://github.com/ACEsuit/mace\n</code></pre> TorchMD-NET (\ud83e\udd4722 \u00b7  \u2b50 320) - Training neural network potentials. <code>MIT</code> <code>MD</code> <code>rep-learn</code> <code>transformer</code> <code>pretrained</code>  - [GitHub](https://github.com/torchmd/torchmd-net) (\ud83d\udc68\u200d\ud83d\udcbb 16 \u00b7 \ud83d\udd00 71 \u00b7 \ud83d\udccb 120 - 28% open \u00b7 \u23f1\ufe0f 28.08.2024):      <pre><code>git clone https://github.com/torchmd/torchmd-net\n</code></pre> - [Conda](https://anaconda.org/conda-forge/torchmd-net) (\ud83d\udce5 180K \u00b7 \u23f1\ufe0f 12.09.2024):     <pre><code>conda install -c conda-forge torchmd-net\n</code></pre> GPUMD (\ud83e\udd4721 \u00b7  \u2b50 450) - GPUMD is a highly efficient general-purpose molecular dynamic (MD) package and enables machine-learned potentials.. <code>GPL-3.0</code> <code>MD</code> <code>C++</code> <code>electrostatics</code>  - [GitHub](https://github.com/brucefan1983/GPUMD) (\ud83d\udc68\u200d\ud83d\udcbb 34 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udccb 180 - 9% open \u00b7 \u23f1\ufe0f 01.10.2024):      <pre><code>git clone https://github.com/brucefan1983/GPUMD\n</code></pre> DP-GEN (\ud83e\udd4721 \u00b7  \u2b50 300) - The deep potential generator to generate a deep-learning based model of interatomic potential energy and force field. <code>LGPL-3.0</code> <code>workflows</code>  - [GitHub](https://github.com/deepmodeling/dpgen) (\ud83d\udc68\u200d\ud83d\udcbb 64 \u00b7 \ud83d\udd00 170 \u00b7 \ud83d\udce5 1.8K \u00b7 \ud83d\udce6 6 \u00b7 \ud83d\udccb 300 - 11% open \u00b7 \u23f1\ufe0f 10.04.2024):      <pre><code>git clone https://github.com/deepmodeling/dpgen\n</code></pre> - [PyPi](https://pypi.org/project/dpgen) (\ud83d\udce5 760 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 10.04.2024):     <pre><code>pip install dpgen\n</code></pre> - [Conda](https://anaconda.org/deepmodeling/dpgen) (\ud83d\udce5 210 \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c deepmodeling dpgen\n</code></pre> fairchem (\ud83e\udd4819 \u00b7  \u2b50 770) - FAIR Chemistrys library of machine learning methods for chemistry. Formerly known as Open Catalyst Project (ocp). <code>Unlicensed</code> <code>pretrained</code> <code>rep-learn</code> <code>catalysis</code>  - [GitHub](https://github.com/FAIR-Chem/fairchem) (\ud83d\udc68\u200d\ud83d\udcbb 42 \u00b7 \ud83d\udd00 230 \u00b7 \ud83d\udccb 210 - 6% open \u00b7 \u23f1\ufe0f 01.10.2024):      <pre><code>git clone https://github.com/FAIR-Chem/fairchem\n</code></pre> apax (\ud83e\udd4818 \u00b7  \u2b50 15) - A flexible and performant framework for training machine learning potentials. <code>MIT</code>  - [GitHub](https://github.com/apax-hub/apax) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 2 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 120 - 10% open \u00b7 \u23f1\ufe0f 01.10.2024):      <pre><code>git clone https://github.com/apax-hub/apax\n</code></pre> - [PyPi](https://pypi.org/project/apax) (\ud83d\udce5 280 / month \u00b7 \u23f1\ufe0f 17.09.2024):     <pre><code>pip install apax\n</code></pre> Neural Force Field (\ud83e\udd4817 \u00b7  \u2b50 230) - Neural Network Force Field based on PyTorch. <code>MIT</code> <code>pretrained</code>  - [GitHub](https://github.com/learningmatter-mit/NeuralForceField) (\ud83d\udc68\u200d\ud83d\udcbb 41 \u00b7 \ud83d\udd00 48 \u00b7 \ud83d\udccb 20 - 10% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/learningmatter-mit/NeuralForceField\n</code></pre> PyXtalFF (\ud83e\udd4815 \u00b7  \u2b50 85 \u00b7 \ud83d\udca4) - Machine Learning Interatomic Potential Predictions. <code>MIT</code>  - [GitHub](https://github.com/MaterSim/PyXtal_FF) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 23 \u00b7 \ud83d\udccb 63 - 19% open \u00b7 \u23f1\ufe0f 07.01.2024):      <pre><code>git clone https://github.com/MaterSim/PyXtal_FF\n</code></pre> - [PyPi](https://pypi.org/project/pyxtal_ff) (\ud83d\udce5 230 / month \u00b7 \u23f1\ufe0f 21.12.2022):     <pre><code>pip install pyxtal_ff\n</code></pre> Ultra-Fast Force Fields (UF3) (\ud83e\udd4815 \u00b7  \u2b50 60) - UF3: a python library for generating ultra-fast interatomic potentials. <code>Apache-2</code>  - [GitHub](https://github.com/uf3/uf3) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 20 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 50 - 38% open \u00b7 \u23f1\ufe0f 02.10.2024):      <pre><code>git clone https://github.com/uf3/uf3\n</code></pre> - [PyPi](https://pypi.org/project/uf3) (\ud83d\udce5 51 / month \u00b7 \u23f1\ufe0f 27.10.2023):     <pre><code>pip install uf3\n</code></pre> wfl (\ud83e\udd4815 \u00b7  \u2b50 31) - Workflow is a Python toolkit for building interatomic potential creation and atomistic simulation workflows. <code>GPL-2.0</code> <code>workflows</code> <code>HTC</code>  - [GitHub](https://github.com/libAtoms/workflow) (\ud83d\udc68\u200d\ud83d\udcbb 19 \u00b7 \ud83d\udd00 18 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 160 - 42% open \u00b7 \u23f1\ufe0f 03.09.2024):      <pre><code>git clone https://github.com/libAtoms/workflow\n</code></pre> So3krates (MLFF) (\ud83e\udd4814 \u00b7  \u2b50 79) - Build neural networks for machine learning force fields with JAX. <code>MIT</code>  - [GitHub](https://github.com/thorben-frank/mlff) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 15 \u00b7 \ud83d\udccb 9 - 33% open \u00b7 \u23f1\ufe0f 23.08.2024):      <pre><code>git clone https://github.com/thorben-frank/mlff\n</code></pre> KLIFF (\ud83e\udd4814 \u00b7  \u2b50 34) - KIM-based Learning-Integrated Fitting Framework for interatomic potentials. <code>LGPL-2.1</code> <code>probabilistic</code> <code>workflows</code>  - [GitHub](https://github.com/openkim/kliff) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 20 \u00b7 \ud83d\udce6 3 \u00b7 \ud83d\udccb 41 - 53% open \u00b7 \u23f1\ufe0f 06.07.2024):      <pre><code>git clone https://github.com/openkim/kliff\n</code></pre> - [PyPi](https://pypi.org/project/kliff) (\ud83d\udce5 450 / month \u00b7 \u23f1\ufe0f 17.12.2023):     <pre><code>pip install kliff\n</code></pre> - [Conda](https://anaconda.org/conda-forge/kliff) (\ud83d\udce5 110K \u00b7 \u23f1\ufe0f 10.09.2024):     <pre><code>conda install -c conda-forge kliff\n</code></pre> DMFF (\ud83e\udd4813 \u00b7  \u2b50 150 \u00b7 \ud83d\udca4) - DMFF (Differentiable Molecular Force Field) is a Jax-based python package that provides a full differentiable.. <code>LGPL-3.0</code>  - [GitHub](https://github.com/deepmodeling/DMFF) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 42 \u00b7 \ud83d\udccb 26 - 38% open \u00b7 \u23f1\ufe0f 12.01.2024):      <pre><code>git clone https://github.com/deepmodeling/DMFF\n</code></pre> NNPOps (\ud83e\udd4813 \u00b7  \u2b50 81) - High-performance operations for neural network potentials. <code>MIT</code> <code>MD</code> <code>C++</code>  - [GitHub](https://github.com/openmm/NNPOps) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 17 \u00b7 \ud83d\udccb 55 - 38% open \u00b7 \u23f1\ufe0f 10.07.2024):      <pre><code>git clone https://github.com/openmm/NNPOps\n</code></pre> - [Conda](https://anaconda.org/conda-forge/nnpops) (\ud83d\udce5 240K \u00b7 \u23f1\ufe0f 11.09.2024):     <pre><code>conda install -c conda-forge nnpops\n</code></pre> ANI-1 (\ud83e\udd4812 \u00b7  \u2b50 220 \u00b7 \ud83d\udca4) - ANI-1 neural net potential with python interface (ASE). <code>MIT</code>  - [GitHub](https://github.com/isayev/ASE_ANI) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 55 \u00b7 \ud83d\udccb 37 - 43% open \u00b7 \u23f1\ufe0f 11.03.2024):      <pre><code>git clone https://github.com/isayev/ASE_ANI\n</code></pre> PiNN (\ud83e\udd4812 \u00b7  \u2b50 100) - A Python library for building atomic neural networks. <code>BSD-3</code>  - [GitHub](https://github.com/Teoroo-CMC/PiNN) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 32 \u00b7 \ud83d\udccb 6 - 16% open \u00b7 \u23f1\ufe0f 27.06.2024):      <pre><code>git clone https://github.com/Teoroo-CMC/PiNN\n</code></pre> - [Docker Hub](https://hub.docker.com/r/teoroo/pinn) (\ud83d\udce5 250 \u00b7 \u23f1\ufe0f 27.06.2024):     <pre><code>docker pull teoroo/pinn\n</code></pre> Pacemaker (\ud83e\udd4812 \u00b7  \u2b50 69) - Python package for fitting atomic cluster expansion (ACE) potentials. <code>Custom</code>  - [GitHub](https://github.com/ICAMS/python-ace) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 16 \u00b7 \ud83d\udccb 53 - 30% open \u00b7 \u23f1\ufe0f 06.09.2024):      <pre><code>git clone https://github.com/ICAMS/python-ace\n</code></pre> - [PyPi](https://pypi.org/project/python-ace) (\ud83d\udce5 17 / month \u00b7 \u23f1\ufe0f 24.10.2022):     <pre><code>pip install python-ace\n</code></pre> CCS_fit (\ud83e\udd4812 \u00b7  \u2b50 8 \u00b7 \ud83d\udca4) - Curvature Constrained Splines. <code>GPL-3.0</code>  - [GitHub](https://github.com/Teoroo-CMC/CCS) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 11 \u00b7 \ud83d\udce5 650 \u00b7 \ud83d\udccb 14 - 57% open \u00b7 \u23f1\ufe0f 16.02.2024):      <pre><code>git clone https://github.com/Teoroo-CMC/CCS\n</code></pre> - [PyPi](https://pypi.org/project/ccs_fit) (\ud83d\udce5 1.4K / month \u00b7 \u23f1\ufe0f 16.02.2024):     <pre><code>pip install ccs_fit\n</code></pre> ACEfit (\ud83e\udd4812 \u00b7  \u2b50 7) -  <code>MIT</code> <code>Julia</code>  - [GitHub](https://github.com/ACEsuit/ACEfit.jl) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 6 \u00b7 \ud83d\udccb 57 - 38% open \u00b7 \u23f1\ufe0f 14.09.2024):      <pre><code>git clone https://github.com/ACEsuit/ACEfit.jl\n</code></pre> tinker-hp (\ud83e\udd4811 \u00b7  \u2b50 80) - Tinker-HP: High-Performance Massively Parallel Evolution of Tinker on CPUs &amp; GPUs. <code>Custom</code>  - [GitHub](https://github.com/TinkerTools/tinker-hp) (\ud83d\udc68\u200d\ud83d\udcbb 12 \u00b7 \ud83d\udd00 22 \u00b7 \ud83d\udccb 20 - 15% open \u00b7 \u23f1\ufe0f 11.09.2024):      <pre><code>git clone https://github.com/TinkerTools/tinker-hp\n</code></pre> calorine (\ud83e\udd4910 \u00b7  \u2b50 12) - A Python package for constructing and sampling neuroevolution potential models. https://doi.org/10.21105/joss.06264. <code>Custom</code>  - [PyPi](https://pypi.org/project/calorine) (\ud83d\udce5 2.2K / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 26.07.2024):     <pre><code>pip install calorine\n</code></pre> - [GitLab](https://gitlab.com/materials-modeling/calorine) (\ud83d\udd00 4 \u00b7 \ud83d\udccb 86 - 10% open \u00b7 \u23f1\ufe0f 26.07.2024):      <pre><code>git clone https://gitlab.com/materials-modeling/calorine\n</code></pre> DimeNet (\ud83e\udd499 \u00b7  \u2b50 290 \u00b7 \ud83d\udca4) - DimeNet and DimeNet++ models, as proposed in Directional Message Passing for Molecular Graphs (ICLR 2020) and Fast and.. <code>Custom</code>  - [GitHub](https://github.com/gasteigerjo/dimenet) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 60 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 31 - 3% open \u00b7 \u23f1\ufe0f 03.10.2023):      <pre><code>git clone https://github.com/gasteigerjo/dimenet\n</code></pre> ACE.jl (\ud83e\udd499 \u00b7  \u2b50 65) - Parameterisation of Equivariant Properties of Particle Systems. <code>Custom</code> <code>Julia</code>  - [GitHub](https://github.com/ACEsuit/ACE.jl) (\ud83d\udc68\u200d\ud83d\udcbb 12 \u00b7 \ud83d\udd00 15 \u00b7 \ud83d\udccb 82 - 29% open \u00b7 \u23f1\ufe0f 31.08.2024):      <pre><code>git clone https://github.com/ACEsuit/ACE.jl\n</code></pre> ACE1.jl (\ud83e\udd499 \u00b7  \u2b50 20) - Atomic Cluster Expansion for Modelling Invariant Atomic Properties. <code>Custom</code> <code>Julia</code>  - [GitHub](https://github.com/ACEsuit/ACE1.jl) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 7 \u00b7 \ud83d\udccb 46 - 47% open \u00b7 \u23f1\ufe0f 11.09.2024):      <pre><code>git clone https://github.com/ACEsuit/ACE1.jl\n</code></pre> Point Edge Transformer (PET) (\ud83e\udd499 \u00b7  \u2b50 18) - Point Edge Transformer. <code>MIT</code> <code>rep-learn</code> <code>transformer</code>  - [GitHub](https://github.com/spozdn/pet) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 5 \u00b7 \u23f1\ufe0f 02.07.2024):      <pre><code>git clone https://github.com/spozdn/pet\n</code></pre> MACE-Jax (\ud83e\udd498 \u00b7  \u2b50 60 \u00b7 \ud83d\udca4) - Equivariant machine learning interatomic potentials in JAX. <code>MIT</code>  - [GitHub](https://github.com/ACEsuit/mace-jax) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 5 \u00b7 \ud83d\udccb 7 - 42% open \u00b7 \u23f1\ufe0f 04.10.2023):      <pre><code>git clone https://github.com/ACEsuit/mace-jax\n</code></pre> GAP (\ud83e\udd498 \u00b7  \u2b50 40) - Gaussian Approximation Potential (GAP). <code>Custom</code>  - [GitHub](https://github.com/libAtoms/GAP) (\ud83d\udc68\u200d\ud83d\udcbb 13 \u00b7 \ud83d\udd00 20 \u00b7 \u23f1\ufe0f 17.08.2024):      <pre><code>git clone https://github.com/libAtoms/GAP\n</code></pre> SIMPLE-NN v2 (\ud83e\udd498 \u00b7  \u2b50 40 \u00b7 \ud83d\udca4) - SIMPLE-NN is an open package that constructs Behler-Parrinello-type neural-network interatomic potentials from ab.. <code>GPL-3.0</code>  - [GitHub](https://github.com/MDIL-SNU/SIMPLE-NN_v2) (\ud83d\udc68\u200d\ud83d\udcbb 13 \u00b7 \ud83d\udd00 17 \u00b7 \ud83d\udccb 13 - 30% open \u00b7 \u23f1\ufe0f 29.12.2023):      <pre><code>git clone https://github.com/MDIL-SNU/SIMPLE-NN_v2\n</code></pre> ALF (\ud83e\udd498 \u00b7  \u2b50 30) - A framework for performing active learning for training machine-learned interatomic potentials. <code>Custom</code> <code>active-learning</code>  - [GitHub](https://github.com/lanl/ALF) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 12 \u00b7 \u23f1\ufe0f 08.08.2024):      <pre><code>git clone https://github.com/lanl/alf\n</code></pre> TurboGAP (\ud83e\udd498 \u00b7  \u2b50 16) - The TurboGAP code. <code>Custom</code> <code>Fortran</code>  - [GitHub](https://github.com/mcaroba/turbogap) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 9 \u00b7 \ud83d\udccb 11 - 72% open \u00b7 \u23f1\ufe0f 30.09.2024):      <pre><code>git clone https://github.com/mcaroba/turbogap\n</code></pre> MLXDM (\ud83e\udd498 \u00b7  \u2b50 6) - A Neural Network Potential with Rigorous Treatment of Long-Range Dispersion https://doi.org/10.1039/D2DD00150K. <code>MIT</code> <code>long-range</code>  - [GitHub](https://github.com/RowleyGroup/MLXDM) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 2 \u00b7 \u23f1\ufe0f 15.08.2024):      <pre><code>git clone https://github.com/RowleyGroup/MLXDM\n</code></pre> PyNEP (\ud83e\udd497 \u00b7  \u2b50 46) - A python interface of the machine learning potential NEP used in GPUMD. <code>MIT</code>  - [GitHub](https://github.com/bigd4/PyNEP) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 16 \u00b7 \ud83d\udccb 11 - 36% open \u00b7 \u23f1\ufe0f 01.06.2024):      <pre><code>git clone https://github.com/bigd4/PyNEP\n</code></pre> TensorPotential (\ud83e\udd496 \u00b7  \u2b50 8) - Tensorpotential is a TensorFlow based tool for development, fitting ML interatomic potentials from electronic.. <code>Custom</code>  - [GitHub](https://github.com/ICAMS/TensorPotential) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 4 \u00b7 \u23f1\ufe0f 12.09.2024):      <pre><code>git clone https://github.com/ICAMS/TensorPotential\n</code></pre> NequIP-JAX (\ud83e\udd495 \u00b7  \u2b50 18 \u00b7 \ud83d\udca4) - JAX implementation of the NequIP interatomic potential. <code>Unlicensed</code>  - [GitHub](https://github.com/mariogeiger/nequip-jax) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 3 \u00b7 \u23f1\ufe0f 01.11.2023):      <pre><code>git clone https://github.com/mariogeiger/nequip-jax\n</code></pre> Allegro-JAX ( \u2b50 17) - JAX implementation of the Allegro interatomic potential. <code>Unlicensed</code>  - [GitHub](https://github.com/mariogeiger/allegro-jax) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 2 \u00b7 \ud83d\udccb 2 - 50% open \u00b7 \u23f1\ufe0f 09.04.2024):      <pre><code>git clone https://github.com/mariogeiger/allegro-jax\n</code></pre> Show 32 hidden projects...  - MEGNet (\ud83e\udd4723 \u00b7  \u2b50 500 \u00b7 \ud83d\udc80) - Graph Networks as a Universal Machine Learning Framework for Molecules and Crystals. <code>BSD-3</code> <code>multifidelity</code> - sGDML (\ud83e\udd4816 \u00b7  \u2b50 140 \u00b7 \ud83d\udc80) - sGDML - Reference implementation of the Symmetric Gradient Domain Machine Learning model. <code>MIT</code> - n2p2 (\ud83e\udd4814 \u00b7  \u2b50 220 \u00b7 \ud83d\udc80) - n2p2 - A Neural Network Potential Package. <code>GPL-3.0</code> <code>C++</code> - TensorMol (\ud83e\udd4812 \u00b7  \u2b50 270 \u00b7 \ud83d\udc80) - Tensorflow + Molecules = TensorMol. <code>GPL-3.0</code> <code>single-paper</code> - SIMPLE-NN (\ud83e\udd4811 \u00b7  \u2b50 47 \u00b7 \ud83d\udc80) - SIMPLE-NN(SNU Interatomic Machine-learning PotentiaL packagE version Neural Network). <code>GPL-3.0</code> - NNsforMD (\ud83e\udd4910 \u00b7  \u2b50 10 \u00b7 \ud83d\udc80) - Neural network class for molecular dynamics to predict potential energy, forces and non-adiabatic couplings. <code>MIT</code> - Allegro (\ud83e\udd499 \u00b7  \u2b50 330 \u00b7 \ud83d\udc80) - Allegro is an open-source code for building highly scalable and accurate equivariant deep learning interatomic.. <code>MIT</code> - SchNet (\ud83e\udd499 \u00b7  \u2b50 220 \u00b7 \ud83d\udc80) - SchNet - a deep learning architecture for quantum chemistry. <code>MIT</code> - GemNet (\ud83e\udd499 \u00b7  \u2b50 180 \u00b7 \ud83d\udc80) - GemNet model in PyTorch, as proposed in GemNet: Universal Directional Graph Neural Networks for Molecules (NeurIPS.. <code>Custom</code> - AIMNet (\ud83e\udd498 \u00b7  \u2b50 95 \u00b7 \ud83d\udc80) - Atoms In Molecules Neural Network Potential. <code>MIT</code> <code>single-paper</code> - SNAP (\ud83e\udd498 \u00b7  \u2b50 36 \u00b7 \ud83d\udc80) - Repository for spectral neighbor analysis potential (SNAP) model development. <code>BSD-3</code> - Atomistic Adversarial Attacks (\ud83e\udd498 \u00b7  \u2b50 31 \u00b7 \ud83d\udc80) - Code for performing adversarial attacks on atomistic systems using NN potentials. <code>MIT</code> <code>probabilistic</code> - MEGNetSparse (\ud83e\udd498 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - A library imlementing a graph neural network with sparse representation from Code for Kazeev, N., Al-Maeeni, A.R.,.. <code>MIT</code> <code>material-defect</code> - PhysNet (\ud83e\udd497 \u00b7  \u2b50 89 \u00b7 \ud83d\udc80) - Code for training PhysNet models. <code>MIT</code> <code>electrostatics</code> - Asparagus (\ud83e\udd497 \u00b7  \u2b50 4 \u00b7 \ud83d\udc23) - Program Package for Sampling, Training and Applying ML-based Potential models https://doi.org/10.48550/arXiv.2407.15175. <code>MIT</code> <code>workflows</code> <code>sampling</code> <code>MD</code> - MLIP-3 (\ud83e\udd496 \u00b7  \u2b50 26 \u00b7 \ud83d\udc80) - MLIP-3: Active learning on atomic environments with Moment Tensor Potentials (MTP). <code>BSD-2</code> <code>C++</code> - testing-framework (\ud83e\udd496 \u00b7  \u2b50 11 \u00b7 \ud83d\udc80) - The purpose of this repository is to aid the testing of a large number of interatomic potentials for a variety of.. <code>Unlicensed</code> <code>benchmarking</code> - PANNA (\ud83e\udd496 \u00b7  \u2b50 9 \u00b7 \ud83d\udc80) - A package to train and validate all-to-all connected network models for BP[1] and modified-BP[2] type local atomic.. <code>MIT</code> <code>benchmarking</code> - GN-MM (\ud83e\udd495 \u00b7  \u2b50 10 \u00b7 \ud83d\udc80) - The Gaussian Moment Neural Network (GM-NN) package developed for large-scale atomistic simulations employing atomistic.. <code>MIT</code> <code>active-learning</code> <code>MD</code> <code>rep-eng</code> <code>magnetism</code> - Alchemical learning (\ud83e\udd495 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Code for the Modeling high-entropy transition metal alloys with alchemical compression article. <code>BSD-3</code> - ACE1Pack.jl (\ud83e\udd495 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Provides convenience functionality for the usage of ACE1.jl, ACEfit.jl, JuLIP.jl for fitting interatomic potentials.. <code>MIT</code> <code>Julia</code> - Allegro-Legato (\ud83e\udd494 \u00b7  \u2b50 19 \u00b7 \ud83d\udc80) - An extension of Allegro with enhanced robustness and time-to-failure. <code>MIT</code> <code>MD</code> - glp (\ud83e\udd494 \u00b7  \u2b50 17 \u00b7 \ud83d\udca4) - tools for graph-based machine-learning potentials in jax. <code>MIT</code> - ACE Workflows (\ud83e\udd494 \u00b7 \ud83d\udca4) - Workflow Examples for ACE Models. <code>Unlicensed</code> <code>Julia</code> <code>workflows</code> - PeriodicPotentials (\ud83e\udd494 \u00b7 \ud83d\udc80) - A Periodic table app that displays potentials based on the selected elements. <code>MIT</code> <code>community-resource</code> <code>viz</code> <code>JavaScript</code> - PyFLAME (\ud83e\udd493 \u00b7 \ud83d\udc80) - An automated approach for developing neural network interatomic potentials with FLAME.. <code>Unlicensed</code> <code>active-learning</code> <code>structure-prediction</code> <code>structure-optimization</code> <code>rep-eng</code> <code>Fortran</code> - SingleNN (\ud83e\udd492 \u00b7  \u2b50 8 \u00b7 \ud83d\udc80) - An efficient package for training and executing neural-network interatomic potentials. <code>Unlicensed</code> <code>C++</code> - AisNet (\ud83e\udd492 \u00b7  \u2b50 3 \u00b7 \ud83d\udc80) - A Universal Interatomic Potential Neural Network with Encoded Local Environment Features.. <code>MIT</code> - RuNNer (\ud83e\udd492) - The RuNNer Neural Network Energy Representation is a Fortran-based framework for the construction of Behler-.. <code>GPL-3.0</code> <code>Fortran</code> - nnp-pre-training (\ud83e\udd491 \u00b7  \u2b50 6 \u00b7 \ud83d\udca4) - Synthetic pre-training for neural-network interatomic potentials. <code>Unlicensed</code> <code>pretrained</code> <code>MD</code> - mag-ace (\ud83e\udd491 \u00b7  \u2b50 2 \u00b7 \ud83d\udca4) - Magnetic ACE potential. FORTRAN interface for LAMMPS SPIN package. <code>Unlicensed</code> <code>magnetism</code> <code>MD</code> <code>Fortran</code> - mlp (\ud83e\udd491 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Proper orthogonal descriptors for efficient and accurate interatomic potentials... <code>Unlicensed</code> <code>Julia</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#language-models","title":"Language Models","text":"<p>Projects that use (large) language models (LMs, LLMs) or natural language procesing (NLP) techniques for atomistic ML.</p> paper-qa (\ud83e\udd4729 \u00b7  \u2b50 6K) - High accuracy RAG for answering questions from scientific documents with citations. <code>Apache-2</code> <code>ai-agent</code>  - [GitHub](https://github.com/Future-House/paper-qa) (\ud83d\udc68\u200d\ud83d\udcbb 25 \u00b7 \ud83d\udd00 550 \u00b7 \ud83d\udce6 71 \u00b7 \ud83d\udccb 210 - 31% open \u00b7 \u23f1\ufe0f 02.10.2024):      <pre><code>git clone https://github.com/whitead/paper-qa\n</code></pre> - [PyPi](https://pypi.org/project/paper-qa) (\ud83d\udce5 16K / month \u00b7 \ud83d\udce6 8 \u00b7 \u23f1\ufe0f 27.09.2024):     <pre><code>pip install paper-qa\n</code></pre> OpenBioML ChemNLP (\ud83e\udd4717 \u00b7  \u2b50 150) - ChemNLP project. <code>MIT</code> <code>datasets</code>  - [GitHub](https://github.com/OpenBioML/chemnlp) (\ud83d\udc68\u200d\ud83d\udcbb 27 \u00b7 \ud83d\udd00 46 \u00b7 \ud83d\udccb 250 - 44% open \u00b7 \u23f1\ufe0f 19.08.2024):      <pre><code>git clone https://github.com/OpenBioML/chemnlp\n</code></pre> - [PyPi](https://pypi.org/project/chemnlp) (\ud83d\udce5 98 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 07.08.2023):     <pre><code>pip install chemnlp\n</code></pre> ChemCrow (\ud83e\udd4815 \u00b7  \u2b50 600 \u00b7 \ud83d\udca4) - Open source package for the accurate solution of reasoning-intensive chemical tasks. <code>MIT</code> <code>ai-agent</code>  - [GitHub](https://github.com/ur-whitelab/chemcrow-public) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 87 \u00b7 \ud83d\udce6 5 \u00b7 \ud83d\udccb 22 - 36% open \u00b7 \u23f1\ufe0f 27.03.2024):      <pre><code>git clone https://github.com/ur-whitelab/chemcrow-public\n</code></pre> - [PyPi](https://pypi.org/project/chemcrow) (\ud83d\udce5 630 / month \u00b7 \u23f1\ufe0f 27.03.2024):     <pre><code>pip install chemcrow\n</code></pre> AtomGPT (\ud83e\udd4813 \u00b7  \u2b50 22) - AtomGPT: Atomistic Generative Pretrained Transformer for Forward and Inverse Materials Design. <code>Custom</code> <code>generative</code> <code>pretrained</code> <code>transformer</code>  - [GitHub](https://github.com/usnistgov/atomgpt) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 3 \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 22.09.2024):      <pre><code>git clone https://github.com/usnistgov/atomgpt\n</code></pre> - [PyPi](https://pypi.org/project/atomgpt) (\ud83d\udce5 260 / month \u00b7 \u23f1\ufe0f 22.09.2024):     <pre><code>pip install atomgpt\n</code></pre> gptchem (\ud83e\udd4812 \u00b7  \u2b50 230 \u00b7 \ud83d\udca4) - Use GPT-3 to solve chemistry problems. <code>MIT</code>  - [GitHub](https://github.com/kjappelbaum/gptchem) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 41 \u00b7 \ud83d\udccb 21 - 90% open \u00b7 \u23f1\ufe0f 04.10.2023):      <pre><code>git clone https://github.com/kjappelbaum/gptchem\n</code></pre> - [PyPi](https://pypi.org/project/gptchem) (\ud83d\udce5 120 / month \u00b7 \u23f1\ufe0f 04.10.2023):     <pre><code>pip install gptchem\n</code></pre> NIST ChemNLP (\ud83e\udd4811 \u00b7  \u2b50 70) - ChemNLP: A Natural Language Processing based Library for Materials Chemistry Text Data. <code>MIT</code> <code>literature-data</code>  - [GitHub](https://github.com/usnistgov/chemnlp) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 16 \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 19.08.2024):      <pre><code>git clone https://github.com/usnistgov/chemnlp\n</code></pre> - [PyPi](https://pypi.org/project/chemnlp) (\ud83d\udce5 98 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 07.08.2023):     <pre><code>pip install chemnlp\n</code></pre> ChatMOF (\ud83e\udd4811 \u00b7  \u2b50 58) - Predict and Inverse design for metal-organic framework with large-language models (llms). <code>MIT</code> <code>generative</code>  - [GitHub](https://github.com/Yeonghun1675/ChatMOF) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 8 \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 01.07.2024):      <pre><code>git clone https://github.com/Yeonghun1675/ChatMOF\n</code></pre> - [PyPi](https://pypi.org/project/chatmof) (\ud83d\udce5 340 / month \u00b7 \u23f1\ufe0f 01.07.2024):     <pre><code>pip install chatmof\n</code></pre> LLaMP (\ud83e\udd4910 \u00b7  \u2b50 61) - A web app and Python API for multi-modal RAG framework to ground LLMs on high-fidelity materials informatics. An.. <code>BSD-3</code> <code>materials-discovery</code> <code>cheminformatics</code> <code>generative</code> <code>MD</code> <code>multimodal</code> <code>language-models</code> <code>Python</code> <code>general-tool</code>  - [GitHub](https://github.com/chiang-yuan/llamp) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 7 \u00b7 \ud83d\udccb 25 - 32% open \u00b7 \u23f1\ufe0f 10.09.2024):      <pre><code>git clone https://github.com/chiang-yuan/llamp\n</code></pre> MoLFormer (\ud83e\udd499 \u00b7  \u2b50 250 \u00b7 \ud83d\udca4) - Repository for MolFormer. <code>Apache-2</code> <code>transformer</code> <code>pretrained</code> <code>drug-discovery</code>  - [GitHub](https://github.com/IBM/molformer) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 41 \u00b7 \ud83d\udccb 19 - 47% open \u00b7 \u23f1\ufe0f 16.10.2023):      <pre><code>git clone https://github.com/IBM/molformer\n</code></pre> MolSkill (\ud83e\udd499 \u00b7  \u2b50 100 \u00b7 \ud83d\udca4) - Extracting medicinal chemistry intuition via preference machine learning. <code>MIT</code> <code>drug-discovery</code> <code>recommender</code>  - [GitHub](https://github.com/microsoft/molskill) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 9 \u00b7 \ud83d\udccb 6 - 33% open \u00b7 \u23f1\ufe0f 31.10.2023):      <pre><code>git clone https://github.com/microsoft/molskill\n</code></pre> - [Conda](https://anaconda.org/msr-ai4science/molskill) (\ud83d\udce5 310 \u00b7 \u23f1\ufe0f 18.06.2023):     <pre><code>conda install -c msr-ai4science molskill\n</code></pre> chemlift (\ud83e\udd497 \u00b7  \u2b50 31 \u00b7 \ud83d\udca4) - Language-interfaced fine-tuning for chemistry. <code>MIT</code>  - [GitHub](https://github.com/lamalab-org/chemlift) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 3 \u00b7 \ud83d\udccb 18 - 61% open \u00b7 \u23f1\ufe0f 14.10.2023):      <pre><code>git clone https://github.com/lamalab-org/chemlift\n</code></pre> LLM-Prop (\ud83e\udd497 \u00b7  \u2b50 27) - A repository for the LLM-Prop implementation. <code>MIT</code>  - [GitHub](https://github.com/vertaix/LLM-Prop) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 5 \u00b7 \ud83d\udccb 2 - 50% open \u00b7 \u23f1\ufe0f 26.04.2024):      <pre><code>git clone https://github.com/vertaix/LLM-Prop\n</code></pre> crystal-text-llm (\ud83e\udd495 \u00b7  \u2b50 68) - Large language models to generate stable crystals. <code>CC-BY-NC-4.0</code> <code>materials-discovery</code>  - [GitHub](https://github.com/facebookresearch/crystal-text-llm) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 12 \u00b7 \ud83d\udccb 9 - 77% open \u00b7 \u23f1\ufe0f 18.06.2024):      <pre><code>git clone https://github.com/facebookresearch/crystal-text-llm\n</code></pre> SciBot (\ud83e\udd495 \u00b7  \u2b50 28) - SciBot is a simple demo of building a domain-specific chatbot for science. <code>Unlicensed</code> <code>ai-agent</code>  - [GitHub](https://github.com/CFN-softbio/SciBot) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 8 \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 03.09.2024):      <pre><code>git clone https://github.com/CFN-softbio/SciBot\n</code></pre> MAPI_LLM (\ud83e\udd495 \u00b7  \u2b50 9) - A LLM application developed during the LLM March MADNESS Hackathon https://doi.org/10.1039/D3DD00113J. <code>MIT</code> <code>ai-agent</code> <code>dataset</code>  - [GitHub](https://github.com/maykcaldas/MAPI_LLM) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 2 \u00b7 \u23f1\ufe0f 11.04.2024):      <pre><code>git clone https://github.com/maykcaldas/MAPI_LLM\n</code></pre> Show 7 hidden projects...  - ChemDataExtractor (\ud83e\udd4716 \u00b7  \u2b50 300 \u00b7 \ud83d\udc80) - Automatically extract chemical information from scientific documents. <code>MIT</code> <code>literature-data</code> - mat2vec (\ud83e\udd4812 \u00b7  \u2b50 620 \u00b7 \ud83d\udc80) - Supplementary Materials for Tshitoyan et al. Unsupervised word embeddings capture latent knowledge from materials.. <code>MIT</code> <code>rep-learn</code> - nlcc (\ud83e\udd4812 \u00b7  \u2b50 44 \u00b7 \ud83d\udc80) - Natural language computational chemistry command line interface. <code>MIT</code> <code>single-paper</code> - BERT-PSIE-TC (\ud83e\udd495 \u00b7  \u2b50 12 \u00b7 \ud83d\udc80) - A dataset of Curie temperatures automatically extracted from scientific literature with the use of the BERT-PSIE.. <code>MIT</code> <code>magnetism</code> - ChemDataWriter (\ud83e\udd494 \u00b7  \u2b50 14 \u00b7 \ud83d\udca4) - ChemDataWriter is a transformer-based library for automatically generating research books in the chemistry area. <code>MIT</code> <code>literature-data</code> - Cephalo (\ud83e\udd494 \u00b7  \u2b50 6 \u00b7 \ud83d\udc23) - Multimodal Vision-Language Models for Bio-Inspired Materials Analysis and Design. <code>Apache-2</code> <code>generative</code> <code>multimodal</code> <code>pretrained</code> - CatBERTa (\ud83e\udd493 \u00b7  \u2b50 19 \u00b7 \ud83d\udca4) - Large Language Model for Catalyst Property Prediction. <code>Unlicensed</code> <code>transformer</code> <code>catalysis</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#materials-discovery","title":"Materials Discovery","text":"<p>Projects that implement materials discovery methods using atomistic ML.</p> <p>\ud83d\udd17\u00a0MatterGen  - A generative model for inorganic materials design https://doi.org/10.48550/arXiv.2312.03687. <code>generative</code> <code>proprietary</code></p> aviary (\ud83e\udd4715 \u00b7  \u2b50 47) - The Wren sits on its Roost in the Aviary. <code>MIT</code>  - [GitHub](https://github.com/CompRhys/aviary) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 11 \u00b7 \ud83d\udccb 29 - 13% open \u00b7 \u23f1\ufe0f 10.09.2024):      <pre><code>git clone https://github.com/CompRhys/aviary\n</code></pre> BOSS (\ud83e\udd4712 \u00b7  \u2b50 20) - Bayesian Optimization Structure Search (BOSS). <code>Apache-2</code> <code>probabilistic</code>  - [PyPi](https://pypi.org/project/aalto-boss) (\ud83d\udce5 5.2K / month \u00b7 \u23f1\ufe0f 20.07.2024):     <pre><code>pip install aalto-boss\n</code></pre> - [GitLab](https://gitlab.com/cest-group/boss) (\ud83d\udd00 11 \u00b7 \ud83d\udccb 30 - 3% open \u00b7 \u23f1\ufe0f 20.07.2024):      <pre><code>git clone https://gitlab.com/cest-group/boss\n</code></pre> AGOX (\ud83e\udd4810 \u00b7  \u2b50 13) - AGOX is a package for global optimization of atomic system using e.g. the energy calculated from density functional.. <code>GPL-3.0</code> <code>structure-optimization</code>  - [PyPi](https://pypi.org/project/agox) (\ud83d\udce5 260 / month \u00b7 \u23f1\ufe0f 26.08.2024):     <pre><code>pip install agox\n</code></pre> - [GitLab](https://gitlab.com/agox/agox) (\ud83d\udd00 5 \u00b7 \ud83d\udccb 24 - 54% open \u00b7 \u23f1\ufe0f 26.08.2024):      <pre><code>git clone https://gitlab.com/agox/agox\n</code></pre> Materials Discovery: GNoME (\ud83e\udd489 \u00b7  \u2b50 870) - Graph Networks for Materials Science (GNoME) and dataset of 381,000 novel stable materials. <code>Apache-2</code> <code>UIP</code> <code>datasets</code> <code>rep-learn</code> <code>proprietary</code>  - [GitHub](https://github.com/google-deepmind/materials_discovery) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udccb 22 - 81% open \u00b7 \u23f1\ufe0f 04.09.2024):      <pre><code>git clone https://github.com/google-deepmind/materials_discovery\n</code></pre> CSPML (crystal structure prediction with machine learning-based element substitution) (\ud83e\udd487 \u00b7  \u2b50 20) - Original implementation of CSPML. <code>MIT</code> <code>structure-prediction</code>  - [GitHub](https://github.com/Minoru938/CSPML) (\ud83d\udd00 9 \u00b7 \ud83d\udccb 3 - 66% open \u00b7 \u23f1\ufe0f 25.09.2024):      <pre><code>git clone https://github.com/minoru938/cspml\n</code></pre> Show 6 hidden projects...  - Computational Autonomy for Materials Discovery (CAMD) (\ud83e\udd496 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Agent-based sequential learning software for materials discovery. <code>Apache-2</code> - MAGUS (\ud83e\udd494 \u00b7  \u2b50 60 \u00b7 \ud83d\udc80) - Machine learning And Graph theory assisted Universal structure Searcher. <code>Unlicensed</code> <code>structure-prediction</code> <code>active-learning</code> - ML-atomate (\ud83e\udd494 \u00b7  \u2b50 4 \u00b7 \ud83d\udca4) - Machine learning-assisted Atomate code for autonomous computational materials screening. <code>GPL-3.0</code> <code>active-learning</code> <code>workflows</code> - closed-loop-acceleration-benchmarks (\ud83e\udd494 \u00b7 \ud83d\udc80) - Data and scripts in support of the publication By how much can closed-loop frameworks accelerate computational.. <code>MIT</code> <code>materials-discovery</code> <code>active-learning</code> <code>single-paper</code> - SPINNER (\ud83e\udd493 \u00b7  \u2b50 12 \u00b7 \ud83d\udc80) - SPINNER (Structure Prediction of Inorganic crystals using Neural Network potentials with Evolutionary and Random.. <code>GPL-3.0</code> <code>C++</code> <code>structure-prediction</code> - sl_discovery (\ud83e\udd493 \u00b7  \u2b50 5 \u00b7 \ud83d\udc80) - Data processing and models related to Quantifying the performance of machine learning models in materials discovery. <code>Apache-2</code> <code>materials-discovery</code> <code>single-paper</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#mathematical-tools","title":"Mathematical tools","text":"<p>Projects that implement mathematical objects used in atomistic machine learning.</p> KFAC-JAX (\ud83e\udd4718 \u00b7  \u2b50 230) - Second Order Optimization and Curvature Estimation with K-FAC in JAX. <code>Apache-2</code>  - [GitHub](https://github.com/google-deepmind/kfac-jax) (\ud83d\udc68\u200d\ud83d\udcbb 15 \u00b7 \ud83d\udd00 18 \u00b7 \ud83d\udce6 10 \u00b7 \ud83d\udccb 19 - 47% open \u00b7 \u23f1\ufe0f 27.09.2024):      <pre><code>git clone https://github.com/google-deepmind/kfac-jax\n</code></pre> - [PyPi](https://pypi.org/project/kfac-jax) (\ud83d\udce5 1.1K / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 04.04.2024):     <pre><code>pip install kfac-jax\n</code></pre> gpax (\ud83e\udd4717 \u00b7  \u2b50 200) - Gaussian Processes for Experimental Sciences. <code>MIT</code> <code>probabilistic</code> <code>active-learning</code>  - [GitHub](https://github.com/ziatdinovmax/gpax) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 24 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 40 - 20% open \u00b7 \u23f1\ufe0f 21.05.2024):      <pre><code>git clone https://github.com/ziatdinovmax/gpax\n</code></pre> - [PyPi](https://pypi.org/project/gpax) (\ud83d\udce5 380 / month \u00b7 \u23f1\ufe0f 20.03.2024):     <pre><code>pip install gpax\n</code></pre> SpheriCart (\ud83e\udd4717 \u00b7  \u2b50 70) - Multi-language library for the calculation of spherical harmonics in Cartesian coordinates. <code>MIT</code>  - [GitHub](https://github.com/lab-cosmo/sphericart) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 11 \u00b7 \ud83d\udce5 86 \u00b7 \ud83d\udce6 3 \u00b7 \ud83d\udccb 41 - 56% open \u00b7 \u23f1\ufe0f 07.09.2024):      <pre><code>git clone https://github.com/lab-cosmo/sphericart\n</code></pre> - [PyPi](https://pypi.org/project/sphericart) (\ud83d\udce5 980 / month \u00b7 \u23f1\ufe0f 04.09.2024):     <pre><code>pip install sphericart\n</code></pre> Polynomials4ML.jl (\ud83e\udd4813 \u00b7  \u2b50 12) - Polynomials for ML: fast evaluation, batching, differentiation. <code>MIT</code> <code>Julia</code>  - [GitHub](https://github.com/ACEsuit/Polynomials4ML.jl) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 5 \u00b7 \ud83d\udccb 51 - 33% open \u00b7 \u23f1\ufe0f 22.06.2024):      <pre><code>git clone https://github.com/ACEsuit/Polynomials4ML.jl\n</code></pre> GElib (\ud83e\udd498 \u00b7  \u2b50 19) - C++/CUDA library for SO(3) equivariant operations. <code>MPL-2.0</code> <code>C++</code>  - [GitHub](https://github.com/risi-kondor/GElib) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 3 \u00b7 \ud83d\udccb 8 - 50% open \u00b7 \u23f1\ufe0f 27.07.2024):      <pre><code>git clone https://github.com/risi-kondor/GElib\n</code></pre> COSMO Toolbox (\ud83e\udd496 \u00b7  \u2b50 7 \u00b7 \ud83d\udca4) - Assorted libraries and utilities for atomistic simulation analysis. <code>Unlicensed</code> <code>C++</code>  - [GitHub](https://github.com/lab-cosmo/toolbox) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 6 \u00b7 \u23f1\ufe0f 19.03.2024):      <pre><code>git clone https://github.com/lab-cosmo/toolbox\n</code></pre> Show 5 hidden projects...  - lie-nn (\ud83e\udd489 \u00b7  \u2b50 26 \u00b7 \ud83d\udc80) - Tools for building equivariant polynomials on reductive Lie groups. <code>MIT</code> <code>rep-learn</code> - EquivariantOperators.jl (\ud83e\udd496 \u00b7  \u2b50 19 \u00b7 \ud83d\udc80) - This package is deprecated. Functionalities are migrating to Porcupine.jl. <code>MIT</code> <code>Julia</code> - cnine (\ud83e\udd496 \u00b7  \u2b50 4) - Cnine tensor library. <code>Unlicensed</code> <code>C++</code> - torch_spex (\ud83e\udd493 \u00b7  \u2b50 3 \u00b7 \ud83d\udca4) - Spherical expansions in PyTorch. <code>Unlicensed</code> - Wigner Kernels (\ud83e\udd491 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Collection of programs to benchmark Wigner kernels. <code>Unlicensed</code> <code>benchmarking</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#molecular-dynamics","title":"Molecular Dynamics","text":"<p>Projects that simplify the integration of molecular dynamics and atomistic machine learning.</p> JAX-MD (\ud83e\udd4726 \u00b7  \u2b50 1.2K) - Differentiable, Hardware Accelerated, Molecular Dynamics. <code>Apache-2</code>  - [GitHub](https://github.com/jax-md/jax-md) (\ud83d\udc68\u200d\ud83d\udcbb 34 \u00b7 \ud83d\udd00 190 \u00b7 \ud83d\udce6 56 \u00b7 \ud83d\udccb 150 - 46% open \u00b7 \u23f1\ufe0f 05.09.2024):      <pre><code>git clone https://github.com/jax-md/jax-md\n</code></pre> - [PyPi](https://pypi.org/project/jax-md) (\ud83d\udce5 3.4K / month \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 09.08.2023):     <pre><code>pip install jax-md\n</code></pre> mlcolvar (\ud83e\udd4819 \u00b7  \u2b50 91 \u00b7 \ud83d\udcc8) - A unified framework for machine learning collective variables for enhanced sampling simulations. <code>MIT</code> <code>sampling</code>  - [GitHub](https://github.com/luigibonati/mlcolvar) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 24 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 73 - 20% open \u00b7 \u23f1\ufe0f 02.10.2024):      <pre><code>git clone https://github.com/luigibonati/mlcolvar\n</code></pre> - [PyPi](https://pypi.org/project/mlcolvar) (\ud83d\udce5 240 / month \u00b7 \u23f1\ufe0f 12.06.2024):     <pre><code>pip install mlcolvar\n</code></pre> FitSNAP (\ud83e\udd4818 \u00b7  \u2b50 150) - Software for generating machine-learning interatomic potentials for LAMMPS. <code>GPL-2.0</code>  - [GitHub](https://github.com/FitSNAP/FitSNAP) (\ud83d\udc68\u200d\ud83d\udcbb 24 \u00b7 \ud83d\udd00 50 \u00b7 \ud83d\udce5 11 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 73 - 21% open \u00b7 \u23f1\ufe0f 19.09.2024):      <pre><code>git clone https://github.com/FitSNAP/FitSNAP\n</code></pre> - [Conda](https://anaconda.org/conda-forge/fitsnap3) (\ud83d\udce5 8.5K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge fitsnap3\n</code></pre> openmm-torch (\ud83e\udd4816 \u00b7  \u2b50 180) - OpenMM plugin to define forces with neural networks. <code>Custom</code> <code>ML-IAP</code> <code>C++</code>  - [GitHub](https://github.com/openmm/openmm-torch) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 23 \u00b7 \ud83d\udccb 92 - 28% open \u00b7 \u23f1\ufe0f 23.08.2024):      <pre><code>git clone https://github.com/openmm/openmm-torch\n</code></pre> - [Conda](https://anaconda.org/conda-forge/openmm-torch) (\ud83d\udce5 470K \u00b7 \u23f1\ufe0f 30.09.2024):     <pre><code>conda install -c conda-forge openmm-torch\n</code></pre> OpenMM-ML (\ud83e\udd4913 \u00b7  \u2b50 80) - High level API for using machine learning models in OpenMM simulations. <code>MIT</code> <code>ML-IAP</code>  - [GitHub](https://github.com/openmm/openmm-ml) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 19 \u00b7 \ud83d\udccb 55 - 36% open \u00b7 \u23f1\ufe0f 06.08.2024):      <pre><code>git clone https://github.com/openmm/openmm-ml\n</code></pre> - [Conda](https://anaconda.org/conda-forge/openmm-ml) (\ud83d\udce5 5.3K \u00b7 \u23f1\ufe0f 07.06.2024):     <pre><code>conda install -c conda-forge openmm-ml\n</code></pre> pair_nequip (\ud83e\udd4910 \u00b7  \u2b50 41) - LAMMPS pair style for NequIP. <code>MIT</code> <code>ML-IAP</code> <code>rep-learn</code>  - [GitHub](https://github.com/mir-group/pair_nequip) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 12 \u00b7 \ud83d\udccb 30 - 33% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/mir-group/pair_nequip\n</code></pre> PACE (\ud83e\udd4910 \u00b7  \u2b50 24 \u00b7 \ud83d\udca4) - The LAMMPS ML-IAP `pair_style pace`, aka Atomic Cluster Expansion (ACE), aka ML-PACE,.. <code>Custom</code>  - [GitHub](https://github.com/ICAMS/lammps-user-pace) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 10 \u00b7 \ud83d\udccb 8 - 25% open \u00b7 \u23f1\ufe0f 27.11.2023):      <pre><code>git clone https://github.com/ICAMS/lammps-user-pace\n</code></pre> pair_allegro (\ud83e\udd498 \u00b7  \u2b50 34) - LAMMPS pair style for Allegro deep learning interatomic potentials with parallelization support. <code>MIT</code> <code>ML-IAP</code> <code>rep-learn</code>  - [GitHub](https://github.com/mir-group/pair_allegro) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 8 \u00b7 \ud83d\udccb 30 - 40% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/mir-group/pair_allegro\n</code></pre> Show 2 hidden projects...  - SOMD (\ud83e\udd494 \u00b7  \u2b50 12) - Molecular dynamics package designed for the SIESTA DFT code. <code>AGPL-3.0</code> <code>ML-IAP</code> <code>active-learning</code> - interface-lammps-mlip-3 (\ud83e\udd493 \u00b7  \u2b50 5 \u00b7 \ud83d\udc80) - An interface between LAMMPS and MLIP (version 3). <code>GPL-2.0</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#reinforcement-learning","title":"Reinforcement Learning","text":"<p>Projects that focus on reinforcement learning for atomistic ML.</p> Show 2 hidden projects...  - ReLeaSE (\ud83e\udd4711 \u00b7  \u2b50 350 \u00b7 \ud83d\udc80) - Deep Reinforcement Learning for de-novo Drug Design. <code>MIT</code> <code>drug-discovery</code> - CatGym (\ud83e\udd496 \u00b7  \u2b50 11 \u00b7 \ud83d\udc80) - Surface segregation using Deep Reinforcement Learning. <code>GPL</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#representation-engineering","title":"Representation Engineering","text":"<p>Projects that offer implementations of representations aka descriptors, fingerprints of atomistic systems, and models built with them, aka feature engineering.</p> cdk (\ud83e\udd4726 \u00b7  \u2b50 490) - The Chemistry Development Kit. <code>LGPL-2.1</code> <code>cheminformatics</code> <code>Java</code>  - [GitHub](https://github.com/cdk/cdk) (\ud83d\udc68\u200d\ud83d\udcbb 160 \u00b7 \ud83d\udd00 160 \u00b7 \ud83d\udce5 22K \u00b7 \ud83d\udccb 290 - 10% open \u00b7 \u23f1\ufe0f 19.09.2024):      <pre><code>git clone https://github.com/cdk/cdk\n</code></pre> - [Maven](https://search.maven.org/artifact/org.openscience.cdk/cdk-bundle) (\ud83d\udce6 16 \u00b7 \u23f1\ufe0f 21.08.2023):     <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.openscience.cdk&lt;/groupId&gt;\n    &lt;artifactId&gt;cdk-bundle&lt;/artifactId&gt;\n    &lt;version&gt;[VERSION]&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> DScribe (\ud83e\udd4725 \u00b7  \u2b50 400) - DScribe is a python package for creating machine learning descriptors for atomistic systems. <code>Apache-2</code>  - [GitHub](https://github.com/SINGROUP/dscribe) (\ud83d\udc68\u200d\ud83d\udcbb 18 \u00b7 \ud83d\udd00 87 \u00b7 \ud83d\udce6 200 \u00b7 \ud83d\udccb 100 - 11% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/SINGROUP/dscribe\n</code></pre> - [PyPi](https://pypi.org/project/dscribe) (\ud83d\udce5 22K / month \u00b7 \ud83d\udce6 35 \u00b7 \u23f1\ufe0f 28.05.2024):     <pre><code>pip install dscribe\n</code></pre> - [Conda](https://anaconda.org/conda-forge/dscribe) (\ud83d\udce5 140K \u00b7 \u23f1\ufe0f 28.05.2024):     <pre><code>conda install -c conda-forge dscribe\n</code></pre> MODNet (\ud83e\udd4716 \u00b7  \u2b50 77) - MODNet: a framework for machine learning materials properties. <code>MIT</code> <code>pretrained</code> <code>small-data</code> <code>transfer-learning</code>  - [GitHub](https://github.com/ppdebreuck/modnet) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 32 \u00b7 \ud83d\udce6 9 \u00b7 \ud83d\udccb 53 - 49% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/ppdebreuck/modnet\n</code></pre> SISSO (\ud83e\udd4814 \u00b7  \u2b50 240) - A data-driven method combining symbolic regression and compressed sensing for accurate &amp; interpretable models. <code>Apache-2</code> <code>Fortran</code>  - [GitHub](https://github.com/rouyang2017/SISSO) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 78 \u00b7 \ud83d\udccb 76 - 23% open \u00b7 \u23f1\ufe0f 20.09.2024):      <pre><code>git clone https://github.com/rouyang2017/SISSO\n</code></pre> GlassPy (\ud83e\udd4814 \u00b7  \u2b50 26 \u00b7 \ud83d\udca4) - Python module for scientists working with glass materials. <code>GPL-3.0</code>  - [GitHub](https://github.com/drcassar/glasspy) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 7 \u00b7 \ud83d\udce6 6 \u00b7 \ud83d\udccb 13 - 53% open \u00b7 \u23f1\ufe0f 21.01.2024):      <pre><code>git clone https://github.com/drcassar/glasspy\n</code></pre> - [PyPi](https://pypi.org/project/glasspy) (\ud83d\udce5 600 / month \u00b7 \u23f1\ufe0f 05.09.2024):     <pre><code>pip install glasspy\n</code></pre> Librascal (\ud83e\udd4813 \u00b7  \u2b50 80 \u00b7 \ud83d\udca4) - A scalable and versatile library to generate representations for atomic-scale learning. <code>LGPL-2.1</code>  - [GitHub](https://github.com/lab-cosmo/librascal) (\ud83d\udc68\u200d\ud83d\udcbb 30 \u00b7 \ud83d\udd00 20 \u00b7 \ud83d\udccb 250 - 46% open \u00b7 \u23f1\ufe0f 30.11.2023):      <pre><code>git clone https://github.com/lab-cosmo/librascal\n</code></pre> Rascaline (\ud83e\udd4812 \u00b7  \u2b50 44) - Computing representations for atomistic machine learning. <code>BSD-3</code> <code>Rust</code> <code>C++</code>  - [GitHub](https://github.com/Luthaf/rascaline) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 13 \u00b7 \ud83d\udccb 69 - 46% open \u00b7 \u23f1\ufe0f 02.10.2024):      <pre><code>git clone https://github.com/Luthaf/rascaline\n</code></pre> fplib (\ud83e\udd4911 \u00b7  \u2b50 7) - libfp is a library for calculating crystalline fingerprints and measuring similarities of materials. <code>MIT</code> <code>C-lang</code> <code>single-paper</code>  - [GitHub](https://github.com/Rutgers-ZRG/libfp) (\ud83d\udd00 1 \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/zhuligs/fplib\n</code></pre> NICE (\ud83e\udd497 \u00b7  \u2b50 12) - NICE (N-body Iteratively Contracted Equivariants) is a set of tools designed for the calculation of invariant and.. <code>MIT</code>  - [GitHub](https://github.com/lab-cosmo/nice) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 3 \u00b7 \ud83d\udccb 3 - 66% open \u00b7 \u23f1\ufe0f 15.04.2024):      <pre><code>git clone https://github.com/lab-cosmo/nice\n</code></pre> milad (\ud83e\udd495 \u00b7  \u2b50 30) - Moment Invariants Local Atomic Descriptor. <code>GPL-3.0</code> <code>generative</code>  - [GitHub](https://github.com/muhrin/milad) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 1 \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 20.08.2024):      <pre><code>git clone https://github.com/muhrin/milad\n</code></pre> SA-GPR (\ud83e\udd495 \u00b7  \u2b50 19) - Public repository for symmetry-adapted Gaussian Process Regression (SA-GPR). <code>LGPL-3.0</code> <code>C-lang</code>  - [GitHub](https://github.com/dilkins/TENSOAP) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 13 \u00b7 \ud83d\udccb 7 - 28% open \u00b7 \u23f1\ufe0f 23.07.2024):      <pre><code>git clone https://github.com/dilkins/TENSOAP\n</code></pre> Show 14 hidden projects...  - CatLearn (\ud83e\udd4716 \u00b7  \u2b50 100 \u00b7 \ud83d\udc80) -  <code>GPL-3.0</code> <code>surface-science</code> - CBFV (\ud83e\udd4812 \u00b7  \u2b50 25 \u00b7 \ud83d\udc80) - Tool to quickly create a composition-based feature vector. <code>Unlicensed</code> - BenchML (\ud83e\udd4812 \u00b7  \u2b50 15 \u00b7 \ud83d\udc80) - ML benchmarking and pipeling framework. <code>Apache-2</code> <code>benchmarking</code> - cmlkit (\ud83e\udd4911 \u00b7  \u2b50 34 \u00b7 \ud83d\udc80) - tools for machine learning in condensed matter physics and quantum chemistry. <code>MIT</code> <code>benchmarking</code> - SkipAtom (\ud83e\udd499 \u00b7  \u2b50 24 \u00b7 \ud83d\udc80) - Distributed representations of atoms, inspired by the Skip-gram model. <code>MIT</code> - SOAPxx (\ud83e\udd496 \u00b7  \u2b50 7 \u00b7 \ud83d\udc80) - A SOAP implementation. <code>GPL-2.0</code> <code>C++</code> - soap_turbo (\ud83e\udd496 \u00b7  \u2b50 5 \u00b7 \ud83d\udc80) - soap_turbo comprises a series of libraries to be used in combination with QUIP/GAP and TurboGAP. <code>Custom</code> <code>Fortran</code> - pyLODE (\ud83e\udd496 \u00b7  \u2b50 3 \u00b7 \ud83d\udc80) - Pythonic implementation of LOng Distance Equivariants. <code>Apache-2</code> <code>electrostatics</code> - AMP (\ud83e\udd496 \u00b7 \ud83d\udc80) - Amp is an open-source package designed to easily bring machine-learning to atomistic calculations. <code>Unlicensed</code> - MXenes4HER (\ud83e\udd495 \u00b7  \u2b50 6 \u00b7 \ud83d\udc80) - Predicting hydrogen evolution (HER) activity over 4500 MXene materials https://doi.org/10.1039/D3TA00344B. <code>GPL-3.0</code> <code>materials-discovery</code> <code>catalysis</code> <code>scikit-learn</code> <code>single-paper</code> - SISSO++ (\ud83e\udd495 \u00b7  \u2b50 3 \u00b7 \ud83d\udc80) - C++ Implementation of SISSO with python bindings. <code>Apache-2</code> <code>C++</code> - automl-materials (\ud83e\udd494 \u00b7  \u2b50 5 \u00b7 \ud83d\udc80) - AutoML for Regression Tasks on Small Tabular Data in Materials Design. <code>MIT</code> <code>autoML</code> <code>benchmarking</code> <code>single-paper</code> - magnetism-prediction (\ud83e\udd494 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - DFT-aided Machine Learning Search for Magnetism in Fe-based Bimetallic Chalcogenides. <code>Apache-2</code> <code>magnetism</code> <code>single-paper</code> - ML-for-CurieTemp-Predictions (\ud83e\udd493 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Machine Learning Predictions of High-Curie-Temperature Materials. <code>MIT</code> <code>single-paper</code> <code>magnetism</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#representation-learning","title":"Representation Learning","text":"<p>General models that learn a representations aka embeddings of atomistic systems, such as message-passing neural networks (MPNN).</p> Deep Graph Library (DGL) (\ud83e\udd4739 \u00b7  \u2b50 13K) - Python package built to ease deep learning on graph, on top of existing DL frameworks. <code>Apache-2</code>  - [GitHub](https://github.com/dmlc/dgl) (\ud83d\udc68\u200d\ud83d\udcbb 300 \u00b7 \ud83d\udd00 3K \u00b7 \ud83d\udce6 300 \u00b7 \ud83d\udccb 2.9K - 18% open \u00b7 \u23f1\ufe0f 25.09.2024):      <pre><code>git clone https://github.com/dmlc/dgl\n</code></pre> - [PyPi](https://pypi.org/project/dgl) (\ud83d\udce5 110K / month \u00b7 \ud83d\udce6 150 \u00b7 \u23f1\ufe0f 13.05.2024):     <pre><code>pip install dgl\n</code></pre> - [Conda](https://anaconda.org/dglteam/dgl) (\ud83d\udce5 380K \u00b7 \u23f1\ufe0f 03.09.2024):     <pre><code>conda install -c dglteam dgl\n</code></pre> PyG Models (\ud83e\udd4735 \u00b7  \u2b50 21K) - Representation learning models implemented in PyTorch Geometric. <code>MIT</code> <code>general-ml</code>  - [GitHub](https://github.com/pyg-team/pytorch_geometric) (\ud83d\udc68\u200d\ud83d\udcbb 520 \u00b7 \ud83d\udd00 3.6K \u00b7 \ud83d\udce6 6.6K \u00b7 \ud83d\udccb 3.7K - 27% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/pyg-team/pytorch_geometric\n</code></pre> e3nn (\ud83e\udd4728 \u00b7  \u2b50 950) - A modular framework for neural networks with Euclidean symmetry. <code>MIT</code>  - [GitHub](https://github.com/e3nn/e3nn) (\ud83d\udc68\u200d\ud83d\udcbb 31 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce6 310 \u00b7 \ud83d\udccb 160 - 14% open \u00b7 \u23f1\ufe0f 25.08.2024):      <pre><code>git clone https://github.com/e3nn/e3nn\n</code></pre> - [PyPi](https://pypi.org/project/e3nn) (\ud83d\udce5 89K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 13.04.2022):     <pre><code>pip install e3nn\n</code></pre> - [Conda](https://anaconda.org/conda-forge/e3nn) (\ud83d\udce5 22K \u00b7 \u23f1\ufe0f 18.06.2023):     <pre><code>conda install -c conda-forge e3nn\n</code></pre> SchNetPack (\ud83e\udd4728 \u00b7  \u2b50 770) - SchNetPack - Deep Neural Networks for Atomistic Systems. <code>MIT</code>  - [GitHub](https://github.com/atomistic-machine-learning/schnetpack) (\ud83d\udc68\u200d\ud83d\udcbb 36 \u00b7 \ud83d\udd00 210 \u00b7 \ud83d\udce6 90 \u00b7 \ud83d\udccb 250 - 2% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/atomistic-machine-learning/schnetpack\n</code></pre> - [PyPi](https://pypi.org/project/schnetpack) (\ud83d\udce5 1.4K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 05.09.2024):     <pre><code>pip install schnetpack\n</code></pre> MatGL (Materials Graph Library) (\ud83e\udd4724 \u00b7  \u2b50 260) - Graph deep learning library for materials. <code>BSD-3</code> <code>multifidelity</code>  - [GitHub](https://github.com/materialsvirtuallab/matgl) (\ud83d\udc68\u200d\ud83d\udcbb 17 \u00b7 \ud83d\udd00 59 \u00b7 \ud83d\udce6 46 \u00b7 \ud83d\udccb 97 - 7% open \u00b7 \u23f1\ufe0f 03.10.2024):      <pre><code>git clone https://github.com/materialsvirtuallab/matgl\n</code></pre> - [PyPi](https://pypi.org/project/m3gnet) (\ud83d\udce5 1.8K / month \u00b7 \ud83d\udce6 5 \u00b7 \u23f1\ufe0f 17.11.2022):     <pre><code>pip install m3gnet\n</code></pre> e3nn-jax (\ud83e\udd4822 \u00b7  \u2b50 180) - jax library for E3 Equivariant Neural Networks. <code>Apache-2</code>  - [GitHub](https://github.com/e3nn/e3nn-jax) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 18 \u00b7 \ud83d\udce6 38 \u00b7 \ud83d\udccb 22 - 4% open \u00b7 \u23f1\ufe0f 28.09.2024):      <pre><code>git clone https://github.com/e3nn/e3nn-jax\n</code></pre> - [PyPi](https://pypi.org/project/e3nn-jax) (\ud83d\udce5 3.6K / month \u00b7 \ud83d\udce6 13 \u00b7 \u23f1\ufe0f 14.08.2024):     <pre><code>pip install e3nn-jax\n</code></pre> NVIDIA Deep Learning Examples for Tensor Cores (\ud83e\udd4821 \u00b7  \u2b50 13K) - State-of-the-Art Deep Learning scripts organized by models - easy to train and deploy with reproducible accuracy and.. <code>Custom</code> <code>educational</code> <code>drug-discovery</code>  - [GitHub](https://github.com/NVIDIA/DeepLearningExamples) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 3.2K \u00b7 \ud83d\udccb 910 - 37% open \u00b7 \u23f1\ufe0f 04.04.2024):      <pre><code>git clone https://github.com/NVIDIA/DeepLearningExamples\n</code></pre> ALIGNN (\ud83e\udd4821 \u00b7  \u2b50 220) - Atomistic Line Graph Neural Network https://scholar.google.com/citations?user=9Q-tNnwAAAAJ&amp;hl=en. <code>Custom</code>  - [GitHub](https://github.com/usnistgov/alignn) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 79 \u00b7 \ud83d\udce6 14 \u00b7 \ud83d\udccb 65 - 61% open \u00b7 \u23f1\ufe0f 09.09.2024):      <pre><code>git clone https://github.com/usnistgov/alignn\n</code></pre> - [PyPi](https://pypi.org/project/alignn) (\ud83d\udce5 3.3K / month \u00b7 \ud83d\udce6 6 \u00b7 \u23f1\ufe0f 09.09.2024):     <pre><code>pip install alignn\n</code></pre> DIG: Dive into Graphs (\ud83e\udd4820 \u00b7  \u2b50 1.9K \u00b7 \ud83d\udca4) - A library for graph deep learning research. <code>GPL-3.0</code>  - [GitHub](https://github.com/divelab/DIG) (\ud83d\udc68\u200d\ud83d\udcbb 50 \u00b7 \ud83d\udd00 280 \u00b7 \ud83d\udccb 210 - 16% open \u00b7 \u23f1\ufe0f 04.02.2024):      <pre><code>git clone https://github.com/divelab/DIG\n</code></pre> - [PyPi](https://pypi.org/project/dive-into-graphs) (\ud83d\udce5 580 / month \u00b7 \u23f1\ufe0f 27.06.2022):     <pre><code>pip install dive-into-graphs\n</code></pre> Uni-Mol (\ud83e\udd4818 \u00b7  \u2b50 680) - Official Repository for the Uni-Mol Series Methods. <code>MIT</code> <code>pretrained</code>  - [GitHub](https://github.com/deepmodeling/Uni-Mol) (\ud83d\udc68\u200d\ud83d\udcbb 17 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce5 15K \u00b7 \ud83d\udccb 160 - 41% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/deepmodeling/Uni-Mol\n</code></pre> kgcnn (\ud83e\udd4818 \u00b7  \u2b50 110) - Graph convolutions in Keras with TensorFlow, PyTorch or Jax. <code>MIT</code>  - [GitHub](https://github.com/aimat-lab/gcnn_keras) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 30 \u00b7 \ud83d\udce6 18 \u00b7 \ud83d\udccb 86 - 13% open \u00b7 \u23f1\ufe0f 06.05.2024):      <pre><code>git clone https://github.com/aimat-lab/gcnn_keras\n</code></pre> - [PyPi](https://pypi.org/project/kgcnn) (\ud83d\udce5 660 / month \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 27.02.2024):     <pre><code>pip install kgcnn\n</code></pre> matsciml (\ud83e\udd4817 \u00b7  \u2b50 140) - Open MatSci ML Toolkit is a framework for prototyping and scaling out deep learning models for materials discovery.. <code>MIT</code> <code>workflows</code> <code>benchmarking</code>  - [GitHub](https://github.com/IntelLabs/matsciml) (\ud83d\udc68\u200d\ud83d\udcbb 12 \u00b7 \ud83d\udd00 19 \u00b7 \ud83d\udccb 60 - 33% open \u00b7 \u23f1\ufe0f 01.10.2024):      <pre><code>git clone https://github.com/IntelLabs/matsciml\n</code></pre> escnn (\ud83e\udd4816 \u00b7  \u2b50 350) - Equivariant Steerable CNNs Library for Pytorch https://quva-lab.github.io/escnn/. <code>Custom</code>  - [GitHub](https://github.com/QUVA-Lab/escnn) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 44 \u00b7 \ud83d\udccb 75 - 50% open \u00b7 \u23f1\ufe0f 18.09.2024):      <pre><code>git clone https://github.com/QUVA-Lab/escnn\n</code></pre> - [PyPi](https://pypi.org/project/escnn) (\ud83d\udce5 1K / month \u00b7 \ud83d\udce6 6 \u00b7 \u23f1\ufe0f 01.04.2022):     <pre><code>pip install escnn\n</code></pre> Graphormer (\ud83e\udd4815 \u00b7  \u2b50 2.1K) - Graphormer is a general-purpose deep learning backbone for molecular modeling. <code>MIT</code> <code>transformer</code> <code>pretrained</code>  - [GitHub](https://github.com/microsoft/Graphormer) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 330 \u00b7 \ud83d\udccb 160 - 58% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/microsoft/Graphormer\n</code></pre> HydraGNN (\ud83e\udd4814 \u00b7  \u2b50 61) - Distributed PyTorch implementation of multi-headed graph convolutional neural networks. <code>BSD-3</code>  - [GitHub](https://github.com/ORNL/HydraGNN) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 26 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 49 - 34% open \u00b7 \u23f1\ufe0f 27.09.2024):      <pre><code>git clone https://github.com/ORNL/HydraGNN\n</code></pre> Compositionally-Restricted Attention-Based Network (CrabNet) (\ud83e\udd4813 \u00b7  \u2b50 12) - Predict materials properties using only the composition information!. <code>MIT</code>  - [GitHub](https://github.com/sparks-baird/CrabNet) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 5 \u00b7 \ud83d\udce6 13 \u00b7 \ud83d\udccb 18 - 83% open \u00b7 \u23f1\ufe0f 09.09.2024):      <pre><code>git clone https://github.com/sparks-baird/CrabNet\n</code></pre> - [PyPi](https://pypi.org/project/crabnet) (\ud83d\udce5 660 / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 10.01.2023):     <pre><code>pip install crabnet\n</code></pre> hippynn (\ud83e\udd4812 \u00b7  \u2b50 67) - python library for atomistic machine learning. <code>Custom</code> <code>workflows</code>  - [GitHub](https://github.com/lanl/hippynn) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 23 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 18 - 33% open \u00b7 \u23f1\ufe0f 27.09.2024):      <pre><code>git clone https://github.com/lanl/hippynn\n</code></pre> Atom2Vec (\ud83e\udd4810 \u00b7  \u2b50 35 \u00b7 \ud83d\udca4) - Atom2Vec: a simple way to describe atoms for machine learning. <code>MIT</code>  - [GitHub](https://github.com/idocx/Atom2Vec) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 9 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 3 - 66% open \u00b7 \u23f1\ufe0f 23.02.2024):      <pre><code>git clone https://github.com/idocx/Atom2Vec\n</code></pre> - [PyPi](https://pypi.org/project/atom2vec) (\ud83d\udce5 96 / month \u00b7 \u23f1\ufe0f 23.02.2024):     <pre><code>pip install atom2vec\n</code></pre> FAENet (\ud83e\udd4810 \u00b7  \u2b50 33 \u00b7 \ud83d\udca4) - Frame Averaging Equivariant GNN for materials modeling. <code>MIT</code>  - [GitHub](https://github.com/vict0rsch/faenet) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 2 \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 12.10.2023):      <pre><code>git clone https://github.com/vict0rsch/faenet\n</code></pre> - [PyPi](https://pypi.org/project/faenet) (\ud83d\udce5 120 / month \u00b7 \u23f1\ufe0f 14.09.2023):     <pre><code>pip install faenet\n</code></pre> ai4material_design (\ud83e\udd499 \u00b7  \u2b50 6 \u00b7 \ud83d\udca4) - Code for Kazeev, N., Al-Maeeni, A.R., Romanov, I. et al. Sparse representation for machine learning the properties of.. <code>Apache-2</code> <code>pretrained</code> <code>material-defect</code>  - [GitHub](https://github.com/HSE-LAMBDA/ai4material_design) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 3 \u00b7 \u23f1\ufe0f 21.11.2023):      <pre><code>git clone https://github.com/HSE-LAMBDA/ai4material_design\n</code></pre> Equiformer (\ud83e\udd498 \u00b7  \u2b50 200) - [ICLR 2023 Spotlight] Equiformer: Equivariant Graph Attention Transformer for 3D Atomistic Graphs. <code>MIT</code> <code>transformer</code>  - [GitHub](https://github.com/atomicarchitects/equiformer) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 37 \u00b7 \ud83d\udccb 14 - 42% open \u00b7 \u23f1\ufe0f 18.07.2024):      <pre><code>git clone https://github.com/atomicarchitects/equiformer\n</code></pre> EquiformerV2 (\ud83e\udd498 \u00b7  \u2b50 200) - [ICLR 2024] EquiformerV2: Improved Equivariant Transformer for Scaling to Higher-Degree Representations. <code>MIT</code>  - [GitHub](https://github.com/atomicarchitects/equiformer_v2) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 26 \u00b7 \ud83d\udccb 18 - 83% open \u00b7 \u23f1\ufe0f 16.07.2024):      <pre><code>git clone https://github.com/atomicarchitects/equiformer_v2\n</code></pre> graphite (\ud83e\udd498 \u00b7  \u2b50 58) - A repository for implementing graph network models based on atomic structures. <code>MIT</code>  - [GitHub](https://github.com/LLNL/graphite) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 9 \u00b7 \ud83d\udce6 11 \u00b7 \ud83d\udccb 4 - 75% open \u00b7 \u23f1\ufe0f 08.08.2024):      <pre><code>git clone https://github.com/llnl/graphite\n</code></pre> DeeperGATGNN (\ud83e\udd498 \u00b7  \u2b50 46 \u00b7 \ud83d\udca4) - Scalable graph neural networks for materials property prediction. <code>MIT</code>  - [GitHub](https://github.com/usccolumbia/deeperGATGNN) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 8 \u00b7 \ud83d\udccb 12 - 33% open \u00b7 \u23f1\ufe0f 19.01.2024):      <pre><code>git clone https://github.com/usccolumbia/deeperGATGNN\n</code></pre> T-e3nn (\ud83e\udd498 \u00b7  \u2b50 8) - Time-reversal Euclidean neural networks based on e3nn. <code>MIT</code> <code>magnetism</code>  - [GitHub](https://github.com/Hongyu-yu/T-e3nn) (\ud83d\udc68\u200d\ud83d\udcbb 26 \u00b7 \u23f1\ufe0f 29.09.2024):      <pre><code>git clone https://github.com/Hongyu-yu/T-e3nn\n</code></pre> Show 33 hidden projects...  - dgl-lifesci (\ud83e\udd4723 \u00b7  \u2b50 720 \u00b7 \ud83d\udc80) - Python package for graph neural networks in chemistry and biology. <code>Apache-2</code> - benchmarking-gnns (\ud83e\udd4814 \u00b7  \u2b50 2.5K \u00b7 \ud83d\udc80) - Repository for benchmarking graph neural networks. <code>MIT</code> <code>single-paper</code> <code>benchmarking</code> - Crystal Graph Convolutional Neural Networks (CGCNN) (\ud83e\udd4812 \u00b7  \u2b50 640 \u00b7 \ud83d\udc80) - Crystal graph convolutional neural networks for predicting material properties. <code>MIT</code> - Neural fingerprint (nfp) (\ud83e\udd4812 \u00b7  \u2b50 57 \u00b7 \ud83d\udc80) - Keras layers for end-to-end learning with rdkit and pymatgen. <code>Custom</code> - pretrained-gnns (\ud83e\udd4810 \u00b7  \u2b50 960 \u00b7 \ud83d\udc80) - Strategies for Pre-training Graph Neural Networks. <code>MIT</code> <code>pretrained</code> - GDC (\ud83e\udd4810 \u00b7  \u2b50 270 \u00b7 \ud83d\udc80) - Graph Diffusion Convolution, as proposed in Diffusion Improves Graph Learning (NeurIPS 2019). <code>MIT</code> <code>generative</code> - SE(3)-Transformers (\ud83e\udd499 \u00b7  \u2b50 490 \u00b7 \ud83d\udc80) - code for the SE3 Transformers paper: https://arxiv.org/abs/2006.10503. <code>MIT</code> <code>single-paper</code> <code>transformer</code> - GATGNN: Global Attention Graph Neural Network (\ud83e\udd499 \u00b7  \u2b50 69 \u00b7 \ud83d\udc80) - Pytorch Repository for our work: Graph convolutional neural networks with global attention for improved materials.. <code>MIT</code> - molecularGNN_smiles (\ud83e\udd498 \u00b7  \u2b50 290 \u00b7 \ud83d\udc80) - The code of a graph neural network (GNN) for molecules, which is based on learning representations of r-radius.. <code>Apache-2</code> - CGAT (\ud83e\udd498 \u00b7  \u2b50 25 \u00b7 \ud83d\udc80) - Crystal graph attention neural networks for materials prediction. <code>MIT</code> - UVVisML (\ud83e\udd498 \u00b7  \u2b50 22 \u00b7 \ud83d\udc80) - Predict optical properties of molecules with machine learning. <code>MIT</code> <code>optical-properties</code> <code>single-paper</code> <code>probabilistic</code> - tensorfieldnetworks (\ud83e\udd497 \u00b7  \u2b50 150 \u00b7 \ud83d\udc80) - Rotation- and translation-equivariant neural networks for 3D point clouds. <code>MIT</code> - DTNN (\ud83e\udd497 \u00b7  \u2b50 76 \u00b7 \ud83d\udc80) - Deep Tensor Neural Network. <code>MIT</code> - Cormorant (\ud83e\udd497 \u00b7  \u2b50 59 \u00b7 \ud83d\udc80) - Codebase for Cormorant Neural Networks. <code>Custom</code> - AdsorbML (\ud83e\udd497 \u00b7  \u2b50 36 \u00b7 \ud83d\udc80) -  <code>MIT</code> <code>surface-science</code> <code>single-paper</code> - escnn_jax (\ud83e\udd497 \u00b7  \u2b50 26 \u00b7 \ud83d\udc80) - Equivariant Steerable CNNs Library for Pytorch https://quva-lab.github.io/escnn/. <code>Custom</code> - ML4pXRDs (\ud83e\udd497 \u00b7 \ud83d\udc80) - Contains code to train neural networks based on simulated powder XRDs from synthetic crystals. <code>MIT</code> <code>XRD</code> <code>single-paper</code> - MACE-Layer (\ud83e\udd496 \u00b7  \u2b50 33 \u00b7 \ud83d\udc80) - Higher order equivariant graph neural networks for 3D point clouds. <code>MIT</code> - charge_transfer_nnp (\ud83e\udd496 \u00b7  \u2b50 29 \u00b7 \ud83d\udc80) - Graph neural network potential with charge transfer. <code>MIT</code> <code>electrostatics</code> - GLAMOUR (\ud83e\udd496 \u00b7  \u2b50 21 \u00b7 \ud83d\udc80) - Graph Learning over Macromolecule Representations. <code>MIT</code> <code>single-paper</code> - Autobahn (\ud83e\udd495 \u00b7  \u2b50 30 \u00b7 \ud83d\udc80) - Repository for Autobahn: Automorphism Based Graph Neural Networks. <code>MIT</code> - FieldSchNet (\ud83e\udd495 \u00b7  \u2b50 17 \u00b7 \ud83d\udc80) - Deep neural network for molecules in external fields. <code>MIT</code> - SCFNN (\ud83e\udd495 \u00b7  \u2b50 15 \u00b7 \ud83d\udc80) - Self-consistent determination of long-range electrostatics in neural network potentials. <code>MIT</code> <code>C++</code> <code>electrostatics</code> <code>single-paper</code> - CraTENet (\ud83e\udd495 \u00b7  \u2b50 13 \u00b7 \ud83d\udc80) - An attention-based deep neural network for thermoelectric transport properties. <code>MIT</code> <code>transport-phenomena</code> - EGraFFBench (\ud83e\udd495 \u00b7  \u2b50 8 \u00b7 \ud83d\udca4) -  <code>Unlicensed</code> <code>single-paper</code> <code>benchmarking</code> <code>ML-IAP</code> - Per-Site CGCNN (\ud83e\udd495 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Crystal graph convolutional neural networks for predicting material properties. <code>MIT</code> <code>pretrained</code> <code>single-paper</code> - Per-site PAiNN (\ud83e\udd495 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Fork of PaiNN for PerovskiteOrderingGCNNs. <code>MIT</code> <code>probabilistic</code> <code>pretrained</code> <code>single-paper</code> - Graph Transport Network (\ud83e\udd494 \u00b7  \u2b50 16 \u00b7 \ud83d\udc80) - Graph transport network (GTN), as proposed in Scalable Optimal Transport in High Dimensions for Graph Distances,.. <code>Custom</code> <code>transport-phenomena</code> - gkx: Green-Kubo Method in JAX (\ud83e\udd494 \u00b7  \u2b50 4 \u00b7 \ud83d\udca4) - Green-Kubo + JAX + MLPs = Anharmonic Thermal Conductivities Done Fast. <code>MIT</code> <code>transport-phenomena</code> - atom_by_atom (\ud83e\udd493 \u00b7  \u2b50 7 \u00b7 \ud83d\udca4) - Atom-by-atom design of metal oxide catalysts for the oxygen evolution reaction with Machine Learning. <code>Unlicensed</code> <code>surface-science</code> <code>single-paper</code> - Element encoder (\ud83e\udd493 \u00b7  \u2b50 6 \u00b7 \ud83d\udc80) - Autoencoder neural network to compress properties of atomic species into a vector representation. <code>GPL-3.0</code> <code>single-paper</code> - Point Edge Transformer (\ud83e\udd492) - Smooth, exact rotational symmetrization for deep learning on point clouds. <code>CC-BY-4.0</code> - SphericalNet (\ud83e\udd491 \u00b7  \u2b50 3 \u00b7 \ud83d\udc80) - Implementation of Clebsch-Gordan Networks (CGnet: https://arxiv.org/pdf/1806.09231.pdf) by GElib &amp; cnine libraries in.. <code>Unlicensed</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#universal-potentials","title":"Universal Potentials","text":"<p>Machine-learned interatomic potentials (ML-IAP) that have been trained on large, chemically and structural diverse datasets. For materials, this means e.g. datasets that include a majority of the periodic table.</p> <p>\ud83d\udd17\u00a0TeaNet  - Universal neural network interatomic potential inspired by iterative electronic relaxations.. <code>ML-IAP</code></p> <p>\ud83d\udd17\u00a0PreFerred Potential (PFP)  - Universal neural network potential for material discovery https://doi.org/10.1038/s41467-022-30687-9. <code>ML-IAP</code> <code>proprietary</code></p> <p>\ud83d\udd17\u00a0MatterSim  - A Deep Learning Atomistic Model Across Elements, Temperatures and Pressures https://doi.org/10.48550/arXiv.2405.04967. <code>ML-IAP</code> <code>active-learning</code> <code>proprietary</code></p> DPA-2 (\ud83e\udd4724 \u00b7  \u2b50 1.5K \u00b7 \ud83d\udcc9) - Towards a universal large atomic model for molecular and material simulation https://doi.org/10.48550/arXiv.2312.15492. <code>LGPL-3.0</code> <code>ML-IAP</code> <code>pretrained</code> <code>workflows</code> <code>datasets</code>  - [GitHub](https://github.com/deepmodeling/deepmd-kit) (\ud83d\udc68\u200d\ud83d\udcbb 69 \u00b7 \ud83d\udd00 500 \u00b7 \ud83d\udce5 40K \u00b7 \ud83d\udce6 16 \u00b7 \ud83d\udccb 790 - 12% open \u00b7 \u23f1\ufe0f 17.09.2024):      <pre><code>git clone https://github.com/deepmodeling/deepmd-kit\n</code></pre> CHGNet (\ud83e\udd4823 \u00b7  \u2b50 230) - Pretrained universal neural network potential for charge-informed atomistic modeling https://chgnet.lbl.gov. <code>Custom</code> <code>ML-IAP</code> <code>MD</code> <code>pretrained</code> <code>electrostatics</code> <code>magnetism</code> <code>structure-relaxation</code>  - [GitHub](https://github.com/CederGroupHub/chgnet) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 62 \u00b7 \ud83d\udce6 32 \u00b7 \ud83d\udccb 59 - 5% open \u00b7 \u23f1\ufe0f 16.09.2024):      <pre><code>git clone https://github.com/CederGroupHub/chgnet\n</code></pre> - [PyPi](https://pypi.org/project/chgnet) (\ud83d\udce5 30K / month \u00b7 \ud83d\udce6 21 \u00b7 \u23f1\ufe0f 16.09.2024):     <pre><code>pip install chgnet\n</code></pre> MACE-MP (\ud83e\udd4918 \u00b7  \u2b50 460) - Pretrained foundation models for materials chemistry. <code>MIT</code> <code>ML-IAP</code> <code>pretrained</code> <code>rep-learn</code> <code>MD</code>  - [GitHub](https://github.com/ACEsuit/mace-mp) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 170 \u00b7 \ud83d\udce5 28K \u00b7 \ud83d\udccb 9 - 22% open \u00b7 \u23f1\ufe0f 24.04.2024):      <pre><code>git clone https://github.com/ACEsuit/mace-mp\n</code></pre> - [PyPi](https://pypi.org/project/mace-torch) (\ud83d\udce5 11K / month \u00b7 \ud83d\udce6 14 \u00b7 \u23f1\ufe0f 16.07.2024):     <pre><code>pip install mace-torch\n</code></pre> SevenNet (\ud83e\udd4915 \u00b7  \u2b50 110) - SevenNet (Scalable EquiVariance Enabled Neural Network) is a graph neural network interatomic potential package that.. <code>GPL-3.0</code> <code>ML-IAP</code> <code>MD</code> <code>pretrained</code>  - [GitHub](https://github.com/MDIL-SNU/SevenNet) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 14 \u00b7 \ud83d\udce6 3 \u00b7 \ud83d\udccb 22 - 50% open \u00b7 \u23f1\ufe0f 18.09.2024):      <pre><code>git clone https://github.com/MDIL-SNU/SevenNet\n</code></pre> Orb Models (\ud83e\udd4914 \u00b7  \u2b50 160 \u00b7 \ud83d\udc23) - ORB forcefield models from Orbital Materials. <code>Custom</code> <code>ML-IAP</code> <code>pretrained</code>  - [GitHub](https://github.com/orbital-materials/orb-models) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 19 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 11 - 18% open \u00b7 \u23f1\ufe0f 02.10.2024):      <pre><code>git clone https://github.com/orbital-materials/orb-models\n</code></pre> - [PyPi](https://pypi.org/project/orb-models) (\ud83d\udce5 1.2K / month \u00b7 \u23f1\ufe0f 13.09.2024):     <pre><code>pip install orb-models\n</code></pre> Joint Multidomain Pre-Training (JMP) (\ud83e\udd495 \u00b7  \u2b50 38) - Code for From Molecules to Materials Pre-training Large Generalizable Models for Atomic Property Prediction. <code>CC-BY-NC-4.0</code> <code>pretrained</code> <code>ML-IAP</code> <code>general-tool</code>  - [GitHub](https://github.com/facebookresearch/JMP) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 6 \u00b7 \u23f1\ufe0f 07.05.2024):      <pre><code>git clone https://github.com/facebookresearch/JMP\n</code></pre> Show 1 hidden projects...  - M3GNet (\ud83e\udd4819 \u00b7  \u2b50 230 \u00b7 \ud83d\udc80) - Materials graph network with 3-body interactions featuring a DFT surrogate crystal relaxer and a state-of-the-art.. <code>BSD-3</code> <code>ML-IAP</code> <code>pretrained</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#unsupervised-learning","title":"Unsupervised Learning","text":"<p>Projects that focus on unsupervised learning (USL) for atomistic ML, such as dimensionality reduction, clustering and visualization.</p> DADApy (\ud83e\udd4719 \u00b7  \u2b50 100) - Distance-based Analysis of DAta-manifolds in python. <code>Apache-2</code>  - [GitHub](https://github.com/sissa-data-science/DADApy) (\ud83d\udc68\u200d\ud83d\udcbb 20 \u00b7 \ud83d\udd00 18 \u00b7 \ud83d\udce6 8 \u00b7 \ud83d\udccb 36 - 25% open \u00b7 \u23f1\ufe0f 16.09.2024):      <pre><code>git clone https://github.com/sissa-data-science/DADApy\n</code></pre> - [PyPi](https://pypi.org/project/dadapy) (\ud83d\udce5 200 / month \u00b7 \u23f1\ufe0f 02.07.2024):     <pre><code>pip install dadapy\n</code></pre> ASAP (\ud83e\udd4811 \u00b7  \u2b50 140) - ASAP is a package that can quickly analyze and visualize datasets of crystal or molecular structures. <code>MIT</code>  - [GitHub](https://github.com/BingqingCheng/ASAP) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 28 \u00b7 \ud83d\udce6 6 \u00b7 \ud83d\udccb 25 - 24% open \u00b7 \u23f1\ufe0f 27.06.2024):      <pre><code>git clone https://github.com/BingqingCheng/ASAP\n</code></pre> Show 5 hidden projects...  - Sketchmap (\ud83e\udd489 \u00b7  \u2b50 44 \u00b7 \ud83d\udc80) - Suite of programs to perform non-linear dimensionality reduction -- sketch-map in particular. <code>GPL-3.0</code> <code>C++</code> - Coarse-Graining-Auto-encoders (\ud83e\udd495 \u00b7  \u2b50 21 \u00b7 \ud83d\udc80) - Implementation of coarse-graining Autoencoders. <code>Unlicensed</code> <code>single-paper</code> - paper-ml-robustness-material-property (\ud83e\udd495 \u00b7  \u2b50 4 \u00b7 \ud83d\udc80) - A critical examination of robustness and generalizability of machine learning prediction of materials properties. <code>BSD-3</code> <code>datasets</code> <code>single-paper</code> - KmdPlus (\ud83e\udd494 \u00b7  \u2b50 3) - This module contains a class for treating kernel mean descriptor (KMD), and a function for generating descriptors with.. <code>MIT</code> - Descriptor Embedding and Clustering for Atomisitic-environment Framework (DECAF) ( \u2b50 2) - Provides a workflow to obtain clustering of local environments in dataset of structures. <code>Unlicensed</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#visualization","title":"Visualization","text":"<p>Projects that focus on visualization (viz.) for atomistic ML.</p> Crystal Toolkit (\ud83e\udd4724 \u00b7  \u2b50 150 \u00b7 \ud83d\udcc8) - Crystal Toolkit is a framework for building web apps for materials science and is currently powering the new Materials.. <code>MIT</code>  - [GitHub](https://github.com/materialsproject/crystaltoolkit) (\ud83d\udc68\u200d\ud83d\udcbb 28 \u00b7 \ud83d\udd00 57 \u00b7 \ud83d\udce6 38 \u00b7 \ud83d\udccb 110 - 47% open \u00b7 \u23f1\ufe0f 20.09.2024):      <pre><code>git clone https://github.com/materialsproject/crystaltoolkit\n</code></pre> - [PyPi](https://pypi.org/project/crystal-toolkit) (\ud83d\udce5 2K / month \u00b7 \ud83d\udce6 8 \u00b7 \u23f1\ufe0f 04.09.2024):     <pre><code>pip install crystal-toolkit\n</code></pre> pymatviz (\ud83e\udd4821 \u00b7  \u2b50 160) - A toolkit for visualizations in materials informatics. <code>MIT</code> <code>general-tool</code> <code>probabilistic</code>  - [GitHub](https://github.com/janosh/pymatviz) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 14 \u00b7 \ud83d\udce6 8 \u00b7 \ud83d\udccb 47 - 25% open \u00b7 \u23f1\ufe0f 03.10.2024):      <pre><code>git clone https://github.com/janosh/pymatviz\n</code></pre> - [PyPi](https://pypi.org/project/pymatviz) (\ud83d\udce5 3.5K / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 01.09.2024):     <pre><code>pip install pymatviz\n</code></pre> ZnDraw (\ud83e\udd4820 \u00b7  \u2b50 30 \u00b7 \ud83d\udcc8) - A powerful tool for visualizing, modifying, and analysing atomistic systems. <code>EPL-2.0</code> <code>MD</code> <code>generative</code> <code>JavaScript</code>  - [GitHub](https://github.com/zincware/ZnDraw) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 3 \u00b7 \ud83d\udce6 4 \u00b7 \ud83d\udccb 310 - 29% open \u00b7 \u23f1\ufe0f 17.09.2024):      <pre><code>git clone https://github.com/zincware/ZnDraw\n</code></pre> - [PyPi](https://pypi.org/project/zndraw) (\ud83d\udce5 1.2K / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 26.08.2024):     <pre><code>pip install zndraw\n</code></pre> Chemiscope (\ud83e\udd4918 \u00b7  \u2b50 130) - An interactive structure/property explorer for materials and molecules. <code>BSD-3</code> <code>JavaScript</code>  - [GitHub](https://github.com/lab-cosmo/chemiscope) (\ud83d\udc68\u200d\ud83d\udcbb 22 \u00b7 \ud83d\udd00 32 \u00b7 \ud83d\udce5 310 \u00b7 \ud83d\udce6 6 \u00b7 \ud83d\udccb 120 - 29% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/lab-cosmo/chemiscope\n</code></pre> - [npm](https://www.npmjs.com/package/chemiscope) (\ud83d\udce5 14 / month \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 15.03.2023):     <pre><code>npm install chemiscope\n</code></pre> Elementari (\ud83e\udd4911 \u00b7  \u2b50 140) - Interactive browser visualizations for materials science: periodic tables, 3d crystal structures, Bohr atoms, nuclei,.. <code>MIT</code> <code>JavaScript</code>  - [GitHub](https://github.com/janosh/elementari) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 12 \u00b7 \ud83d\udce6 3 \u00b7 \ud83d\udccb 7 - 28% open \u00b7 \u23f1\ufe0f 19.07.2024):      <pre><code>git clone https://github.com/janosh/elementari\n</code></pre> - [npm](https://www.npmjs.com/package/elementari) (\ud83d\udce5 120 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 15.01.2024):     <pre><code>npm install elementari\n</code></pre> Show 1 hidden projects...  - Atomvision (\ud83e\udd4912 \u00b7  \u2b50 29 \u00b7 \ud83d\udc80) - Deep learning framework for atomistic image data. <code>Custom</code> <code>computer-vision</code> <code>experimental-data</code> <code>rep-learn</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#wavefunction-methods-ml-wft","title":"Wavefunction methods (ML-WFT)","text":"<p>Projects and models that focus on quantities of wavefunction theory methods, such as Monte Carlo techniques like deep learning variational Monte Carlo (DL-VMC), quantum chemistry methods, etc.</p> DeepQMC (\ud83e\udd4720 \u00b7  \u2b50 350) - Deep learning quantum Monte Carlo for electrons in real space. <code>MIT</code>  - [GitHub](https://github.com/deepqmc/deepqmc) (\ud83d\udc68\u200d\ud83d\udcbb 13 \u00b7 \ud83d\udd00 59 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 46 - 8% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/deepqmc/deepqmc\n</code></pre> - [PyPi](https://pypi.org/project/deepqmc) (\ud83d\udce5 280 / month \u00b7 \u23f1\ufe0f 24.09.2024):     <pre><code>pip install deepqmc\n</code></pre> FermiNet (\ud83e\udd4815 \u00b7  \u2b50 720) - An implementation of the Fermionic Neural Network for ab-initio electronic structure calculations. <code>Apache-2</code> <code>transformer</code>  - [GitHub](https://github.com/google-deepmind/ferminet) (\ud83d\udc68\u200d\ud83d\udcbb 18 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udccb 50 - 2% open \u00b7 \u23f1\ufe0f 03.10.2024):      <pre><code>git clone https://github.com/google-deepmind/ferminet\n</code></pre> DeepErwin (\ud83e\udd498 \u00b7  \u2b50 48) - DeepErwin is a python 3.8+ package that implements and optimizes JAX 2.x wave function models for numerical solutions.. <code>Custom</code>  - [GitHub](https://github.com/mdsunivie/deeperwin) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 6 \u00b7 \ud83d\udce5 10 \u00b7 \u23f1\ufe0f 07.06.2024):      <pre><code>git clone https://github.com/mdsunivie/deeperwin\n</code></pre> - [PyPi](https://pypi.org/project/deeperwin) (\ud83d\udce5 110 / month \u00b7 \u23f1\ufe0f 14.12.2021):     <pre><code>pip install deeperwin\n</code></pre> Show 2 hidden projects...  - ACEpsi.jl (\ud83e\udd496 \u00b7  \u2b50 2 \u00b7 \ud83d\udca4) - ACE wave function parameterizations. <code>MIT</code> <code>rep-eng</code> <code>Julia</code> - SchNOrb (\ud83e\udd495 \u00b7  \u2b50 59 \u00b7 \ud83d\udc80) - Unifying machine learning and quantum chemistry with a deep neural network for molecular wavefunctions. <code>MIT</code> <p></p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#others","title":"Others","text":"Show 1 hidden projects..."},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#contribution","title":"Contribution","text":"<p>Contributions are encouraged and always welcome! If you like to add or update projects, choose one of the following ways:</p> <ul> <li>Open an issue by selecting one of the provided categories from the issue page and fill in the requested information.</li> <li>Modify the projects.yaml with your additions or changes, and submit a pull request. This can also be done directly via the Github UI.</li> </ul> <p>If you like to contribute to or share suggestions regarding the project metadata collection or markdown generation, please refer to the best-of-generator repository. If you like to create your own best-of list, we recommend to follow this guide.</p> <p>For more information on how to add or update projects, please read the contribution guidelines. By participating in this project, you agree to abide by its Code of Conduct.</p>"},{"location":"blog/2024/09/25/best-of-atomistic-machine-learning/#license","title":"License","text":""},{"location":"blog/2024/09/28/best-of-python-developer-tools/","title":"Best of Python Developer Tools","text":"Best-of Python Developer Tools      <p> \ud83c\udfc6\u00a0 A ranked list of awesome python developer tools and libraries. Updated weekly. </p> <p> </p> <p>This curated list contains 270 awesome open-source projects with a total of 960K stars grouped into 17 categories. All projects are ranked by a project-quality score, which is calculated based on various metrics automatically collected from GitHub and different package managers. If you like to add or update projects, feel free to open an issue, submit a pull request, or directly edit the projects.yaml. Contributions are very welcome!</p> <p>      \ud83e\uddd9\u200d\u2642\ufe0f\u00a0 Discover other best-of lists or create your own.     \ud83d\udceb\u00a0 Subscribe to our newsletter for updates and trending projects. </p>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#contents","title":"Contents","text":"<ul> <li>Linters &amp; Style Checkers 40 projects</li> <li>Type checkers 5 projects</li> <li>Code Formatters 7 projects</li> <li>Code Refactoring 18 projects</li> <li>Code Security 8 projects</li> <li>Virtual Environments 10 projects</li> <li>Dependency &amp; Package Managers 11 projects</li> <li>Code Metrics &amp; Complexity 6 projects</li> <li>Logging 21 projects</li> <li>Shell 2 projects</li> <li>Documentation 29 projects</li> <li>Debugging Tools 13 projects</li> <li>Testing Tools 43 projects</li> <li>Code Packaging 16 projects</li> <li>Build Tools 14 projects</li> <li>System Monitoring &amp; Profiling 18 projects</li> <li>AST Tools 6 projects</li> <li>Others 1 projects</li> </ul>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#explanation","title":"Explanation","text":"<ul> <li>\ud83e\udd47\ud83e\udd48\ud83e\udd49\u00a0 Combined project-quality score</li> <li>\u2b50\ufe0f\u00a0 Star count from GitHub</li> <li>\ud83d\udc23\u00a0 New project (less than 6 months old)</li> <li>\ud83d\udca4\u00a0 Inactive project (6 months no activity)</li> <li>\ud83d\udc80\u00a0 Dead project (12 months no activity)</li> <li>\ud83d\udcc8\ud83d\udcc9\u00a0 Project is trending up or down</li> <li>\u2795\u00a0 Project was recently added</li> <li>\u2757\ufe0f\u00a0 Warning (e.g. missing/risky license)</li> <li>\ud83d\udc68\u200d\ud83d\udcbb\u00a0 Contributors count from GitHub</li> <li>\ud83d\udd00\u00a0 Fork count from GitHub</li> <li>\ud83d\udccb\u00a0 Issue count from GitHub</li> <li>\u23f1\ufe0f\u00a0 Last update timestamp on package manager</li> <li>\ud83d\udce5\u00a0 Download count from package manager</li> <li>\ud83d\udce6\u00a0 Number of dependent projects</li> <li>\u00a0 Flake8 related project</li> <li>\u00a0 Pytest related project</li> <li>\u00a0 Pylint related project</li> <li>\u00a0 Sphinx related project</li> <li>\u00a0 MkDocs related project</li> </ul>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#linters-style-checkers","title":"Linters &amp; Style Checkers","text":"pylint (\ud83e\udd4743 \u00b7  \u2b50 5.2K) - Its not just a linter that annoys you!. <code>\u2757\ufe0fGPL-2.0</code>  - [GitHub](https://github.com/pylint-dev/pylint) (\ud83d\udc68\u200d\ud83d\udcbb 570 \u00b7 \ud83d\udd00 1.1K \u00b7 \ud83d\udce6 420K \u00b7 \ud83d\udccb 5.5K - 16% open \u00b7 \u23f1\ufe0f 27.05.2024):      <pre><code>git clone https://github.com/PyCQA/pylint\n</code></pre> - [PyPi](https://pypi.org/project/pylint) (\ud83d\udce5 24M / month \u00b7 \ud83d\udce6 8.1K \u00b7 \u23f1\ufe0f 20.05.2024):     <pre><code>pip install pylint\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pylint) (\ud83d\udce5 5M \u00b7 \u23f1\ufe0f 20.05.2024):     <pre><code>conda install -c conda-forge pylint\n</code></pre> ruff (\ud83e\udd4742 \u00b7  \u2b50 28K) - An extremely fast Python linter and code formatter, written in Rust. <code>MIT</code>  - [GitHub](https://github.com/astral-sh/ruff) (\ud83d\udc68\u200d\ud83d\udcbb 430 \u00b7 \ud83d\udd00 880 \u00b7 \ud83d\udce5 490K \u00b7 \ud83d\udce6 48K \u00b7 \ud83d\udccb 4.4K - 18% open \u00b7 \u23f1\ufe0f 30.05.2024):      <pre><code>git clone https://github.com/charliermarsh/ruff\n</code></pre> - [PyPi](https://pypi.org/project/ruff) (\ud83d\udce5 17M / month \u00b7 \ud83d\udce6 5.2K \u00b7 \u23f1\ufe0f 28.05.2024):     <pre><code>pip install ruff\n</code></pre> - [Conda](https://anaconda.org/conda-forge/ruff) (\ud83d\udce5 800K \u00b7 \u23f1\ufe0f 29.05.2024):     <pre><code>conda install -c conda-forge ruff\n</code></pre> flake8 (\ud83e\udd4741 \u00b7  \u2b50 3.3K) - Flake8 is a wrapper around these tools: PyFlakes; pycodestyle; Ned.. <code>MIT</code>  - [GitHub](https://github.com/PyCQA/flake8) (\ud83d\udc68\u200d\ud83d\udcbb 180 \u00b7 \ud83d\udd00 300 \u00b7 \ud83d\udce6 550K \u00b7 \ud83d\udccb 1.6K - 1% open \u00b7 \u23f1\ufe0f 15.04.2024):      <pre><code>git clone https://github.com/PyCQA/flake8\n</code></pre> - [PyPi](https://pypi.org/project/flake8) (\ud83d\udce5 28M / month \u00b7 \ud83d\udce6 20K \u00b7 \u23f1\ufe0f 05.01.2024):     <pre><code>pip install flake8\n</code></pre> - [Conda](https://anaconda.org/conda-forge/flake8) (\ud83d\udce5 7.3M \u00b7 \u23f1\ufe0f 05.01.2024):     <pre><code>conda install -c conda-forge flake8\n</code></pre> wemake-python-styleguide (\ud83e\udd4736 \u00b7  \u2b50 2.4K) - The strictest and most opinionated python linter ever!. <code>MIT</code>  - [GitHub](https://github.com/wemake-services/wemake-python-styleguide) (\ud83d\udc68\u200d\ud83d\udcbb 180 \u00b7 \ud83d\udd00 380 \u00b7 \ud83d\udce6 16K \u00b7 \ud83d\udccb 1.1K - 10% open \u00b7 \u23f1\ufe0f 30.05.2024):      <pre><code>git clone https://github.com/wemake-services/wemake-python-styleguide\n</code></pre> - [PyPi](https://pypi.org/project/wemake-python-styleguide) (\ud83d\udce5 160K / month \u00b7 \ud83d\udce6 53 \u00b7 \u23f1\ufe0f 26.03.2024):     <pre><code>pip install wemake-python-styleguide\n</code></pre> pyflakes (\ud83e\udd4736 \u00b7  \u2b50 1.3K) - A simple program which checks Python source files for errors. <code>MIT</code>  - [GitHub](https://github.com/PyCQA/pyflakes) (\ud83d\udc68\u200d\ud83d\udcbb 86 \u00b7 \ud83d\udd00 180 \u00b7 \ud83d\udce6 280K \u00b7 \ud83d\udccb 530 - 10% open \u00b7 \u23f1\ufe0f 07.03.2024):      <pre><code>git clone https://github.com/PyCQA/pyflakes\n</code></pre> - [PyPi](https://pypi.org/project/pyflakes) (\ud83d\udce5 31M / month \u00b7 \ud83d\udce6 1.1K \u00b7 \u23f1\ufe0f 05.01.2024):     <pre><code>pip install pyflakes\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pyflakes) (\ud83d\udce5 7.3M \u00b7 \u23f1\ufe0f 05.01.2024):     <pre><code>conda install -c conda-forge pyflakes\n</code></pre> parso (\ud83e\udd4736 \u00b7  \u2b50 580) - A Python Parser. <code>MIT</code>  - [GitHub](https://github.com/davidhalter/parso) (\ud83d\udc68\u200d\ud83d\udcbb 46 \u00b7 \ud83d\udd00 99 \u00b7 \ud83d\udce6 430K \u00b7 \ud83d\udccb 120 - 10% open \u00b7 \u23f1\ufe0f 21.04.2024):      <pre><code>git clone https://github.com/davidhalter/parso\n</code></pre> - [PyPi](https://pypi.org/project/parso) (\ud83d\udce5 38M / month \u00b7 \ud83d\udce6 710 \u00b7 \u23f1\ufe0f 05.04.2024):     <pre><code>pip install parso\n</code></pre> - [Conda](https://anaconda.org/conda-forge/parso) (\ud83d\udce5 19M \u00b7 \u23f1\ufe0f 05.04.2024):     <pre><code>conda install -c conda-forge parso\n</code></pre> pycodestyle (\ud83e\udd4834 \u00b7  \u2b50 5K) - Simple Python style checker in one Python file. <code>MIT</code>  - [GitHub](https://github.com/PyCQA/pycodestyle) (\ud83d\udc68\u200d\ud83d\udcbb 140 \u00b7 \ud83d\udd00 750 \u00b7 \ud83d\udce6 20 \u00b7 \ud83d\udccb 750 - 14% open \u00b7 \u23f1\ufe0f 10.04.2024):      <pre><code>git clone https://github.com/PyCQA/pycodestyle\n</code></pre> - [PyPi](https://pypi.org/project/pycodestyle) (\ud83d\udce5 39M / month \u00b7 \ud83d\udce6 1.9K \u00b7 \u23f1\ufe0f 12.10.2023):     <pre><code>pip install pycodestyle\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pycodestyle) (\ud83d\udce5 7.6M \u00b7 \u23f1\ufe0f 13.10.2023):     <pre><code>conda install -c conda-forge pycodestyle\n</code></pre> beartype (\ud83e\udd4832 \u00b7  \u2b50 2.5K) - Unbearably fast near-real-time hybrid runtime-static type-checking in.. <code>MIT</code>  - [GitHub](https://github.com/beartype/beartype) (\ud83d\udc68\u200d\ud83d\udcbb 22 \u00b7 \ud83d\udd00 49 \u00b7 \ud83d\udccb 310 - 21% open \u00b7 \u23f1\ufe0f 30.05.2024):      <pre><code>git clone https://github.com/beartype/beartype\n</code></pre> - [PyPi](https://pypi.org/project/beartype) (\ud83d\udce5 2.3M / month \u00b7 \ud83d\udce6 420 \u00b7 \u23f1\ufe0f 21.04.2024):     <pre><code>pip install beartype\n</code></pre> - [Conda](https://anaconda.org/conda-forge/beartype) (\ud83d\udce5 120K \u00b7 \u23f1\ufe0f 21.04.2024):     <pre><code>conda install -c conda-forge beartype\n</code></pre> pydocstyle (\ud83e\udd4832 \u00b7  \u2b50 1.1K) - docstring style checker. <code>MIT</code>  - [GitHub](https://github.com/PyCQA/pydocstyle) (\ud83d\udc68\u200d\ud83d\udcbb 92 \u00b7 \ud83d\udd00 190 \u00b7 \ud83d\udce5 75 \u00b7 \ud83d\udce6 65K \u00b7 \ud83d\udccb 350 - 35% open \u00b7 \u23f1\ufe0f 03.11.2023):      <pre><code>git clone https://github.com/PyCQA/pydocstyle\n</code></pre> - [PyPi](https://pypi.org/project/pydocstyle) (\ud83d\udce5 5.1M / month \u00b7 \ud83d\udce6 1.7K \u00b7 \u23f1\ufe0f 17.01.2023):     <pre><code>pip install pydocstyle\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pydocstyle) (\ud83d\udce5 1.9M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge pydocstyle\n</code></pre> flake8-bugbear (\ud83e\udd4831 \u00b7  \u2b50 1K) - A plugin for Flake8 finding likely bugs and design problems.. <code>MIT</code> <code></code>  - [GitHub](https://github.com/PyCQA/flake8-bugbear) (\ud83d\udc68\u200d\ud83d\udcbb 84 \u00b7 \ud83d\udd00 100 \u00b7 \ud83d\udce6 37K \u00b7 \ud83d\udccb 220 - 27% open \u00b7 \u23f1\ufe0f 29.04.2024):      <pre><code>git clone https://github.com/PyCQA/flake8-bugbear\n</code></pre> - [PyPi](https://pypi.org/project/flake8-bugbear) (\ud83d\udce5 2.9M / month \u00b7 \ud83d\udce6 1K \u00b7 \u23f1\ufe0f 26.04.2024):     <pre><code>pip install flake8-bugbear\n</code></pre> - [Conda](https://anaconda.org/conda-forge/flake8-bugbear) (\ud83d\udce5 780K \u00b7 \u23f1\ufe0f 26.04.2024):     <pre><code>conda install -c conda-forge flake8-bugbear\n</code></pre> pylint-django (\ud83e\udd4829 \u00b7  \u2b50 590) - Pylint plugin for improving code analysis for when.. <code>\u2757\ufe0fGPL-2.0</code> <code></code>  - [GitHub](https://github.com/pylint-dev/pylint-django) (\ud83d\udc68\u200d\ud83d\udcbb 71 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce5 280 \u00b7 \ud83d\udce6 29K \u00b7 \ud83d\udccb 230 - 26% open \u00b7 \u23f1\ufe0f 26.02.2024):      <pre><code>git clone https://github.com/PyCQA/pylint-django\n</code></pre> - [PyPi](https://pypi.org/project/pylint-django) (\ud83d\udce5 1.3M / month \u00b7 \ud83d\udce6 110 \u00b7 \u23f1\ufe0f 23.10.2023):     <pre><code>pip install pylint-django\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pylint-django) (\ud83d\udce5 190K \u00b7 \u23f1\ufe0f 09.01.2024):     <pre><code>conda install -c conda-forge pylint-django\n</code></pre> flake8-comprehensions (\ud83e\udd4829 \u00b7  \u2b50 460) - A flake8 plugin to help you write better.. <code>MIT</code> <code></code>  - [GitHub](https://github.com/adamchainz/flake8-comprehensions) (\ud83d\udc68\u200d\ud83d\udcbb 15 \u00b7 \ud83d\udd00 23 \u00b7 \ud83d\udce6 27K \u00b7 \ud83d\udccb 62 - 16% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/adamchainz/flake8-comprehensions\n</code></pre> - [PyPi](https://pypi.org/project/flake8-comprehensions) (\ud83d\udce5 1.1M / month \u00b7 \ud83d\udce6 650 \u00b7 \u23f1\ufe0f 10.07.2023):     <pre><code>pip install flake8-comprehensions\n</code></pre> - [Conda](https://anaconda.org/conda-forge/flake8-comprehensions) (\ud83d\udce5 780K \u00b7 \u23f1\ufe0f 17.07.2023):     <pre><code>conda install -c conda-forge flake8-comprehensions\n</code></pre> flake8-quotes (\ud83e\udd4829 \u00b7  \u2b50 180) - Flake8 extension for checking quotes in python. <code>MIT</code> <code></code>  - [GitHub](https://github.com/zheller/flake8-quotes) (\ud83d\udc68\u200d\ud83d\udcbb 33 \u00b7 \ud83d\udd00 37 \u00b7 \ud83d\udce6 22K \u00b7 \ud83d\udccb 54 - 16% open \u00b7 \u23f1\ufe0f 10.02.2024):      <pre><code>git clone https://github.com/zheller/flake8-quotes\n</code></pre> - [PyPi](https://pypi.org/project/flake8-quotes) (\ud83d\udce5 650K / month \u00b7 \ud83d\udce6 420 \u00b7 \u23f1\ufe0f 10.02.2024):     <pre><code>pip install flake8-quotes\n</code></pre> - [Conda](https://anaconda.org/conda-forge/flake8-quotes) (\ud83d\udce5 690K \u00b7 \u23f1\ufe0f 10.02.2024):     <pre><code>conda install -c conda-forge flake8-quotes\n</code></pre> mypy-protobuf (\ud83e\udd4828 \u00b7  \u2b50 630) - open source tools to generate mypy stubs from protobufs. <code>Apache-2</code>  - [GitHub](https://github.com/nipunn1313/mypy-protobuf) (\ud83d\udc68\u200d\ud83d\udcbb 38 \u00b7 \ud83d\udd00 76 \u00b7 \ud83d\udccb 130 - 11% open \u00b7 \u23f1\ufe0f 25.04.2024):      <pre><code>git clone https://github.com/dropbox/mypy-protobuf\n</code></pre> - [PyPi](https://pypi.org/project/mypy-protobuf) (\ud83d\udce5 3.3M / month \u00b7 \ud83d\udce6 180 \u00b7 \u23f1\ufe0f 01.04.2024):     <pre><code>pip install mypy-protobuf\n</code></pre> - [Conda](https://anaconda.org/conda-forge/mypy-protobuf) (\ud83d\udce5 130K \u00b7 \u23f1\ufe0f 20.08.2023):     <pre><code>conda install -c conda-forge mypy-protobuf\n</code></pre> flake8-eradicate (\ud83e\udd4828 \u00b7  \u2b50 310) - Flake8 plugin to find commented out or dead code. <code>MIT</code> <code></code>  - [GitHub](https://github.com/wemake-services/flake8-eradicate) (\ud83d\udc68\u200d\ud83d\udcbb 17 \u00b7 \ud83d\udd00 13 \u00b7 \ud83d\udce6 19K \u00b7 \ud83d\udccb 40 - 22% open \u00b7 \u23f1\ufe0f 21.05.2024):      <pre><code>git clone https://github.com/wemake-services/flake8-eradicate\n</code></pre> - [PyPi](https://pypi.org/project/flake8-eradicate) (\ud83d\udce5 630K / month \u00b7 \ud83d\udce6 160 \u00b7 \u23f1\ufe0f 31.05.2023):     <pre><code>pip install flake8-eradicate\n</code></pre> - [Conda](https://anaconda.org/conda-forge/flake8-eradicate) (\ud83d\udce5 15K \u00b7 \u23f1\ufe0f 01.06.2023):     <pre><code>conda install -c conda-forge flake8-eradicate\n</code></pre> hacking (\ud83e\udd4828 \u00b7  \u2b50 240) - OpenStack Hacking Style Checks. Mirror of code maintained at.. <code>Apache-2</code> <code></code>  - [GitHub](https://github.com/openstack/hacking) (\ud83d\udc68\u200d\ud83d\udcbb 190 \u00b7 \ud83d\udd00 70 \u00b7 \ud83d\udce6 7.3K \u00b7 \u23f1\ufe0f 31.01.2024):      <pre><code>git clone https://github.com/openstack/hacking\n</code></pre> - [PyPi](https://pypi.org/project/hacking) (\ud83d\udce5 98K / month \u00b7 \ud83d\udce6 87 \u00b7 \u23f1\ufe0f 08.12.2023):     <pre><code>pip install hacking\n</code></pre> flake8-commas (\ud83e\udd4828 \u00b7  \u2b50 130) - Flake8 extension for enforcing trailing commas in python. <code>MIT</code> <code></code>  - [GitHub](https://github.com/PyCQA/flake8-commas) (\ud83d\udc68\u200d\ud83d\udcbb 13 \u00b7 \ud83d\udd00 32 \u00b7 \ud83d\udce6 18K \u00b7 \ud83d\udccb 31 - 9% open \u00b7 \u23f1\ufe0f 16.05.2024):      <pre><code>git clone https://github.com/PyCQA/flake8-commas\n</code></pre> - [PyPi](https://pypi.org/project/flake8-commas) (\ud83d\udce5 380K / month \u00b7 \ud83d\udce6 210 \u00b7 \u23f1\ufe0f 16.05.2024):     <pre><code>pip install flake8-commas\n</code></pre> flake8-isort (\ud83e\udd4927 \u00b7  \u2b50 170) - flake8 plugin that integrates isort. <code>\u2757\ufe0fGPL-2.0</code> <code></code>  - [GitHub](https://github.com/gforcada/flake8-isort) (\ud83d\udc68\u200d\ud83d\udcbb 38 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce6 26K \u00b7 \ud83d\udccb 57 - 1% open \u00b7 \u23f1\ufe0f 03.11.2023):      <pre><code>git clone https://github.com/gforcada/flake8-isort\n</code></pre> - [PyPi](https://pypi.org/project/flake8-isort) (\ud83d\udce5 1.1M / month \u00b7 \ud83d\udce6 520 \u00b7 \u23f1\ufe0f 03.11.2023):     <pre><code>pip install flake8-isort\n</code></pre> - [Conda](https://anaconda.org/conda-forge/flake8-isort) (\ud83d\udce5 61K \u00b7 \u23f1\ufe0f 03.11.2023):     <pre><code>conda install -c conda-forge flake8-isort\n</code></pre> flake8-builtins (\ud83e\udd4927 \u00b7  \u2b50 110) - Check for python builtins being used as variables or.. <code>\u2757\ufe0fGPL-2.0</code> <code></code>  - [GitHub](https://github.com/gforcada/flake8-builtins) (\ud83d\udc68\u200d\ud83d\udcbb 20 \u00b7 \ud83d\udd00 23 \u00b7 \ud83d\udce6 10K \u00b7 \ud83d\udccb 50 - 4% open \u00b7 \u23f1\ufe0f 09.04.2024):      <pre><code>git clone https://github.com/gforcada/flake8-builtins\n</code></pre> - [PyPi](https://pypi.org/project/flake8-builtins) (\ud83d\udce5 860K / month \u00b7 \ud83d\udce6 480 \u00b7 \u23f1\ufe0f 09.04.2024):     <pre><code>pip install flake8-builtins\n</code></pre> - [Conda](https://anaconda.org/conda-forge/flake8-builtins) (\ud83d\udce5 250K \u00b7 \u23f1\ufe0f 09.04.2024):     <pre><code>conda install -c conda-forge flake8-builtins\n</code></pre> nitpick (\ud83e\udd4926 \u00b7  \u2b50 380) - Enforce the same settings on multiple projects. <code>MIT</code> <code></code>  - [GitHub](https://github.com/andreoliwa/nitpick) (\ud83d\udc68\u200d\ud83d\udcbb 16 \u00b7 \ud83d\udd00 23 \u00b7 \ud83d\udce5 5 \u00b7 \ud83d\udce6 1.3K \u00b7 \ud83d\udccb 130 - 38% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/andreoliwa/nitpick\n</code></pre> - [PyPi](https://pypi.org/project/nitpick) (\ud83d\udce5 15K / month \u00b7 \ud83d\udce6 26 \u00b7 \u23f1\ufe0f 31.12.2023):     <pre><code>pip install nitpick\n</code></pre> check-manifest (\ud83e\udd4926 \u00b7  \u2b50 280) - Tool to check the completeness of MANIFEST.in for Python packages. <code>MIT</code>  - [GitHub](https://github.com/mgedmin/check-manifest) (\ud83d\udc68\u200d\ud83d\udcbb 22 \u00b7 \ud83d\udd00 37 \u00b7 \ud83d\udce6 11K \u00b7 \ud83d\udccb 98 - 21% open \u00b7 \u23f1\ufe0f 03.05.2024):      <pre><code>git clone https://github.com/mgedmin/check-manifest\n</code></pre> - [PyPi](https://pypi.org/project/check-manifest) (\ud83d\udce5 360K / month \u00b7 \ud83d\udce6 4.3K \u00b7 \u23f1\ufe0f 05.12.2022):     <pre><code>pip install check-manifest\n</code></pre> - [Conda](https://anaconda.org/conda-forge/check-manifest) (\ud83d\udce5 120K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge check-manifest\n</code></pre> flake8-black (\ud83e\udd4926 \u00b7  \u2b50 160) - flake8 plugin to run black for checking Python coding style. <code>MIT</code> <code></code>  - [GitHub](https://github.com/peterjc/flake8-black) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 10 \u00b7 \ud83d\udce6 7.8K \u00b7 \ud83d\udccb 29 - 10% open \u00b7 \u23f1\ufe0f 14.05.2024):      <pre><code>git clone https://github.com/peterjc/flake8-black\n</code></pre> - [PyPi](https://pypi.org/project/flake8-black) (\ud83d\udce5 860K / month \u00b7 \ud83d\udce6 480 \u00b7 \u23f1\ufe0f 20.12.2022):     <pre><code>pip install flake8-black\n</code></pre> - [Conda](https://anaconda.org/conda-forge/flake8-black) (\ud83d\udce5 460K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge flake8-black\n</code></pre> flake8-import-order (\ud83e\udd4924 \u00b7  \u2b50 280 \u00b7 \ud83d\udca4) - Flake8 plugin that checks import order against.. <code>\u2757\ufe0fLGPL-3.0</code> <code></code>  - [GitHub](https://github.com/PyCQA/flake8-import-order) (\ud83d\udc68\u200d\ud83d\udcbb 46 \u00b7 \ud83d\udd00 72 \u00b7 \ud83d\udccb 100 - 12% open \u00b7 \u23f1\ufe0f 13.09.2023):      <pre><code>git clone https://github.com/PyCQA/flake8-import-order\n</code></pre> - [PyPi](https://pypi.org/project/flake8-import-order) (\ud83d\udce5 610K / month \u00b7 \ud83d\udce6 550 \u00b7 \u23f1\ufe0f 26.11.2022):     <pre><code>pip install flake8-import-order\n</code></pre> - [Conda](https://anaconda.org/conda-forge/flake8-import-order) (\ud83d\udce5 250K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge flake8-import-order\n</code></pre> pandas-vet (\ud83e\udd4921 \u00b7  \u2b50 160 \u00b7 \ud83d\udca4) - A plugin for Flake8 that checks pandas code. <code>MIT</code> <code></code>  - [GitHub](https://github.com/deppen8/pandas-vet) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 18 \u00b7 \ud83d\udce5 73 \u00b7 \ud83d\udce6 450 \u00b7 \ud83d\udccb 53 - 22% open \u00b7 \u23f1\ufe0f 11.08.2023):      <pre><code>git clone https://github.com/deppen8/pandas-vet\n</code></pre> - [PyPi](https://pypi.org/project/pandas-vet) (\ud83d\udce5 44K / month \u00b7 \ud83d\udce6 37 \u00b7 \u23f1\ufe0f 11.08.2023):     <pre><code>pip install pandas-vet\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pandas-vet) (\ud83d\udce5 18K \u00b7 \u23f1\ufe0f 11.08.2023):     <pre><code>conda install -c conda-forge pandas-vet\n</code></pre> flake8-simplify (\ud83e\udd4920 \u00b7  \u2b50 180) - A flake8 plugin that helps you to simplify code. <code>MIT</code>  - [GitHub](https://github.com/MartinThoma/flake8-simplify) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 19 \u00b7 \ud83d\udccb 120 - 41% open \u00b7 \u23f1\ufe0f 25.12.2023):      <pre><code>git clone https://github.com/MartinThoma/flake8-simplify\n</code></pre> - [PyPi](https://pypi.org/project/flake8-simplify) (\ud83d\udce5 350K / month \u00b7 \ud83d\udce6 86 \u00b7 \u23f1\ufe0f 23.09.2023):     <pre><code>pip install flake8-simplify\n</code></pre> - [Conda](https://anaconda.org/conda-forge/flake8-simplify) (\ud83d\udce5 39K \u00b7 \u23f1\ufe0f 26.09.2023):     <pre><code>conda install -c conda-forge flake8-simplify\n</code></pre> bellybutton (\ud83e\udd4917 \u00b7  \u2b50 270 \u00b7 \ud83d\udca4) - Custom Python linting through AST expressions. <code>MIT</code>  - [GitHub](https://github.com/hchasestevens/bellybutton) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 15 \u00b7 \ud83d\udce6 46 \u00b7 \ud83d\udccb 17 - 64% open \u00b7 \u23f1\ufe0f 27.07.2023):      <pre><code>git clone https://github.com/hchasestevens/bellybutton\n</code></pre> - [PyPi](https://pypi.org/project/bellybutton) (\ud83d\udce5 2K / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 27.07.2023):     <pre><code>pip install bellybutton\n</code></pre> imhotep (\ud83e\udd4917 \u00b7  \u2b50 220 \u00b7 \ud83d\udca4) - A static-analysis bot for Github. <code>MIT</code>  - [GitHub](https://github.com/justinabrahms/imhotep) (\ud83d\udc68\u200d\ud83d\udcbb 17 \u00b7 \ud83d\udd00 36 \u00b7 \ud83d\udce6 12 \u00b7 \ud83d\udccb 46 - 43% open \u00b7 \u23f1\ufe0f 17.06.2023):      <pre><code>git clone https://github.com/justinabrahms/imhotep\n</code></pre> - [PyPi](https://pypi.org/project/imhotep) (\ud83d\udce5 59 / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 20.02.2022):     <pre><code>pip install imhotep\n</code></pre> Show 13 hidden projects...  - pep8-naming (\ud83e\udd4830 \u00b7  \u2b50 490) - Naming Convention checker for Python. <code>\u2757\ufe0fSaxpath</code> - darglint (\ud83e\udd4828 \u00b7  \u2b50 480 \u00b7 \ud83d\udc80) - A python documentation linter which checks that the docstring.. <code>MIT</code> - coala (\ud83e\udd4927 \u00b7  \u2b50 3.5K \u00b7 \ud83d\udc80) - coala provides a unified command-line interface for linting and.. <code>\u2757\ufe0fAGPL-3.0</code> - pylama (\ud83e\udd4926 \u00b7  \u2b50 1K \u00b7 \ud83d\udc80) - Code audit tool for python. <code>MIT</code> - data-science-types (\ud83e\udd4924 \u00b7  \u2b50 200 \u00b7 \ud83d\udc80) - Mypy stubs, i.e., type information, for numpy, pandas.. <code>Apache-2</code> - Fixit (\ud83e\udd4923 \u00b7  \u2b50 650) - Advanced Python linting framework with auto-fixes and hierarchical.. <code>\u2757Unlicensed</code> - flake8-bandit (\ud83e\udd4921 \u00b7  \u2b50 110 \u00b7 \ud83d\udc80) - Automated security testing using bandit and flake8. <code>MIT</code> <code></code> - flakehell (\ud83e\udd4919 \u00b7  \u2b50 230 \u00b7 \ud83d\udc80) - Flake8 wrapper to make it nice, legacy-friendly, configurable. <code>MIT</code> <code></code> - flake8-mypy (\ud83e\udd4919 \u00b7  \u2b50 100 \u00b7 \ud83d\udc80) - A plugin for flake8 integrating Mypy. <code>MIT</code> <code></code> - pylint-flask (\ud83e\udd4919 \u00b7  \u2b50 64 \u00b7 \ud83d\udc80) - A Pylint plugin to analyze Flask applications. <code>\u2757\ufe0fGPL-2.0</code> <code></code> - pycycle (\ud83e\udd4916 \u00b7  \u2b50 330 \u00b7 \ud83d\udc80) - Tool for pinpointing circular imports in Python. Find cyclic imports.. <code>MIT</code> - yala (\ud83e\udd4915 \u00b7  \u2b50 14 \u00b7 \ud83d\udc80) - Yet Another Linter Aggregator. <code>MIT</code> <code></code> <code></code> - linty_fresh (\ud83e\udd4912 \u00b7  \u2b50 180 \u00b7 \ud83d\udc80) - Surface lint errors during code review. <code>Apache-2</code> <code></code> <code>mypy</code>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#type-checkers","title":"Type checkers","text":"mypy (\ud83e\udd4746 \u00b7  \u2b50 18K) - Optional static typing for Python. <code>MIT</code>  - [GitHub](https://github.com/python/mypy) (\ud83d\udc68\u200d\ud83d\udcbb 720 \u00b7 \ud83d\udd00 2.7K \u00b7 \ud83d\udce6 240K \u00b7 \ud83d\udccb 10K - 27% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/python/mypy\n</code></pre> - [PyPi](https://pypi.org/project/mypy) (\ud83d\udce5 26M / month \u00b7 \ud83d\udce6 14K \u00b7 \u23f1\ufe0f 24.04.2024):     <pre><code>pip install mypy\n</code></pre> - [Conda](https://anaconda.org/conda-forge/mypy) (\ud83d\udce5 4M \u00b7 \u23f1\ufe0f 25.04.2024):     <pre><code>conda install -c conda-forge mypy\n</code></pre> pyright (\ud83e\udd4839 \u00b7  \u2b50 12K) - Static Type Checker for Python. <code>MIT</code>  - [GitHub](https://github.com/microsoft/pyright) (\ud83d\udc68\u200d\ud83d\udcbb 110 \u00b7 \ud83d\udd00 1.3K \u00b7 \ud83d\udce5 2.5K \u00b7 \ud83d\udce6 860 \u00b7 \ud83d\udccb 5.6K - 0% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/Microsoft/pyright\n</code></pre> - [npm](https://www.npmjs.com/package/pyright) (\ud83d\udce5 1.5M / month \u00b7 \ud83d\udce6 15 \u00b7 \u23f1\ufe0f 29.05.2024):     <pre><code>npm install pyright\n</code></pre> pytype (\ud83e\udd4936 \u00b7  \u2b50 4.6K) - A static type analyzer for Python code. <code>Apache-2</code>  - [GitHub](https://github.com/google/pytype) (\ud83d\udc68\u200d\ud83d\udcbb 100 \u00b7 \ud83d\udd00 270 \u00b7 \ud83d\udce6 3.6K \u00b7 \ud83d\udccb 700 - 22% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/google/pytype\n</code></pre> - [PyPi](https://pypi.org/project/pytype) (\ud83d\udce5 560K / month \u00b7 \ud83d\udce6 220 \u00b7 \u23f1\ufe0f 12.04.2024):     <pre><code>pip install pytype\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytype) (\ud83d\udce5 210K \u00b7 \u23f1\ufe0f 10.02.2024):     <pre><code>conda install -c conda-forge pytype\n</code></pre> pyre-check (\ud83e\udd4935 \u00b7  \u2b50 6.7K) - Performant type-checking for python. <code>MIT</code>  - [GitHub](https://github.com/facebook/pyre-check) (\ud83d\udc68\u200d\ud83d\udcbb 260 \u00b7 \ud83d\udd00 430 \u00b7 \ud83d\udce6 21 \u00b7 \ud83d\udccb 420 - 36% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/facebook/pyre-check\n</code></pre> - [PyPi](https://pypi.org/project/pyre-check) (\ud83d\udce5 78K / month \u00b7 \ud83d\udce6 55 \u00b7 \u23f1\ufe0f 10.05.2024):     <pre><code>pip install pyre-check\n</code></pre> typeguard (\ud83e\udd4935 \u00b7  \u2b50 1.5K) - Run-time type checker for Python. <code>MIT</code>  - [GitHub](https://github.com/agronholm/typeguard) (\ud83d\udc68\u200d\ud83d\udcbb 35 \u00b7 \ud83d\udd00 100 \u00b7 \ud83d\udce6 24K \u00b7 \ud83d\udccb 320 - 6% open \u00b7 \u23f1\ufe0f 27.05.2024):      <pre><code>git clone https://github.com/agronholm/typeguard\n</code></pre> - [PyPi](https://pypi.org/project/typeguard) (\ud83d\udce5 22M / month \u00b7 \ud83d\udce6 2.5K \u00b7 \u23f1\ufe0f 27.05.2024):     <pre><code>pip install typeguard\n</code></pre> - [Conda](https://anaconda.org/conda-forge/typeguard) (\ud83d\udce5 570K \u00b7 \u23f1\ufe0f 24.03.2024):     <pre><code>conda install -c conda-forge typeguard\n</code></pre>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#code-formatters","title":"Code Formatters","text":"black (\ud83e\udd4746 \u00b7  \u2b50 38K) - The uncompromising Python code formatter. <code>MIT</code>  - [GitHub](https://github.com/psf/black) (\ud83d\udc68\u200d\ud83d\udcbb 450 \u00b7 \ud83d\udd00 2.4K \u00b7 \ud83d\udce5 89K \u00b7 \ud83d\udce6 500K \u00b7 \ud83d\udccb 2.6K - 14% open \u00b7 \u23f1\ufe0f 16.05.2024):      <pre><code>git clone https://github.com/psf/black\n</code></pre> - [PyPi](https://pypi.org/project/black) (\ud83d\udce5 39M / month \u00b7 \ud83d\udce6 21K \u00b7 \u23f1\ufe0f 26.04.2024):     <pre><code>pip install black\n</code></pre> - [Conda](https://anaconda.org/conda-forge/black) (\ud83d\udce5 10M \u00b7 \u23f1\ufe0f 26.04.2024):     <pre><code>conda install -c conda-forge black\n</code></pre> isort (\ud83e\udd4840 \u00b7  \u2b50 6.3K) - A Python utility / library to sort imports. <code>MIT</code>  - [GitHub](https://github.com/PyCQA/isort) (\ud83d\udc68\u200d\ud83d\udcbb 290 \u00b7 \ud83d\udd00 560 \u00b7 \ud83d\udce6 470K \u00b7 \ud83d\udccb 1.3K - 17% open \u00b7 \u23f1\ufe0f 15.01.2024):      <pre><code>git clone https://github.com/PyCQA/isort\n</code></pre> - [PyPi](https://pypi.org/project/isort) (\ud83d\udce5 39M / month \u00b7 \ud83d\udce6 12K \u00b7 \u23f1\ufe0f 13.12.2023):     <pre><code>pip install isort\n</code></pre> - [Conda](https://anaconda.org/conda-forge/isort) (\ud83d\udce5 5.9M \u00b7 \u23f1\ufe0f 14.12.2023):     <pre><code>conda install -c conda-forge isort\n</code></pre> yapf (\ud83e\udd4839 \u00b7  \u2b50 14K) - A formatter for Python files. <code>Apache-2</code>  - [GitHub](https://github.com/google/yapf) (\ud83d\udc68\u200d\ud83d\udcbb 150 \u00b7 \ud83d\udd00 890 \u00b7 \ud83d\udce6 94K \u00b7 \ud83d\udccb 860 - 45% open \u00b7 \u23f1\ufe0f 01.04.2024):      <pre><code>git clone https://github.com/google/yapf\n</code></pre> - [PyPi](https://pypi.org/project/yapf) (\ud83d\udce5 5.9M / month \u00b7 \ud83d\udce6 1.2K \u00b7 \u23f1\ufe0f 22.09.2023):     <pre><code>pip install yapf\n</code></pre> - [Conda](https://anaconda.org/conda-forge/yapf) (\ud83d\udce5 1.8M \u00b7 \u23f1\ufe0f 26.07.2023):     <pre><code>conda install -c conda-forge yapf\n</code></pre> autopep8 (\ud83e\udd4839 \u00b7  \u2b50 4.5K) - A tool that automatically formats Python code to conform to the PEP 8.. <code>MIT</code>  - [GitHub](https://github.com/hhatto/autopep8) (\ud83d\udc68\u200d\ud83d\udcbb 63 \u00b7 \ud83d\udd00 290 \u00b7 \ud83d\udce6 210K \u00b7 \ud83d\udccb 500 - 23% open \u00b7 \u23f1\ufe0f 30.05.2024):      <pre><code>git clone https://github.com/hhatto/autopep8\n</code></pre> - [PyPi](https://pypi.org/project/autopep8) (\ud83d\udce5 5M / month \u00b7 \ud83d\udce6 1.5K \u00b7 \u23f1\ufe0f 30.05.2024):     <pre><code>pip install autopep8\n</code></pre> - [Conda](https://anaconda.org/conda-forge/autopep8) (\ud83d\udce5 1.5M \u00b7 \u23f1\ufe0f 29.05.2024):     <pre><code>conda install -c conda-forge autopep8\n</code></pre> docformatter (\ud83e\udd4927 \u00b7  \u2b50 520 \u00b7 \ud83d\udca4) - Formats docstrings to follow PEP 257. <code>MIT</code>  - [GitHub](https://github.com/PyCQA/docformatter) (\ud83d\udc68\u200d\ud83d\udcbb 30 \u00b7 \ud83d\udd00 59 \u00b7 \ud83d\udce5 17 \u00b7 \ud83d\udce6 3.5K \u00b7 \ud83d\udccb 150 - 16% open \u00b7 \u23f1\ufe0f 15.10.2023):      <pre><code>git clone https://github.com/myint/docformatter\n</code></pre> - [PyPi](https://pypi.org/project/docformatter) (\ud83d\udce5 570K / month \u00b7 \ud83d\udce6 220 \u00b7 \u23f1\ufe0f 12.07.2023):     <pre><code>pip install docformatter\n</code></pre> - [Conda](https://anaconda.org/conda-forge/docformatter) (\ud83d\udce5 130K \u00b7 \u23f1\ufe0f 18.07.2023):     <pre><code>conda install -c conda-forge docformatter\n</code></pre> autoimport (\ud83e\udd4918 \u00b7  \u2b50 88) - Autoimport automatically fixes wrong import statements. <code>\u2757\ufe0fGPL-3.0</code>  - [GitHub](https://github.com/lyz-code/autoimport) (\ud83d\udc68\u200d\ud83d\udcbb 16 \u00b7 \ud83d\udd00 20 \u00b7 \ud83d\udce6 130 \u00b7 \ud83d\udccb 47 - 29% open \u00b7 \u23f1\ufe0f 10.05.2024):      <pre><code>git clone https://github.com/lyz-code/autoimport\n</code></pre> - [PyPi](https://pypi.org/project/autoimport) (\ud83d\udce5 4K / month \u00b7 \ud83d\udce6 12 \u00b7 \u23f1\ufe0f 10.05.2024):     <pre><code>pip install autoimport\n</code></pre> Show 1 hidden projects...  - pyformat (\ud83e\udd4919 \u00b7  \u2b50 95) - Formats Python code to follow a consistent style. <code>\u2757\ufe0fSaxpath</code>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#code-refactoring","title":"Code Refactoring","text":"jedi (\ud83e\udd4741 \u00b7  \u2b50 5.7K) - Awesome autocompletion, static analysis and refactoring library for python. <code>MIT</code>  - [GitHub](https://github.com/davidhalter/jedi) (\ud83d\udc68\u200d\ud83d\udcbb 170 \u00b7 \ud83d\udd00 500 \u00b7 \ud83d\udce6 430K \u00b7 \ud83d\udccb 1.4K - 4% open \u00b7 \u23f1\ufe0f 24.05.2024):      <pre><code>git clone https://github.com/davidhalter/jedi\n</code></pre> - [PyPi](https://pypi.org/project/jedi) (\ud83d\udce5 39M / month \u00b7 \ud83d\udce6 980 \u00b7 \u23f1\ufe0f 02.10.2023):     <pre><code>pip install jedi\n</code></pre> - [Conda](https://anaconda.org/conda-forge/jedi) (\ud83d\udce5 22M \u00b7 \u23f1\ufe0f 03.10.2023):     <pre><code>conda install -c conda-forge jedi\n</code></pre> rope (\ud83e\udd4736 \u00b7  \u2b50 1.9K) - a python refactoring library. <code>\u2757\ufe0fLGPL-3.0</code>  - [GitHub](https://github.com/python-rope/rope) (\ud83d\udc68\u200d\ud83d\udcbb 81 \u00b7 \ud83d\udd00 160 \u00b7 \ud83d\udce5 28 \u00b7 \ud83d\udce6 74K \u00b7 \ud83d\udccb 360 - 28% open \u00b7 \u23f1\ufe0f 04.04.2024):      <pre><code>git clone https://github.com/python-rope/rope\n</code></pre> - [PyPi](https://pypi.org/project/rope) (\ud83d\udce5 910K / month \u00b7 \ud83d\udce6 280 \u00b7 \u23f1\ufe0f 24.03.2024):     <pre><code>pip install rope\n</code></pre> - [Conda](https://anaconda.org/conda-forge/rope) (\ud83d\udce5 1.5M \u00b7 \u23f1\ufe0f 24.03.2024):     <pre><code>conda install -c conda-forge rope\n</code></pre> pyupgrade (\ud83e\udd4833 \u00b7  \u2b50 3.4K) - A tool (and pre-commit hook) to automatically upgrade syntax for newer.. <code>MIT</code>  - [GitHub](https://github.com/asottile/pyupgrade) (\ud83d\udc68\u200d\ud83d\udcbb 35 \u00b7 \ud83d\udd00 170 \u00b7 \ud83d\udccb 420 - 3% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/asottile/pyupgrade\n</code></pre> - [PyPi](https://pypi.org/project/pyupgrade) (\ud83d\udce5 590K / month \u00b7 \ud83d\udce6 360 \u00b7 \u23f1\ufe0f 24.03.2024):     <pre><code>pip install pyupgrade\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pyupgrade) (\ud83d\udce5 640K \u00b7 \u23f1\ufe0f 24.03.2024):     <pre><code>conda install -c conda-forge pyupgrade\n</code></pre> vulture (\ud83e\udd4830 \u00b7  \u2b50 3.1K) - Find dead Python code. <code>MIT</code>  - [GitHub](https://github.com/jendrikseipp/vulture) (\ud83d\udc68\u200d\ud83d\udcbb 42 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce6 4.5K \u00b7 \ud83d\udccb 210 - 14% open \u00b7 \u23f1\ufe0f 05.05.2024):      <pre><code>git clone https://github.com/jendrikseipp/vulture\n</code></pre> - [PyPi](https://pypi.org/project/vulture) (\ud83d\udce5 650K / month \u00b7 \ud83d\udce6 180 \u00b7 \u23f1\ufe0f 19.01.2024):     <pre><code>pip install vulture\n</code></pre> - [Conda](https://anaconda.org/conda-forge/vulture) (\ud83d\udce5 81K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge vulture\n</code></pre> autoflake (\ud83e\udd4829 \u00b7  \u2b50 870) - Removes unused imports and unused variables as reported by pyflakes. <code>MIT</code>  - [GitHub](https://github.com/PyCQA/autoflake) (\ud83d\udc68\u200d\ud83d\udcbb 38 \u00b7 \ud83d\udd00 80 \u00b7 \ud83d\udccb 120 - 32% open \u00b7 \u23f1\ufe0f 17.05.2024):      <pre><code>git clone https://github.com/myint/autoflake\n</code></pre> - [PyPi](https://pypi.org/project/autoflake) (\ud83d\udce5 1.9M / month \u00b7 \ud83d\udce6 930 \u00b7 \u23f1\ufe0f 13.03.2024):     <pre><code>pip install autoflake\n</code></pre> - [Conda](https://anaconda.org/conda-forge/autoflake) (\ud83d\udce5 540K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge autoflake\n</code></pre> MonkeyType (\ud83e\udd4826 \u00b7  \u2b50 4.6K) - A Python library that generates static type annotations by.. <code>BSD-3</code>  - [GitHub](https://github.com/Instagram/MonkeyType) (\ud83d\udc68\u200d\ud83d\udcbb 50 \u00b7 \ud83d\udd00 170 \u00b7 \ud83d\udccb 190 - 26% open \u00b7 \u23f1\ufe0f 07.05.2024):      <pre><code>git clone https://github.com/Instagram/MonkeyType\n</code></pre> - [PyPi](https://pypi.org/project/monkeytype) (\ud83d\udce5 240K / month \u00b7 \ud83d\udce6 20 \u00b7 \u23f1\ufe0f 20.03.2023):     <pre><code>pip install monkeytype\n</code></pre> - [Conda](https://anaconda.org/conda-forge/monkeytype) (\ud83d\udce5 60K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge monkeytype\n</code></pre> add-trailing-comma (\ud83e\udd4922 \u00b7  \u2b50 330) - A tool (and pre-commit hook) to automatically add trailing.. <code>MIT</code>  - [GitHub](https://github.com/asottile/add-trailing-comma) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 22 \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/asottile/add-trailing-comma\n</code></pre> - [PyPi](https://pypi.org/project/add-trailing-comma) (\ud83d\udce5 59K / month \u00b7 \ud83d\udce6 22 \u00b7 \u23f1\ufe0f 30.08.2023):     <pre><code>pip install add-trailing-comma\n</code></pre> unimport (\ud83e\udd4921 \u00b7  \u2b50 240) - The ultimate linter and formatter for removing unused import statements.. <code>MIT</code>  - [GitHub](https://github.com/hakancelikdev/unimport) (\ud83d\udc68\u200d\ud83d\udcbb 16 \u00b7 \ud83d\udd00 22 \u00b7 \ud83d\udccb 120 - 9% open \u00b7 \u23f1\ufe0f 07.01.2024):      <pre><code>git clone https://github.com/hakancelik96/unimport\n</code></pre> - [PyPi](https://pypi.org/project/unimport) (\ud83d\udce5 20K / month \u00b7 \ud83d\udce6 16 \u00b7 \u23f1\ufe0f 24.12.2023):     <pre><code>pip install unimport\n</code></pre> com2ann (\ud83e\udd4918 \u00b7  \u2b50 140) - Tool for translation type comments to type annotations in Python. <code>MIT</code>  - [GitHub](https://github.com/ilevkivskyi/com2ann) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 12 \u00b7 \ud83d\udce6 72 \u00b7 \ud83d\udccb 29 - 24% open \u00b7 \u23f1\ufe0f 14.03.2024):      <pre><code>git clone https://github.com/ilevkivskyi/com2ann\n</code></pre> - [PyPi](https://pypi.org/project/com2ann) (\ud83d\udce5 15K / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 21.08.2021):     <pre><code>pip install com2ann\n</code></pre> massedit (\ud83e\udd4917 \u00b7  \u2b50 110 \u00b7 \ud83d\udca4) - Programmatically edit text files with Python. Useful for source to.. <code>MIT</code>  - [GitHub](https://github.com/elmotec/massedit) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 16 \u00b7 \ud83d\udce5 23 \u00b7 \ud83d\udce6 43 \u00b7 \ud83d\udccb 11 - 36% open \u00b7 \u23f1\ufe0f 12.09.2023):      <pre><code>git clone https://github.com/elmotec/massedit\n</code></pre> - [PyPi](https://pypi.org/project/massedit) (\ud83d\udce5 2.8K / month \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 11.09.2023):     <pre><code>pip install massedit\n</code></pre> Show 8 hidden projects...  - Bowler (\ud83e\udd4825 \u00b7  \u2b50 1.5K \u00b7 \ud83d\udc80) - Safe code refactoring for modern Python. <code>MIT</code> - redbaron (\ud83e\udd4924 \u00b7  \u2b50 690 \u00b7 \ud83d\udc80) - Bottom-up approach to refactoring in python. <code>\u2757\ufe0fLGPL-3.0</code> - eradicate (\ud83e\udd4924 \u00b7  \u2b50 200) - Removes commented-out code from Python files. <code>\u2757\ufe0fSaxpath</code> - baron (\ud83e\udd4923 \u00b7  \u2b50 290 \u00b7 \ud83d\udc80) - IDE allow you to refactor code, Baron allows you to write.. <code>\u2757\ufe0fLGPL-3.0</code> - pyannotate (\ud83e\udd4921 \u00b7  \u2b50 1.4K \u00b7 \ud83d\udc80) - Auto-generate PEP-484 annotations. <code>Apache-2</code> - unify (\ud83e\udd4920 \u00b7  \u2b50 92 \u00b7 \ud83d\udc80) - Modifies strings to all use the same quote where possible. <code>MIT</code> - pep8ify (\ud83e\udd4916 \u00b7  \u2b50 120 \u00b7 \ud83d\udc80) - A library that modifies python source code to conform to pep8. <code>Apache-2</code> - retype (\ud83e\udd4913 \u00b7  \u2b50 140 \u00b7 \ud83d\udc80) - Re-apply type annotations from .pyi stubs to your codebase. <code>MIT</code>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#code-security","title":"Code Security","text":"bandit (\ud83e\udd4738 \u00b7  \u2b50 6.1K) - Bandit is a tool designed to find common security issues in Python.. <code>Apache-2</code>  - [GitHub](https://github.com/PyCQA/bandit) (\ud83d\udc68\u200d\ud83d\udcbb 180 \u00b7 \ud83d\udd00 580 \u00b7 \ud83d\udce5 780 \u00b7 \ud83d\udce6 49K \u00b7 \ud83d\udccb 670 - 28% open \u00b7 \u23f1\ufe0f 10.05.2024):      <pre><code>git clone https://github.com/PyCQA/bandit\n</code></pre> - [PyPi](https://pypi.org/project/bandit) (\ud83d\udce5 4.8M / month \u00b7 \ud83d\udce6 1.3K \u00b7 \u23f1\ufe0f 08.03.2024):     <pre><code>pip install bandit\n</code></pre> - [Conda](https://anaconda.org/conda-forge/bandit) (\ud83d\udce5 310K \u00b7 \u23f1\ufe0f 21.04.2024):     <pre><code>conda install -c conda-forge bandit\n</code></pre> sqlmap (\ud83e\udd4833 \u00b7  \u2b50 31K) - Automatic SQL injection and database takeover tool. <code>\u2757\ufe0fGPL-3.0</code>  - [GitHub](https://github.com/sqlmapproject/sqlmap) (\ud83d\udc68\u200d\ud83d\udcbb 140 \u00b7 \ud83d\udd00 5.5K \u00b7 \ud83d\udce6 21 \u00b7 \ud83d\udccb 5.2K - 1% open \u00b7 \u23f1\ufe0f 09.05.2024):      <pre><code>git clone https://github.com/sqlmapproject/sqlmap\n</code></pre> - [PyPi](https://pypi.org/project/sqlmap) (\ud83d\udce5 14K / month \u00b7 \ud83d\udce6 12 \u00b7 \u23f1\ufe0f 09.05.2024):     <pre><code>pip install sqlmap\n</code></pre> detect-secrets (\ud83e\udd4833 \u00b7  \u2b50 3.5K) - An enterprise friendly way of detecting and preventing.. <code>Apache-2</code>  - [GitHub](https://github.com/Yelp/detect-secrets) (\ud83d\udc68\u200d\ud83d\udcbb 81 \u00b7 \ud83d\udd00 430 \u00b7 \ud83d\udccb 370 - 34% open \u00b7 \u23f1\ufe0f 16.05.2024):      <pre><code>git clone https://github.com/Yelp/detect-secrets\n</code></pre> - [PyPi](https://pypi.org/project/detect-secrets) (\ud83d\udce5 610K / month \u00b7 \ud83d\udce6 81 \u00b7 \u23f1\ufe0f 06.05.2024):     <pre><code>pip install detect-secrets\n</code></pre> safety (\ud83e\udd4931 \u00b7  \u2b50 1.6K) - Safety checks Python dependencies for known security vulnerabilities and.. <code>MIT</code>  - [GitHub](https://github.com/pyupio/safety) (\ud83d\udc68\u200d\ud83d\udcbb 42 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce5 550K \u00b7 \ud83d\udce6 14K \u00b7 \ud83d\udccb 220 - 42% open \u00b7 \u23f1\ufe0f 01.05.2024):      <pre><code>git clone https://github.com/pyupio/safety\n</code></pre> - [PyPi](https://pypi.org/project/safety) (\ud83d\udce5 1.5M / month \u00b7 \ud83d\udce6 300 \u00b7 \u23f1\ufe0f 01.05.2024):     <pre><code>pip install safety\n</code></pre> - [Conda](https://anaconda.org/conda-forge/safety) (\ud83d\udce5 95K \u00b7 \u23f1\ufe0f 01.05.2024):     <pre><code>conda install -c conda-forge safety\n</code></pre> Show 4 hidden projects...  - pyarmor (\ud83e\udd4834 \u00b7  \u2b50 3K) - A tool used to obfuscate python scripts, bind obfuscated scripts to.. <code>\u2757\ufe0fSGI-B-2.0</code> - pyt (\ud83e\udd4923 \u00b7  \u2b50 2.2K \u00b7 \ud83d\udc80) - A Static Analysis Tool for Detecting Security Vulnerabilities in.. <code>\u2757\ufe0fGPL-2.0</code> - dlint (\ud83e\udd4920 \u00b7  \u2b50 160 \u00b7 \ud83d\udc80) - Dlint is a tool for encouraging best coding practices and helping.. <code>BSD-3</code> - dodgy (\ud83e\udd4920 \u00b7  \u2b50 120 \u00b7 \ud83d\udc80) - Looks at Python code to search for things which look dodgy such as.. <code>MIT</code>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#virtual-environments","title":"Virtual Environments","text":"pipenv (\ud83e\udd4745 \u00b7  \u2b50 25K \u00b7 \ud83d\udcc8) - Python Development Workflow for Humans. <code>MIT</code>  - [GitHub](https://github.com/pypa/pipenv) (\ud83d\udc68\u200d\ud83d\udcbb 510 \u00b7 \ud83d\udd00 1.8K \u00b7 \ud83d\udce6 140K \u00b7 \ud83d\udccb 4.2K - 6% open \u00b7 \u23f1\ufe0f 24.05.2024):      <pre><code>git clone https://github.com/pypa/pipenv\n</code></pre> - [PyPi](https://pypi.org/project/pipenv) (\ud83d\udce5 11M / month \u00b7 \ud83d\udce6 210 \u00b7 \u23f1\ufe0f 05.02.2024):     <pre><code>pip install pipenv\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pipenv) (\ud83d\udce5 160K \u00b7 \u23f1\ufe0f 05.02.2024):     <pre><code>conda install -c conda-forge pipenv\n</code></pre> virtualenv (\ud83e\udd4842 \u00b7  \u2b50 4.7K) - Virtual Python Environment builder. <code>MIT</code>  - [GitHub](https://github.com/pypa/virtualenv) (\ud83d\udc68\u200d\ud83d\udcbb 280 \u00b7 \ud83d\udd00 1K \u00b7 \ud83d\udce6 390K \u00b7 \ud83d\udccb 1.3K - 1% open \u00b7 \u23f1\ufe0f 24.05.2024):      <pre><code>git clone https://github.com/pypa/virtualenv\n</code></pre> - [PyPi](https://pypi.org/project/virtualenv) (\ud83d\udce5 130M / month \u00b7 \ud83d\udce6 1.5K \u00b7 \u23f1\ufe0f 13.05.2024):     <pre><code>pip install virtualenv\n</code></pre> - [Conda](https://anaconda.org/conda-forge/virtualenv) (\ud83d\udce5 6.9M \u00b7 \u23f1\ufe0f 14.05.2024):     <pre><code>conda install -c conda-forge virtualenv\n</code></pre> nodeenv (\ud83e\udd4835 \u00b7  \u2b50 1.7K) - Virtual environment for Node.js &amp; integrator with virtualenv. <code>BSD-3</code>  - [GitHub](https://github.com/ekalinin/nodeenv) (\ud83d\udc68\u200d\ud83d\udcbb 98 \u00b7 \ud83d\udd00 200 \u00b7 \ud83d\udce6 85K \u00b7 \ud83d\udccb 190 - 24% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/ekalinin/nodeenv\n</code></pre> - [PyPi](https://pypi.org/project/nodeenv) (\ud83d\udce5 22M / month \u00b7 \ud83d\udce6 210 \u00b7 \u23f1\ufe0f 28.05.2024):     <pre><code>pip install nodeenv\n</code></pre> - [Conda](https://anaconda.org/conda-forge/nodeenv) (\ud83d\udce5 3.9M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge nodeenv\n</code></pre> pyenv (\ud83e\udd4834 \u00b7  \u2b50 37K) - Simple Python version management. <code>MIT</code>  - [GitHub](https://github.com/pyenv/pyenv) (\ud83d\udc68\u200d\ud83d\udcbb 440 \u00b7 \ud83d\udd00 2.9K \u00b7 \ud83d\udce6 21 \u00b7 \ud83d\udccb 1.7K - 2% open \u00b7 \u23f1\ufe0f 27.05.2024):      <pre><code>git clone https://github.com/pyenv/pyenv\n</code></pre> - [PyPi](https://pypi.org/project/pyenv) (\ud83d\udce5 12K / month \u00b7 \u23f1\ufe0f 12.01.2019):     <pre><code>pip install pyenv\n</code></pre> pyenv-virtualenv (\ud83e\udd4923 \u00b7  \u2b50 6.1K) - a pyenv plugin to manage virtualenv (a.k.a. python-virtualenv). <code>MIT</code>  - [GitHub](https://github.com/pyenv/pyenv-virtualenv) (\ud83d\udc68\u200d\ud83d\udcbb 61 \u00b7 \ud83d\udd00 390 \u00b7 \ud83d\udce6 21 \u00b7 \ud83d\udccb 350 - 31% open \u00b7 \u23f1\ufe0f 09.04.2024):      <pre><code>git clone https://github.com/pyenv/pyenv-virtualenv\n</code></pre> pyenv-installer (\ud83e\udd4916 \u00b7  \u2b50 3.9K) - This tool is used to install `pyenv` and friends. <code>MIT</code>  - [GitHub](https://github.com/pyenv/pyenv-installer) (\ud83d\udc68\u200d\ud83d\udcbb 40 \u00b7 \ud83d\udd00 420 \u00b7 \ud83d\udccb 81 - 3% open \u00b7 \u23f1\ufe0f 21.04.2024):      <pre><code>git clone https://github.com/pyenv/pyenv-installer\n</code></pre> freshenv (\ud83e\udd4913 \u00b7  \u2b50 170 \u00b7 \ud83d\udca4) - Provision, share, manage local and cloud developer environments. <code>MPL-2.0</code>  - [GitHub](https://github.com/raiyanyahya/freshenv) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 3 \u00b7 \ud83d\udccb 5 - 40% open \u00b7 \u23f1\ufe0f 13.10.2023):      <pre><code>git clone https://github.com/raiyanyahya/freshenv\n</code></pre> - [PyPi](https://pypi.org/project/freshenv) (\ud83d\udce5 240 / month \u00b7 \u23f1\ufe0f 06.11.2022):     <pre><code>pip install freshenv\n</code></pre> - [Conda](https://anaconda.org/raiyanyahya/freshenv):     <pre><code>conda install -c raiyanyahya freshenv\n</code></pre> Show 3 hidden projects...  - vex (\ud83e\udd4920 \u00b7  \u2b50 370 \u00b7 \ud83d\udc80) - Run a command in the named virtualenv. <code>MIT</code> - dh-virtualenv (\ud83e\udd4917 \u00b7  \u2b50 1.6K \u00b7 \ud83d\udc80) - Python virtualenvs in Debian packages. <code>\u2757\ufe0fGPL-2.0</code> - pipenv-pipes (\ud83e\udd4914 \u00b7  \u2b50 130 \u00b7 \ud83d\udc80) - A PipEnv Environment Switcher. <code>MIT</code>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#dependency-package-managers","title":"Dependency &amp; Package Managers","text":"pip (\ud83e\udd4748 \u00b7  \u2b50 9.3K) - The Python package installer. <code>MIT</code>  - [GitHub](https://github.com/pypa/pip) (\ud83d\udc68\u200d\ud83d\udcbb 790 \u00b7 \ud83d\udd00 3K \u00b7 \ud83d\udce6 190K \u00b7 \ud83d\udccb 7.3K - 14% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/pypa/pip\n</code></pre> - [PyPi](https://pypi.org/project/pip) (\ud83d\udce5 380M / month \u00b7 \ud83d\udce6 4.1K \u00b7 \u23f1\ufe0f 06.05.2024):     <pre><code>pip install pip\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pip) (\ud83d\udce5 110M \u00b7 \u23f1\ufe0f 03.02.2024):     <pre><code>conda install -c conda-forge pip\n</code></pre> conda (\ud83e\udd4743 \u00b7  \u2b50 6.2K) - A system-level, binary package and environment manager running on all.. <code>BSD-3</code>  - [GitHub](https://github.com/conda/conda) (\ud83d\udc68\u200d\ud83d\udcbb 460 \u00b7 \ud83d\udd00 1.5K \u00b7 \ud83d\udce5 1.3K \u00b7 \ud83d\udce6 47K \u00b7 \ud83d\udccb 9.7K - 7% open \u00b7 \u23f1\ufe0f 30.05.2024):      <pre><code>git clone https://github.com/conda/conda\n</code></pre> - [PyPi](https://pypi.org/project/conda) (\ud83d\udce5 160K / month \u00b7 \ud83d\udce6 76 \u00b7 \u23f1\ufe0f 22.04.2017):     <pre><code>pip install conda\n</code></pre> - [Conda](https://anaconda.org/conda-forge/conda) (\ud83d\udce5 51M \u00b7 \u23f1\ufe0f 13.05.2024):     <pre><code>conda install -c conda-forge conda\n</code></pre> poetry (\ud83e\udd4841 \u00b7  \u2b50 30K) - Python packaging and dependency management made easy. <code>MIT</code>  - [GitHub](https://github.com/python-poetry/poetry) (\ud83d\udc68\u200d\ud83d\udcbb 560 \u00b7 \ud83d\udd00 2.2K \u00b7 \ud83d\udce5 15M \u00b7 \ud83d\udccb 5.8K - 11% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/python-poetry/poetry\n</code></pre> - [PyPi](https://pypi.org/project/poetry) (\ud83d\udce5 35M / month \u00b7 \ud83d\udce6 590 \u00b7 \u23f1\ufe0f 08.05.2024):     <pre><code>pip install poetry\n</code></pre> - [Conda](https://anaconda.org/conda-forge/poetry) (\ud83d\udce5 1.2M \u00b7 \u23f1\ufe0f 09.05.2024):     <pre><code>conda install -c conda-forge poetry\n</code></pre> pip-tools (\ud83e\udd4839 \u00b7  \u2b50 7.5K) - A set of tools to keep your pinned Python dependencies fresh. <code>BSD-3</code>  - [GitHub](https://github.com/jazzband/pip-tools) (\ud83d\udc68\u200d\ud83d\udcbb 220 \u00b7 \ud83d\udd00 600 \u00b7 \ud83d\udce6 28K \u00b7 \ud83d\udccb 1.1K - 15% open \u00b7 \u23f1\ufe0f 13.05.2024):      <pre><code>git clone https://github.com/jazzband/pip-tools\n</code></pre> - [PyPi](https://pypi.org/project/pip-tools) (\ud83d\udce5 12M / month \u00b7 \ud83d\udce6 2K \u00b7 \u23f1\ufe0f 06.03.2024):     <pre><code>pip install pip-tools\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pip-tools) (\ud83d\udce5 150K \u00b7 \u23f1\ufe0f 06.03.2024):     <pre><code>conda install -c conda-forge pip-tools\n</code></pre> pipx (\ud83e\udd4836 \u00b7  \u2b50 9.2K) - Install and Run Python Applications in Isolated Environments. <code>MIT</code>  - [GitHub](https://github.com/pypa/pipx) (\ud83d\udc68\u200d\ud83d\udcbb 150 \u00b7 \ud83d\udd00 380 \u00b7 \ud83d\udce5 83K \u00b7 \ud83d\udce6 2.2K \u00b7 \ud83d\udccb 730 - 10% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/pypa/pipx\n</code></pre> - [PyPi](https://pypi.org/project/pipx) (\ud83d\udce5 6.4M / month \u00b7 \ud83d\udce6 39 \u00b7 \u23f1\ufe0f 29.03.2024):     <pre><code>pip install pipx\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pipx) (\ud83d\udce5 53K \u00b7 \u23f1\ufe0f 29.03.2024):     <pre><code>conda install -c conda-forge pipx\n</code></pre> PDM (\ud83e\udd4836 \u00b7  \u2b50 6.7K) - A modern Python package and dependency manager supporting the latest PEP.. <code>MIT</code>  - [GitHub](https://github.com/pdm-project/pdm) (\ud83d\udc68\u200d\ud83d\udcbb 180 \u00b7 \ud83d\udd00 340 \u00b7 \ud83d\udce5 5 \u00b7 \ud83d\udce6 300 \u00b7 \ud83d\udccb 1.6K - 3% open \u00b7 \u23f1\ufe0f 30.05.2024):      <pre><code>git clone https://github.com/pdm-project/pdm\n</code></pre> - [PyPi](https://pypi.org/project/pdm) (\ud83d\udce5 820K / month \u00b7 \ud83d\udce6 140 \u00b7 \u23f1\ufe0f 30.05.2024):     <pre><code>pip install pdm\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pdm) (\ud83d\udce5 320K \u00b7 \u23f1\ufe0f 30.05.2024):     <pre><code>conda install -c conda-forge pdm\n</code></pre> pipreqs (\ud83e\udd4933 \u00b7  \u2b50 5.9K) - pipreqs - Generate pip requirements.txt file based on imports of any.. <code>Apache-2</code>  - [GitHub](https://github.com/bndr/pipreqs) (\ud83d\udc68\u200d\ud83d\udcbb 66 \u00b7 \ud83d\udd00 380 \u00b7 \ud83d\udce6 30K \u00b7 \ud83d\udccb 300 - 63% open \u00b7 \u23f1\ufe0f 18.02.2024):      <pre><code>git clone https://github.com/bndr/pipreqs\n</code></pre> - [PyPi](https://pypi.org/project/pipreqs) (\ud83d\udce5 780K / month \u00b7 \ud83d\udce6 230 \u00b7 \u23f1\ufe0f 18.02.2024):     <pre><code>pip install pipreqs\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pipreqs) (\ud83d\udce5 49K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge pipreqs\n</code></pre> mamba (\ud83e\udd4929 \u00b7  \u2b50 6.4K) - The Fast Cross-Platform Package Manager. <code>BSD-3</code>  - [GitHub](https://github.com/mamba-org/mamba) (\ud83d\udc68\u200d\ud83d\udcbb 150 \u00b7 \ud83d\udd00 340 \u00b7 \ud83d\udccb 1.7K - 30% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/mamba-org/mamba\n</code></pre> - [Conda](https://anaconda.org/conda-forge/mamba) (\ud83d\udce5 12M \u00b7 \u23f1\ufe0f 06.05.2024):     <pre><code>conda install -c conda-forge mamba\n</code></pre> pip-run (\ud83e\udd4923 \u00b7  \u2b50 130) - pip-run - dynamic dependency loader for Python. <code>MIT</code>  - [GitHub](https://github.com/jaraco/pip-run) (\ud83d\udc68\u200d\ud83d\udcbb 24 \u00b7 \ud83d\udd00 19 \u00b7 \ud83d\udce6 64 \u00b7 \ud83d\udccb 72 - 6% open \u00b7 \u23f1\ufe0f 24.04.2024):      <pre><code>git clone https://github.com/jaraco/pip-run\n</code></pre> - [PyPi](https://pypi.org/project/pip-run) (\ud83d\udce5 17K / month \u00b7 \ud83d\udce6 9 \u00b7 \u23f1\ufe0f 10.02.2024):     <pre><code>pip install pip-run\n</code></pre> Show 2 hidden projects...  - dephell (\ud83e\udd4925 \u00b7  \u2b50 1.8K \u00b7 \ud83d\udc80) - Python project management. Manage packages: convert between formats,.. <code>MIT</code> - pyflow (\ud83e\udd4922 \u00b7  \u2b50 1.3K \u00b7 \ud83d\udc80) - An installation and dependency system for Python. <code>MIT</code>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#code-metrics-complexity","title":"Code Metrics &amp; Complexity","text":"prospector (\ud83e\udd4732 \u00b7  \u2b50 1.9K) - Inspects Python source files and provides information about.. <code>\u2757\ufe0fGPL-2.0</code>  - [GitHub](https://github.com/landscapeio/prospector) (\ud83d\udc68\u200d\ud83d\udcbb 90 \u00b7 \ud83d\udd00 170 \u00b7 \ud83d\udce6 4.9K \u00b7 \ud83d\udccb 380 - 16% open \u00b7 \u23f1\ufe0f 16.04.2024):      <pre><code>git clone https://github.com/PyCQA/prospector\n</code></pre> - [PyPi](https://pypi.org/project/prospector) (\ud83d\udce5 1.1M / month \u00b7 \ud83d\udce6 250 \u00b7 \u23f1\ufe0f 18.10.2023):     <pre><code>pip install prospector\n</code></pre> - [Conda](https://anaconda.org/conda-forge/prospector) (\ud83d\udce5 110K \u00b7 \u23f1\ufe0f 19.10.2023):     <pre><code>conda install -c conda-forge prospector\n</code></pre> mccabe (\ud83e\udd4831 \u00b7  \u2b50 630) - McCabe complexity checker for Python. <code>\u2757\ufe0fSaxpath</code>  - [GitHub](https://github.com/PyCQA/mccabe) (\ud83d\udc68\u200d\ud83d\udcbb 24 \u00b7 \ud83d\udd00 60 \u00b7 \ud83d\udce6 450K \u00b7 \ud83d\udccb 52 - 13% open \u00b7 \u23f1\ufe0f 03.12.2023):      <pre><code>git clone https://github.com/PyCQA/mccabe\n</code></pre> - [PyPi](https://pypi.org/project/mccabe) (\ud83d\udce5 46M / month \u00b7 \ud83d\udce6 860 \u00b7 \u23f1\ufe0f 24.01.2022):     <pre><code>pip install mccabe\n</code></pre> - [Conda](https://anaconda.org/conda-forge/mccabe) (\ud83d\udce5 8.2M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge mccabe\n</code></pre> radon (\ud83e\udd4830 \u00b7  \u2b50 1.6K \u00b7 \ud83d\udca4) - Various code metrics for Python code. <code>MIT</code>  - [GitHub](https://github.com/rubik/radon) (\ud83d\udc68\u200d\ud83d\udcbb 60 \u00b7 \ud83d\udd00 110 \u00b7 \ud83d\udce6 5K \u00b7 \ud83d\udccb 180 - 18% open \u00b7 \u23f1\ufe0f 06.10.2023):      <pre><code>git clone https://github.com/rubik/radon\n</code></pre> - [PyPi](https://pypi.org/project/radon) (\ud83d\udce5 560K / month \u00b7 \ud83d\udce6 190 \u00b7 \u23f1\ufe0f 26.03.2023):     <pre><code>pip install radon\n</code></pre> - [Conda](https://anaconda.org/conda-forge/radon) (\ud83d\udce5 72K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge radon\n</code></pre> wily (\ud83e\udd4926 \u00b7  \u2b50 1.2K \u00b7 \ud83d\udca4) - A Python application for tracking, reporting on timing and.. <code>Apache-2</code>  - [GitHub](https://github.com/tonybaloney/wily) (\ud83d\udc68\u200d\ud83d\udcbb 24 \u00b7 \ud83d\udd00 56 \u00b7 \ud83d\udce6 220 \u00b7 \ud83d\udccb 110 - 32% open \u00b7 \u23f1\ufe0f 11.10.2023):      <pre><code>git clone https://github.com/tonybaloney/wily\n</code></pre> - [PyPi](https://pypi.org/project/wily) (\ud83d\udce5 45K / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 11.10.2023):     <pre><code>pip install wily\n</code></pre> xenon (\ud83e\udd4924 \u00b7  \u2b50 240 \u00b7 \ud83d\udca4) - Monitoring tool based on radon. <code>MIT</code>  - [GitHub](https://github.com/rubik/xenon) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 22 \u00b7 \ud83d\udce6 1.2K \u00b7 \ud83d\udccb 36 - 22% open \u00b7 \u23f1\ufe0f 12.08.2023):      <pre><code>git clone https://github.com/rubik/xenon\n</code></pre> - [PyPi](https://pypi.org/project/xenon) (\ud83d\udce5 160K / month \u00b7 \ud83d\udce6 44 \u00b7 \u23f1\ufe0f 12.08.2023):     <pre><code>pip install xenon\n</code></pre> - [Conda](https://anaconda.org/conda-forge/xenon) (\ud83d\udce5 23K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge xenon\n</code></pre> Show 1 hidden projects...  - cohesion (\ud83e\udd4915 \u00b7  \u2b50 230 \u00b7 \ud83d\udc80) - A tool for measuring Python class cohesion. <code>\u2757\ufe0fGPL-3.0</code>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#logging","title":"Logging","text":"rich (\ud83e\udd4743 \u00b7  \u2b50 48K) - Rich is a Python library for rich text and beautiful formatting in the terminal. <code>MIT</code>  - [GitHub](https://github.com/Textualize/rich) (\ud83d\udc68\u200d\ud83d\udcbb 240 \u00b7 \ud83d\udd00 1.7K \u00b7 \ud83d\udce6 210K \u00b7 \ud83d\udccb 1.4K - 20% open \u00b7 \u23f1\ufe0f 01.05.2024):      <pre><code>git clone https://github.com/Textualize/rich\n</code></pre> - [PyPi](https://pypi.org/project/rich) (\ud83d\udce5 65M / month \u00b7 \ud83d\udce6 11K \u00b7 \u23f1\ufe0f 28.02.2024):     <pre><code>pip install rich\n</code></pre> - [Conda](https://anaconda.org/conda-forge/rich) (\ud83d\udce5 7M \u00b7 \u23f1\ufe0f 28.02.2024):     <pre><code>conda install -c conda-forge rich\n</code></pre> tqdm (\ud83e\udd4742 \u00b7  \u2b50 28K) - A Fast, Extensible Progress Bar for Python and CLI. <code>MPL-2.0</code>  - [GitHub](https://github.com/tqdm/tqdm) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 1.3K \u00b7 \ud83d\udce5 11K \u00b7 \ud83d\udce6 740K \u00b7 \ud83d\udccb 1.1K - 46% open \u00b7 \u23f1\ufe0f 02.05.2024):      <pre><code>git clone https://github.com/tqdm/tqdm\n</code></pre> - [PyPi](https://pypi.org/project/tqdm) (\ud83d\udce5 99M / month \u00b7 \ud83d\udce6 29K \u00b7 \u23f1\ufe0f 02.05.2024):     <pre><code>pip install tqdm\n</code></pre> - [Conda](https://anaconda.org/conda-forge/tqdm) (\ud83d\udce5 27M \u00b7 \u23f1\ufe0f 04.05.2024):     <pre><code>conda install -c conda-forge tqdm\n</code></pre> - [Docker Hub](https://hub.docker.com/r/tqdm/tqdm) (\ud83d\udce5 4.5K \u00b7 \u2b50 2 \u00b7 \u23f1\ufe0f 25.05.2024):     <pre><code>docker pull tqdm/tqdm\n</code></pre> loguru (\ud83e\udd4738 \u00b7  \u2b50 18K) - Python logging made (stupidly) simple. <code>MIT</code>  - [GitHub](https://github.com/Delgan/loguru) (\ud83d\udc68\u200d\ud83d\udcbb 53 \u00b7 \ud83d\udd00 670 \u00b7 \ud83d\udce6 85K \u00b7 \ud83d\udccb 960 - 16% open \u00b7 \u23f1\ufe0f 17.05.2024):      <pre><code>git clone https://github.com/Delgan/loguru\n</code></pre> - [PyPi](https://pypi.org/project/loguru) (\ud83d\udce5 25M / month \u00b7 \ud83d\udce6 5.7K \u00b7 \u23f1\ufe0f 11.09.2023):     <pre><code>pip install loguru\n</code></pre> - [Conda](https://anaconda.org/conda-forge/loguru) (\ud83d\udce5 2.2M \u00b7 \u23f1\ufe0f 24.09.2023):     <pre><code>conda install -c conda-forge loguru\n</code></pre> sentry-sdk (\ud83e\udd4738 \u00b7  \u2b50 1.8K) - The official Python SDK for Sentry.io. <code>MIT</code>  - [GitHub](https://github.com/getsentry/sentry-python) (\ud83d\udc68\u200d\ud83d\udcbb 220 \u00b7 \ud83d\udd00 460 \u00b7 \ud83d\udce5 2.1K \u00b7 \ud83d\udccb 1.3K - 15% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/getsentry/sentry-python\n</code></pre> - [PyPi](https://pypi.org/project/sentry-sdk) (\ud83d\udce5 33M / month \u00b7 \ud83d\udce6 810 \u00b7 \u23f1\ufe0f 23.05.2024):     <pre><code>pip install sentry-sdk\n</code></pre> - [Conda](https://anaconda.org/conda-forge/sentry-sdk) (\ud83d\udce5 800K \u00b7 \u23f1\ufe0f 23.05.2024):     <pre><code>conda install -c conda-forge sentry-sdk\n</code></pre> structlog (\ud83e\udd4837 \u00b7  \u2b50 3.2K) - Simple, powerful, and fast logging for Python. <code>Apache-2</code>  - [GitHub](https://github.com/hynek/structlog) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 210 \u00b7 \ud83d\udce6 12K \u00b7 \ud83d\udccb 320 - 7% open \u00b7 \u23f1\ufe0f 27.05.2024):      <pre><code>git clone https://github.com/hynek/structlog\n</code></pre> - [PyPi](https://pypi.org/project/structlog) (\ud83d\udce5 27M / month \u00b7 \ud83d\udce6 950 \u00b7 \u23f1\ufe0f 27.05.2024):     <pre><code>pip install structlog\n</code></pre> - [Conda](https://anaconda.org/conda-forge/structlog) (\ud83d\udce5 400K \u00b7 \u23f1\ufe0f 30.05.2024):     <pre><code>conda install -c conda-forge structlog\n</code></pre> progressbar2 (\ud83e\udd4833 \u00b7  \u2b50 850 \u00b7 \ud83d\udcc9) - Progressbar 2 - A progress bar for Python 2 and Python 3 -.. <code>BSD-3</code>  - [GitHub](https://github.com/wolph/python-progressbar) (\ud83d\udc68\u200d\ud83d\udcbb 45 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce5 2.3K \u00b7 \ud83d\udccb 220 - 2% open \u00b7 \u23f1\ufe0f 29.04.2024):      <pre><code>git clone https://github.com/WoLpH/python-progressbar\n</code></pre> - [PyPi](https://pypi.org/project/progressbar2) (\ud83d\udce5 27M / month \u00b7 \ud83d\udce6 910 \u00b7 \u23f1\ufe0f 05.03.2024):     <pre><code>pip install progressbar2\n</code></pre> - [Conda](https://anaconda.org/conda-forge/progressbar2) (\ud83d\udce5 1.3M \u00b7 \u23f1\ufe0f 07.03.2024):     <pre><code>conda install -c conda-forge progressbar2\n</code></pre> logbook (\ud83e\udd4932 \u00b7  \u2b50 1.5K) - A cool logging replacement for Python. <code>BSD-3</code>  - [GitHub](https://github.com/getlogbook/logbook) (\ud83d\udc68\u200d\ud83d\udcbb 79 \u00b7 \ud83d\udd00 160 \u00b7 \ud83d\udce5 340 \u00b7 \ud83d\udce6 6K \u00b7 \ud83d\udccb 190 - 28% open \u00b7 \u23f1\ufe0f 10.02.2024):      <pre><code>git clone https://github.com/getlogbook/logbook\n</code></pre> - [PyPi](https://pypi.org/project/logbook) (\ud83d\udce5 4.3M / month \u00b7 \ud83d\udce6 260 \u00b7 \u23f1\ufe0f 10.11.2023):     <pre><code>pip install logbook\n</code></pre> - [Conda](https://anaconda.org/conda-forge/logbook) (\ud83d\udce5 180K \u00b7 \u23f1\ufe0f 11.11.2023):     <pre><code>conda install -c conda-forge logbook\n</code></pre> alive-progress (\ud83e\udd4930 \u00b7  \u2b50 5.2K) - A new kind of Progress Bar, with real-time throughput, ETA, and.. <code>MIT</code>  - [GitHub](https://github.com/rsalmei/alive-progress) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 200 \u00b7 \ud83d\udce6 3.2K \u00b7 \ud83d\udccb 220 - 9% open \u00b7 \u23f1\ufe0f 02.12.2023):      <pre><code>git clone https://github.com/rsalmei/alive-progress\n</code></pre> - [PyPi](https://pypi.org/project/alive-progress) (\ud83d\udce5 770K / month \u00b7 \ud83d\udce6 420 \u00b7 \u23f1\ufe0f 08.11.2023):     <pre><code>pip install alive-progress\n</code></pre> - [Conda](https://anaconda.org/conda-forge/alive-progress) (\ud83d\udce5 58K \u00b7 \u23f1\ufe0f 09.11.2023):     <pre><code>conda install -c conda-forge alive-progress\n</code></pre> colorlog (\ud83e\udd4930 \u00b7  \u2b50 860) - A colored formatter for the python logging module. <code>MIT</code>  - [GitHub](https://github.com/borntyping/python-colorlog) (\ud83d\udc68\u200d\ud83d\udcbb 33 \u00b7 \ud83d\udd00 86 \u00b7 \ud83d\udce6 38K \u00b7 \u23f1\ufe0f 26.01.2024):      <pre><code>git clone https://github.com/borntyping/python-colorlog\n</code></pre> - [PyPi](https://pypi.org/project/colorlog) (\ud83d\udce5 14M / month \u00b7 \ud83d\udce6 1.7K \u00b7 \u23f1\ufe0f 26.01.2024):     <pre><code>pip install colorlog\n</code></pre> - [Conda](https://anaconda.org/conda-forge/colorlog) (\ud83d\udce5 2.4M \u00b7 \u23f1\ufe0f 26.01.2024):     <pre><code>conda install -c conda-forge colorlog\n</code></pre> notifiers (\ud83e\udd4928 \u00b7  \u2b50 2.6K) - The easy way to send notifications. <code>MIT</code>  - [GitHub](https://github.com/liiight/notifiers) (\ud83d\udc68\u200d\ud83d\udcbb 21 \u00b7 \ud83d\udd00 110 \u00b7 \ud83d\udce6 1.2K \u00b7 \ud83d\udccb 120 - 42% open \u00b7 \u23f1\ufe0f 01.05.2024):      <pre><code>git clone https://github.com/liiight/notifiers\n</code></pre> - [PyPi](https://pypi.org/project/notifiers) (\ud83d\udce5 1.4M / month \u00b7 \ud83d\udce6 36 \u00b7 \u23f1\ufe0f 10.02.2022):     <pre><code>pip install notifiers\n</code></pre> - [Conda](https://anaconda.org/conda-forge/notifiers) (\ud83d\udce5 38K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge notifiers\n</code></pre> wasabi (\ud83e\udd4928 \u00b7  \u2b50 440) - A lightweight console printing and formatting toolkit. <code>MIT</code>  - [GitHub](https://github.com/explosion/wasabi) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 22 \u00b7 \ud83d\udce6 46K \u00b7 \ud83d\udccb 9 - 44% open \u00b7 \u23f1\ufe0f 03.11.2023):      <pre><code>git clone https://github.com/ines/wasabi\n</code></pre> - [PyPi](https://pypi.org/project/wasabi) (\ud83d\udce5 11M / month \u00b7 \ud83d\udce6 210 \u00b7 \u23f1\ufe0f 07.06.2023):     <pre><code>pip install wasabi\n</code></pre> - [Conda](https://anaconda.org/conda-forge/wasabi) (\ud83d\udce5 1.3M \u00b7 \u23f1\ufe0f 11.05.2024):     <pre><code>conda install -c conda-forge wasabi\n</code></pre> stackprinter (\ud83e\udd4926 \u00b7  \u2b50 1.3K) - Debugging-friendly exceptions for Python. <code>MIT</code>  - [GitHub](https://github.com/cknd/stackprinter) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 38 \u00b7 \ud83d\udce6 350 \u00b7 \ud83d\udccb 36 - 30% open \u00b7 \u23f1\ufe0f 13.03.2024):      <pre><code>git clone https://github.com/cknd/stackprinter\n</code></pre> - [PyPi](https://pypi.org/project/stackprinter) (\ud83d\udce5 310K / month \u00b7 \ud83d\udce6 48 \u00b7 \u23f1\ufe0f 13.03.2024):     <pre><code>pip install stackprinter\n</code></pre> - [Conda](https://anaconda.org/conda-forge/stackprinter) (\ud83d\udce5 10K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge stackprinter\n</code></pre> python-devtools (\ud83e\udd4923 \u00b7  \u2b50 960) - Dev tools for python. <code>MIT</code>  - [GitHub](https://github.com/samuelcolvin/python-devtools) (\ud83d\udc68\u200d\ud83d\udcbb 13 \u00b7 \ud83d\udd00 49 \u00b7 \ud83d\udce6 5.6K \u00b7 \ud83d\udccb 63 - 38% open \u00b7 \u23f1\ufe0f 26.01.2024):      <pre><code>git clone https://github.com/samuelcolvin/python-devtools\n</code></pre> - [PyPi](https://pypi.org/project/python-devtools) (\ud83d\udce5 1.3K / month \u00b7 \u23f1\ufe0f 21.08.2017):     <pre><code>pip install python-devtools\n</code></pre> - [Conda](https://anaconda.org/conda-forge/python-devtools) (\ud83d\udce5 23K \u00b7 \u23f1\ufe0f 06.09.2023):     <pre><code>conda install -c conda-forge python-devtools\n</code></pre> Show 8 hidden projects...  - python-json-logger (\ud83e\udd4835 \u00b7  \u2b50 1.7K \u00b7 \ud83d\udc80) - Json Formatter for the standard python logger. <code>BSD-2</code> - tabulate (\ud83e\udd4833 \u00b7  \u2b50 2K \u00b7 \ud83d\udc80) - Pretty-print tabular data in Python, a library and a command-line.. <code>MIT</code> - prettytable (\ud83e\udd4833 \u00b7  \u2b50 1.3K) - Display tabular data in a visually appealing ASCII table.. <code>\u2757\ufe0fBSD-1-Clause</code> - python-coloredlogs (\ud83e\udd4928 \u00b7  \u2b50 540 \u00b7 \ud83d\udc80) - Colored terminal output for Pythons logging module. <code>MIT</code> - rebound (\ud83e\udd4925 \u00b7  \u2b50 4.1K \u00b7 \ud83d\udc80) - Command-line tool that instantly fetches Stack Overflow results.. <code>\u2757\ufe0fGPL-2.0</code> - PrettyErrors (\ud83e\udd4925 \u00b7  \u2b50 2.8K \u00b7 \ud83d\udc80) - Prettify Python exception output to make it legible. <code>MIT</code> - better-exceptions (\ud83e\udd4924 \u00b7  \u2b50 4.6K \u00b7 \ud83d\udc80) - Pretty and useful exceptions in Python, automatically. <code>MIT</code> - tbvaccine (\ud83e\udd4916 \u00b7  \u2b50 380 \u00b7 \ud83d\udc80) - A small utility to pretty-print Python tracebacks. <code>MIT</code>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#shell","title":"Shell","text":"xxh (\ud83e\udd4925 \u00b7  \u2b50 5K) - Bring your favorite shell wherever you go through the ssh. Xonsh shell, fish,.. <code>BSD-2</code>  - [GitHub](https://github.com/xxh/xxh) (\ud83d\udc68\u200d\ud83d\udcbb 27 \u00b7 \ud83d\udd00 100 \u00b7 \ud83d\udce5 2.5K \u00b7 \ud83d\udce6 87 \u00b7 \ud83d\udccb 87 - 27% open \u00b7 \u23f1\ufe0f 06.04.2024):      <pre><code>git clone https://github.com/xxh/xxh\n</code></pre> - [PyPi](https://pypi.org/project/xxh-xxh) (\ud83d\udce5 800 / month \u00b7 \u23f1\ufe0f 06.04.2024):     <pre><code>pip install xxh-xxh\n</code></pre> Show 1 hidden projects...  - xonsh (\ud83e\udd4734 \u00b7  \u2b50 8.1K) - Python-powered, cross-platform, Unix-gazing shell. <code>\u2757\ufe0fBSD-1-Clause</code>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#documentation","title":"Documentation","text":"<p>\ud83d\udd17\u00a0best-of-mkdocs ( \u2b50 860)  - Collection of MkDocs projects and plugins.</p> sphinx (\ud83e\udd4746 \u00b7  \u2b50 6.1K) - The Sphinx documentation generator. <code>BSD-3</code> <code></code>  - [GitHub](https://github.com/sphinx-doc/sphinx) (\ud83d\udc68\u200d\ud83d\udcbb 830 \u00b7 \ud83d\udd00 2K \u00b7 \ud83d\udce6 380K \u00b7 \ud83d\udccb 7K - 17% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/sphinx-doc/sphinx\n</code></pre> - [PyPi](https://pypi.org/project/sphinx) (\ud83d\udce5 15M / month \u00b7 \ud83d\udce6 22K \u00b7 \u23f1\ufe0f 19.04.2024):     <pre><code>pip install sphinx\n</code></pre> - [Conda](https://anaconda.org/conda-forge/sphinx) (\ud83d\udce5 9.2M \u00b7 \u23f1\ufe0f 19.04.2024):     <pre><code>conda install -c conda-forge sphinx\n</code></pre> mkdocs-material (\ud83e\udd4742 \u00b7  \u2b50 19K) - Documentation that simply works. <code>MIT</code> <code></code>  - [GitHub](https://github.com/squidfunk/mkdocs-material) (\ud83d\udc68\u200d\ud83d\udcbb 270 \u00b7 \ud83d\udd00 3.3K \u00b7 \ud83d\udce6 48K \u00b7 \ud83d\udccb 2.3K - 0% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/squidfunk/mkdocs-material\n</code></pre> - [PyPi](https://pypi.org/project/mkdocs-material) (\ud83d\udce5 4.5M / month \u00b7 \ud83d\udce6 2.5K \u00b7 \u23f1\ufe0f 27.05.2024):     <pre><code>pip install mkdocs-material\n</code></pre> - [Conda](https://anaconda.org/conda-forge/mkdocs-material) (\ud83d\udce5 390K \u00b7 \u23f1\ufe0f 20.05.2024):     <pre><code>conda install -c conda-forge mkdocs-material\n</code></pre> mkdocs (\ud83e\udd4742 \u00b7  \u2b50 18K) - Project documentation with Markdown. <code>BSD-2</code> <code></code>  - [GitHub](https://github.com/mkdocs/mkdocs) (\ud83d\udc68\u200d\ud83d\udcbb 250 \u00b7 \ud83d\udd00 2.4K \u00b7 \ud83d\udce6 62K \u00b7 \ud83d\udccb 2K - 3% open \u00b7 \u23f1\ufe0f 10.05.2024):      <pre><code>git clone https://github.com/mkdocs/mkdocs\n</code></pre> - [PyPi](https://pypi.org/project/mkdocs) (\ud83d\udce5 3.7M / month \u00b7 \ud83d\udce6 3.5K \u00b7 \u23f1\ufe0f 20.04.2024):     <pre><code>pip install mkdocs\n</code></pre> - [Conda](https://anaconda.org/conda-forge/mkdocs) (\ud83d\udce5 340K \u00b7 \u23f1\ufe0f 27.04.2024):     <pre><code>conda install -c conda-forge mkdocs\n</code></pre> sphinx_rtd_theme (\ud83e\udd4836 \u00b7  \u2b50 4.7K) - Sphinx theme for readthedocs.org. <code>MIT</code> <code></code>  - [GitHub](https://github.com/readthedocs/sphinx_rtd_theme) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 1.7K \u00b7 \ud83d\udce6 16 \u00b7 \ud83d\udccb 870 - 28% open \u00b7 \u23f1\ufe0f 25.01.2024):      <pre><code>git clone https://github.com/readthedocs/sphinx_rtd_theme\n</code></pre> - [PyPi](https://pypi.org/project/sphinx_rtd_theme) (\ud83d\udce5 5M / month \u00b7 \ud83d\udce6 12K \u00b7 \u23f1\ufe0f 28.11.2023):     <pre><code>pip install sphinx_rtd_theme\n</code></pre> - [Conda](https://anaconda.org/conda-forge/sphinx_rtd_theme) (\ud83d\udce5 3.8M \u00b7 \u23f1\ufe0f 28.11.2023):     <pre><code>conda install -c conda-forge sphinx_rtd_theme\n</code></pre> alabaster (\ud83e\udd4833 \u00b7  \u2b50 720) - Lightweight, configurable Sphinx theme. <code>BSD-3</code> <code></code>  - [GitHub](https://github.com/sphinx-doc/alabaster) (\ud83d\udc68\u200d\ud83d\udcbb 37 \u00b7 \ud83d\udd00 180 \u00b7 \ud83d\udce6 130K \u00b7 \ud83d\udccb 120 - 49% open \u00b7 \u23f1\ufe0f 10.01.2024):      <pre><code>git clone https://github.com/bitprophet/alabaster\n</code></pre> - [PyPi](https://pypi.org/project/alabaster) (\ud83d\udce5 11M / month \u00b7 \ud83d\udce6 580 \u00b7 \u23f1\ufe0f 10.01.2024):     <pre><code>pip install alabaster\n</code></pre> - [Conda](https://anaconda.org/conda-forge/alabaster) (\ud83d\udce5 7.5M \u00b7 \u23f1\ufe0f 10.01.2024):     <pre><code>conda install -c conda-forge alabaster\n</code></pre> mkdocstrings (\ud83e\udd4832 \u00b7  \u2b50 1.6K) - Automatic documentation from sources, for MkDocs. <code>ISC</code> <code></code>  - [GitHub](https://github.com/mkdocstrings/mkdocstrings) (\ud83d\udc68\u200d\ud83d\udcbb 42 \u00b7 \ud83d\udd00 100 \u00b7 \ud83d\udce6 13K \u00b7 \ud83d\udccb 390 - 12% open \u00b7 \u23f1\ufe0f 05.05.2024):      <pre><code>git clone https://github.com/mkdocstrings/mkdocstrings\n</code></pre> - [PyPi](https://pypi.org/project/mkdocstrings) (\ud83d\udce5 1.3M / month \u00b7 \ud83d\udce6 970 \u00b7 \u23f1\ufe0f 05.05.2024):     <pre><code>pip install mkdocstrings\n</code></pre> - [Conda](https://anaconda.org/conda-forge/mkdocstrings) (\ud83d\udce5 120K \u00b7 \u23f1\ufe0f 05.05.2024):     <pre><code>conda install -c conda-forge mkdocstrings\n</code></pre> breathe (\ud83e\udd4832 \u00b7  \u2b50 730 \u00b7 \ud83d\udca4) - ReStructuredText and Sphinx bridge to Doxygen. <code>BSD-3</code>  - [GitHub](https://github.com/breathe-doc/breathe) (\ud83d\udc68\u200d\ud83d\udcbb 110 \u00b7 \ud83d\udd00 190 \u00b7 \ud83d\udce5 620 \u00b7 \ud83d\udce6 14K \u00b7 \ud83d\udccb 580 - 31% open \u00b7 \u23f1\ufe0f 24.10.2023):      <pre><code>git clone https://github.com/michaeljones/breathe\n</code></pre> - [PyPi](https://pypi.org/project/breathe) (\ud83d\udce5 760K / month \u00b7 \ud83d\udce6 86 \u00b7 \u23f1\ufe0f 28.02.2023):     <pre><code>pip install breathe\n</code></pre> - [Conda](https://anaconda.org/conda-forge/breathe) (\ud83d\udce5 560K \u00b7 \u23f1\ufe0f 04.07.2023):     <pre><code>conda install -c conda-forge breathe\n</code></pre> sphinx-autodoc-typehints (\ud83e\udd4832 \u00b7  \u2b50 530) - Type hints support for the Sphinx autodoc extension. <code>MIT</code> <code></code>  - [GitHub](https://github.com/tox-dev/sphinx-autodoc-typehints) (\ud83d\udc68\u200d\ud83d\udcbb 55 \u00b7 \ud83d\udd00 100 \u00b7 \ud83d\udce6 50K \u00b7 \ud83d\udccb 200 - 19% open \u00b7 \u23f1\ufe0f 24.05.2024):      <pre><code>git clone https://github.com/tox-dev/sphinx-autodoc-typehints\n</code></pre> - [PyPi](https://pypi.org/project/sphinx-autodoc-typehints) (\ud83d\udce5 1.8M / month \u00b7 \ud83d\udce6 2.7K \u00b7 \u23f1\ufe0f 17.04.2024):     <pre><code>pip install sphinx-autodoc-typehints\n</code></pre> - [Conda](https://anaconda.org/conda-forge/sphinx-autodoc-typehints) (\ud83d\udce5 700K \u00b7 \u23f1\ufe0f 18.04.2024):     <pre><code>conda install -c conda-forge sphinx-autodoc-typehints\n</code></pre> Griffe (\ud83e\udd4832 \u00b7  \u2b50 260) - Signatures for entire Python programs. Extract the structure, the frame,.. <code>ISC</code>  - [GitHub](https://github.com/mkdocstrings/griffe) (\ud83d\udc68\u200d\ud83d\udcbb 28 \u00b7 \ud83d\udd00 37 \u00b7 \ud83d\udce6 5.5K \u00b7 \ud83d\udccb 200 - 14% open \u00b7 \u23f1\ufe0f 23.05.2024):      <pre><code>git clone https://github.com/mkdocstrings/griffe\n</code></pre> - [PyPi](https://pypi.org/project/griffe) (\ud83d\udce5 1.4M / month \u00b7 \ud83d\udce6 100 \u00b7 \u23f1\ufe0f 23.05.2024):     <pre><code>pip install griffe\n</code></pre> - [Conda](https://anaconda.org/conda-forge/griffe) (\ud83d\udce5 250K \u00b7 \u23f1\ufe0f 24.05.2024):     <pre><code>conda install -c conda-forge griffe\n</code></pre> pdoc (\ud83e\udd4831 \u00b7  \u2b50 1.8K \u00b7 \ud83d\udcc9) - API Documentation for Python Projects. <code>Unlicense</code>  - [GitHub](https://github.com/mitmproxy/pdoc) (\ud83d\udc68\u200d\ud83d\udcbb 66 \u00b7 \ud83d\udd00 190 \u00b7 \ud83d\udce6 2.8K \u00b7 \ud83d\udccb 370 - 7% open \u00b7 \u23f1\ufe0f 18.05.2024):      <pre><code>git clone https://github.com/mitmproxy/pdoc\n</code></pre> - [PyPi](https://pypi.org/project/pdoc) (\ud83d\udce5 260K / month \u00b7 \ud83d\udce6 400 \u00b7 \u23f1\ufe0f 18.05.2024):     <pre><code>pip install pdoc\n</code></pre> sphinx-autobuild (\ud83e\udd4831 \u00b7  \u2b50 520) - Watch a Sphinx directory and rebuild the documentation.. <code>MIT</code> <code></code>  - [GitHub](https://github.com/sphinx-doc/sphinx-autobuild) (\ud83d\udc68\u200d\ud83d\udcbb 30 \u00b7 \ud83d\udd00 75 \u00b7 \ud83d\udce6 23K \u00b7 \ud83d\udccb 90 - 25% open \u00b7 \u23f1\ufe0f 06.05.2024):      <pre><code>git clone https://github.com/executablebooks/sphinx-autobuild\n</code></pre> - [PyPi](https://pypi.org/project/sphinx-autobuild) (\ud83d\udce5 920K / month \u00b7 \ud83d\udce6 1.4K \u00b7 \u23f1\ufe0f 16.04.2024):     <pre><code>pip install sphinx-autobuild\n</code></pre> - [Conda](https://anaconda.org/conda-forge/sphinx-autobuild) (\ud83d\udce5 250K \u00b7 \u23f1\ufe0f 17.04.2024):     <pre><code>conda install -c conda-forge sphinx-autobuild\n</code></pre> pdoc3 (\ud83e\udd4929 \u00b7  \u2b50 1.1K) - Auto-generate API documentation for Python projects. <code>\u2757\ufe0fAGPL-3.0</code>  - [GitHub](https://github.com/pdoc3/pdoc) (\ud83d\udc68\u200d\ud83d\udcbb 61 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce6 4.1K \u00b7 \ud83d\udccb 330 - 37% open \u00b7 \u23f1\ufe0f 11.03.2024):      <pre><code>git clone https://github.com/pdoc3/pdoc\n</code></pre> - [PyPi](https://pypi.org/project/pdoc3) (\ud83d\udce5 240K / month \u00b7 \ud83d\udce6 390 \u00b7 \u23f1\ufe0f 03.08.2021):     <pre><code>pip install pdoc3\n</code></pre> - [Conda](https://anaconda.org/anaconda/pdoc3) (\ud83d\udce5 1.9K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c anaconda pdoc3\n</code></pre> interrogate (\ud83e\udd4929 \u00b7  \u2b50 550) - Explain yourself! Interrogate a codebase for docstring coverage. <code>MIT</code>  - [GitHub](https://github.com/econchick/interrogate) (\ud83d\udc68\u200d\ud83d\udcbb 17 \u00b7 \ud83d\udd00 45 \u00b7 \ud83d\udce6 6.5K \u00b7 \ud83d\udccb 68 - 45% open \u00b7 \u23f1\ufe0f 20.05.2024):      <pre><code>git clone https://github.com/econchick/interrogate\n</code></pre> - [PyPi](https://pypi.org/project/interrogate) (\ud83d\udce5 140K / month \u00b7 \ud83d\udce6 360 \u00b7 \u23f1\ufe0f 07.04.2024):     <pre><code>pip install interrogate\n</code></pre> blacken-docs (\ud83e\udd4927 \u00b7  \u2b50 620) - Run `black` on python code blocks in documentation files. <code>MIT</code>  - [GitHub](https://github.com/adamchainz/blacken-docs) (\ud83d\udc68\u200d\ud83d\udcbb 22 \u00b7 \ud83d\udd00 41 \u00b7 \ud83d\udce6 930 \u00b7 \ud83d\udccb 75 - 12% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/asottile/blacken-docs\n</code></pre> - [PyPi](https://pypi.org/project/blacken-docs) (\ud83d\udce5 120K / month \u00b7 \ud83d\udce6 83 \u00b7 \u23f1\ufe0f 16.08.2023):     <pre><code>pip install blacken-docs\n</code></pre> - [Conda](https://anaconda.org/conda-forge/blacken-docs) (\ud83d\udce5 35K \u00b7 \u23f1\ufe0f 16.08.2023):     <pre><code>conda install -c conda-forge blacken-docs\n</code></pre> mkdocs-awesome-pages-plugin (\ud83e\udd4924 \u00b7  \u2b50 440) - An MkDocs plugin that simplifies configuring page.. <code>MIT</code> <code></code>  - [GitHub](https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 34 \u00b7 \ud83d\udce6 4.2K \u00b7 \ud83d\udccb 83 - 24% open \u00b7 \u23f1\ufe0f 09.03.2024):      <pre><code>git clone https://github.com/lukasgeiter/mkdocs-awesome-pages-plugin\n</code></pre> - [PyPi](https://pypi.org/project/mkdocs-awesome-pages-plugin) (\ud83d\udce5 290K / month \u00b7 \ud83d\udce6 150 \u00b7 \u23f1\ufe0f 19.08.2023):     <pre><code>pip install mkdocs-awesome-pages-plugin\n</code></pre> sphinx-markdown-builder (\ud83e\udd4924 \u00b7  \u2b50 160 \u00b7 \ud83d\udca4) - DISCONTINUED: sphinx builder that outputs markdown.. <code>MIT</code> <code></code>  - [GitHub](https://github.com/clayrisser/sphinx-markdown-builder) (\ud83d\udc68\u200d\ud83d\udcbb 19 \u00b7 \ud83d\udd00 60 \u00b7 \ud83d\udce6 840 \u00b7 \u23f1\ufe0f 24.06.2023):      <pre><code>git clone https://github.com/clayrisser/sphinx-markdown-builder\n</code></pre> - [PyPi](https://pypi.org/project/sphinx-markdown-builder) (\ud83d\udce5 72K / month \u00b7 \ud83d\udce6 120 \u00b7 \u23f1\ufe0f 16.01.2024):     <pre><code>pip install sphinx-markdown-builder\n</code></pre> lazydocs (\ud83e\udd4923 \u00b7  \u2b50 180) - Generate markdown API documentation from Google-style Python docstring... <code>MIT</code>  - [GitHub](https://github.com/ml-tooling/lazydocs) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 37 \u00b7 \ud83d\udce6 220 \u00b7 \ud83d\udccb 34 - 17% open \u00b7 \u23f1\ufe0f 16.01.2024):      <pre><code>git clone https://github.com/ml-tooling/lazydocs\n</code></pre> - [PyPi](https://pypi.org/project/lazydocs) (\ud83d\udce5 8.2K / month \u00b7 \ud83d\udce6 22 \u00b7 \u23f1\ufe0f 27.07.2021):     <pre><code>pip install lazydocs\n</code></pre> releases (\ud83e\udd4923 \u00b7  \u2b50 170) - A powerful Sphinx changelog-generating extension. <code>BSD-2</code> <code></code>  - [GitHub](https://github.com/bitprophet/releases) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 41 \u00b7 \ud83d\udce6 630 \u00b7 \ud83d\udccb 77 - 40% open \u00b7 \u23f1\ufe0f 01.12.2023):      <pre><code>git clone https://github.com/bitprophet/releases\n</code></pre> - [PyPi](https://pypi.org/project/releases) (\ud83d\udce5 16K / month \u00b7 \ud83d\udce6 39 \u00b7 \u23f1\ufe0f 28.04.2023):     <pre><code>pip install releases\n</code></pre> - [Conda](https://anaconda.org/conda-forge/sphinx-releases) (\ud83d\udce5 51K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge sphinx-releases\n</code></pre> mkdocs-print-site-plugin (\ud83e\udd4923 \u00b7  \u2b50 120) - MkDocs Plugin that adds an additional page that.. <code>MIT</code> <code></code>  - [GitHub](https://github.com/timvink/mkdocs-print-site-plugin) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 19 \u00b7 \ud83d\udce6 310 \u00b7 \ud83d\udccb 91 - 15% open \u00b7 \u23f1\ufe0f 23.05.2024):      <pre><code>git clone https://github.com/timvink/mkdocs-print-site-plugin\n</code></pre> - [PyPi](https://pypi.org/project/mkdocs-print-site-plugin) (\ud83d\udce5 21K / month \u00b7 \ud83d\udce6 10 \u00b7 \u23f1\ufe0f 08.05.2024):     <pre><code>pip install mkdocs-print-site-plugin\n</code></pre> Show 9 hidden projects...  - numpydoc (\ud83e\udd4831 \u00b7  \u2b50 280) - Numpys Sphinx extensions. <code>\u2757Unlicensed</code> <code></code> - sphinx-bootstrap-theme (\ud83e\udd4926 \u00b7  \u2b50 590 \u00b7 \ud83d\udc80) - Sphinx Bootstrap Theme. <code>MIT</code> <code></code> - pytkdocs (\ud83e\udd4924 \u00b7  \u2b50 49 \u00b7 \ud83d\udc80) - Load Python objects documentation. <code>ISC</code> - mkdocs-with-pdf (\ud83e\udd4923 \u00b7  \u2b50 310 \u00b7 \ud83d\udc80) - Generate a single PDF file from MkDocs repository. <code>MIT</code> <code></code> - portray (\ud83e\udd4922 \u00b7  \u2b50 860 \u00b7 \ud83d\udc80) - Your Project with Great Documentation. <code>MIT</code> - pycco (\ud83e\udd4922 \u00b7  \u2b50 840 \u00b7 \ud83d\udc80) - Literate-style documentation generator. <code>MIT</code> - mkdocs-pdf-export-plugin (\ud83e\udd4922 \u00b7  \u2b50 310 \u00b7 \ud83d\udc80) - An MkDocs plugin to export content pages as PDF files. <code>MIT</code> <code></code> - mkdocs-git-revision-date-plugin (\ud83e\udd4920 \u00b7  \u2b50 56 \u00b7 \ud83d\udc80) - MkDocs plugin for setting revision date from git per.. <code>MIT</code> <code></code> - mkdocs-versioning (\ud83e\udd4917 \u00b7  \u2b50 40 \u00b7 \ud83d\udc80) - A tool that allows for versioning sites built with.. <code>MIT</code> <code></code> <p></p>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#debugging-tools","title":"Debugging Tools","text":"pyelftools (\ud83e\udd4733 \u00b7  \u2b50 1.9K) - Parsing ELF and DWARF in Python. <code>Unlicense</code>  - [GitHub](https://github.com/eliben/pyelftools) (\ud83d\udc68\u200d\ud83d\udcbb 100 \u00b7 \ud83d\udd00 500 \u00b7 \ud83d\udce6 7.6K \u00b7 \ud83d\udccb 260 - 28% open \u00b7 \u23f1\ufe0f 15.05.2024):      <pre><code>git clone https://github.com/eliben/pyelftools\n</code></pre> - [PyPi](https://pypi.org/project/pyelftools) (\ud83d\udce5 3.9M / month \u00b7 \ud83d\udce6 230 \u00b7 \u23f1\ufe0f 14.03.2024):     <pre><code>pip install pyelftools\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pyelftools) (\ud83d\udce5 160K \u00b7 \u23f1\ufe0f 14.03.2024):     <pre><code>conda install -c conda-forge pyelftools\n</code></pre> pudb (\ud83e\udd4732 \u00b7  \u2b50 2.9K) - Full-screen console debugger for Python. <code>MIT</code>  - [GitHub](https://github.com/inducer/pudb) (\ud83d\udc68\u200d\ud83d\udcbb 95 \u00b7 \ud83d\udd00 220 \u00b7 \ud83d\udce6 6.4K \u00b7 \ud83d\udccb 340 - 46% open \u00b7 \u23f1\ufe0f 29.04.2024):      <pre><code>git clone https://github.com/inducer/pudb\n</code></pre> - [PyPi](https://pypi.org/project/pudb) (\ud83d\udce5 220K / month \u00b7 \ud83d\udce6 94 \u00b7 \u23f1\ufe0f 16.01.2024):     <pre><code>pip install pudb\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pudb) (\ud83d\udce5 260K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge pudb\n</code></pre> PySnooper (\ud83e\udd4831 \u00b7  \u2b50 16K) - Never use print for debugging again. <code>MIT</code>  - [GitHub](https://github.com/cool-RR/PySnooper) (\ud83d\udc68\u200d\ud83d\udcbb 27 \u00b7 \ud83d\udd00 950 \u00b7 \ud83d\udce6 1.8K \u00b7 \ud83d\udccb 130 - 20% open \u00b7 \u23f1\ufe0f 13.01.2024):      <pre><code>git clone https://github.com/cool-RR/PySnooper\n</code></pre> - [PyPi](https://pypi.org/project/pysnooper) (\ud83d\udce5 280K / month \u00b7 \ud83d\udce6 49 \u00b7 \u23f1\ufe0f 15.07.2023):     <pre><code>pip install pysnooper\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pysnooper) (\ud83d\udce5 76K \u00b7 \u23f1\ufe0f 27.07.2023):     <pre><code>conda install -c conda-forge pysnooper\n</code></pre> ipdb (\ud83e\udd4831 \u00b7  \u2b50 1.8K \u00b7 \ud83d\udca4) - Integration of IPython pdb. <code>BSD-3</code>  - [GitHub](https://github.com/gotcha/ipdb) (\ud83d\udc68\u200d\ud83d\udcbb 58 \u00b7 \ud83d\udd00 150 \u00b7 \ud83d\udce6 56K \u00b7 \ud83d\udccb 200 - 33% open \u00b7 \u23f1\ufe0f 03.08.2023):      <pre><code>git clone https://github.com/gotcha/ipdb\n</code></pre> - [PyPi](https://pypi.org/project/ipdb) (\ud83d\udce5 3.6M / month \u00b7 \ud83d\udce6 1K \u00b7 \u23f1\ufe0f 09.03.2023):     <pre><code>pip install ipdb\n</code></pre> - [Conda](https://anaconda.org/conda-forge/ipdb) (\ud83d\udce5 460K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge ipdb\n</code></pre> icecream (\ud83e\udd4829 \u00b7  \u2b50 8.6K) - Never use print() to debug again. <code>MIT</code>  - [GitHub](https://github.com/gruns/icecream) (\ud83d\udc68\u200d\ud83d\udcbb 21 \u00b7 \ud83d\udd00 180 \u00b7 \ud83d\udce6 21 \u00b7 \ud83d\udccb 150 - 52% open \u00b7 \u23f1\ufe0f 01.02.2024):      <pre><code>git clone https://github.com/gruns/icecream\n</code></pre> - [PyPi](https://pypi.org/project/icecream) (\ud83d\udce5 430K / month \u00b7 \ud83d\udce6 320 \u00b7 \u23f1\ufe0f 21.07.2022):     <pre><code>pip install icecream\n</code></pre> - [Conda](https://anaconda.org/conda-forge/icecream) (\ud83d\udce5 40K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge icecream\n</code></pre> gdbgui (\ud83e\udd4928 \u00b7  \u2b50 9.7K \u00b7 \ud83d\udca4) - Browser-based frontend to gdb (gnu debugger). Add breakpoints,.. <code>\u2757\ufe0fGPL-3.0</code>  - [GitHub](https://github.com/cs01/gdbgui) (\ud83d\udc68\u200d\ud83d\udcbb 45 \u00b7 \ud83d\udd00 550 \u00b7 \ud83d\udce5 17K \u00b7 \ud83d\udce6 400 \u00b7 \ud83d\udccb 320 - 46% open \u00b7 \u23f1\ufe0f 18.10.2023):      <pre><code>git clone https://github.com/cs01/gdbgui\n</code></pre> - [PyPi](https://pypi.org/project/gdbgui) (\ud83d\udce5 9.6K / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 18.10.2023):     <pre><code>pip install gdbgui\n</code></pre> python-hunter (\ud83e\udd4926 \u00b7  \u2b50 780) - Hunter is a flexible code tracing toolkit. <code>BSD-2</code>  - [GitHub](https://github.com/ionelmc/python-hunter) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 45 \u00b7 \ud83d\udce6 180 \u00b7 \ud83d\udccb 98 - 44% open \u00b7 \u23f1\ufe0f 02.05.2024):      <pre><code>git clone https://github.com/ionelmc/python-hunter\n</code></pre> - [PyPi](https://pypi.org/project/hunter) (\ud83d\udce5 13K / month \u00b7 \ud83d\udce6 17 \u00b7 \u23f1\ufe0f 02.05.2024):     <pre><code>pip install hunter\n</code></pre> - [Conda](https://anaconda.org/conda-forge/hunter) (\ud83d\udce5 68K \u00b7 \u23f1\ufe0f 02.05.2024):     <pre><code>conda install -c conda-forge hunter\n</code></pre> python-manhole (\ud83e\udd4922 \u00b7  \u2b50 370) - Debugging manhole for python applications. <code>BSD-2</code>  - [GitHub](https://github.com/ionelmc/python-manhole) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 24 \u00b7 \ud83d\udce6 280 \u00b7 \ud83d\udccb 22 - 31% open \u00b7 \u23f1\ufe0f 18.12.2023):      <pre><code>git clone https://github.com/ionelmc/python-manhole\n</code></pre> - [PyPi](https://pypi.org/project/manhole) (\ud83d\udce5 52K / month \u00b7 \ud83d\udce6 6 \u00b7 \u23f1\ufe0f 08.04.2021):     <pre><code>pip install manhole\n</code></pre> - [Conda](https://anaconda.org/conda-forge/manhole) (\ud83d\udce5 22K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge manhole\n</code></pre> pyrasite (\ud83e\udd4921 \u00b7  \u2b50 2.8K \u00b7 \ud83d\udca4) - Inject code into running Python processes. <code>\u2757\ufe0fGPL-3.0</code>  - [GitHub](https://github.com/lmacken/pyrasite) (\ud83d\udc68\u200d\ud83d\udcbb 24 \u00b7 \ud83d\udd00 200 \u00b7 \ud83d\udce6 57 \u00b7 \ud83d\udccb 57 - 71% open \u00b7 \u23f1\ufe0f 08.10.2023):      <pre><code>git clone https://github.com/lmacken/pyrasite\n</code></pre> - [PyPi](https://pypi.org/project/pyrasite) (\ud83d\udce5 6.6K / month \u00b7 \u23f1\ufe0f 09.05.2012):     <pre><code>pip install pyrasite\n</code></pre> reloadium (\ud83e\udd4920 \u00b7  \u2b50 2.7K) - Hot Reloading and Profiling for Python. <code>Apache-2</code>  - [GitHub](https://github.com/reloadware/reloadium) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 55 \u00b7 \ud83d\udccb 140 - 13% open \u00b7 \u23f1\ufe0f 24.05.2024):      <pre><code>git clone https://github.com/reloadware/reloadium\n</code></pre> - [PyPi](https://pypi.org/project/reloadium) (\ud83d\udce5 4.5K / month \u00b7 \u23f1\ufe0f 22.05.2024):     <pre><code>pip install reloadium\n</code></pre> Birdseye (\ud83e\udd4920 \u00b7  \u2b50 1.6K \u00b7 \ud83d\udca4) - Graphical Python debugger which lets you easily view the values of.. <code>MIT</code>  - [GitHub](https://github.com/alexmojaki/birdseye) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 74 \u00b7 \ud83d\udccb 57 - 36% open \u00b7 \u23f1\ufe0f 16.10.2023):      <pre><code>git clone https://github.com/alexmojaki/birdseye\n</code></pre> - [PyPi](https://pypi.org/project/birdseye) (\ud83d\udce5 1.2K / month \u00b7 \ud83d\udce6 8 \u00b7 \u23f1\ufe0f 16.10.2023):     <pre><code>pip install birdseye\n</code></pre> Show 2 hidden projects...  - pdbpp (\ud83e\udd4928 \u00b7  \u2b50 1.3K \u00b7 \ud83d\udc80) - pdb++, a drop-in replacement for pdb (the Python debugger). <code>BSD-3</code> - snoop (\ud83e\udd4924 \u00b7  \u2b50 1.2K \u00b7 \ud83d\udc80) - A powerful set of Python debugging tools, based on PySnooper. <code>MIT</code>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#testing-tools","title":"Testing Tools","text":"<p>\ud83d\udd17\u00a0best-of-web-python - Testing ( \u2b50 2.2K)  - Testing libraries &amp; tools for python web frameworks.</p> <p>\ud83d\udd17\u00a0unittest  - Unittest is a test framework included in the Python standard library.</p> pytest (\ud83e\udd4748 \u00b7  \u2b50 11K) - The pytest framework makes it easy to write small tests, yet scales to.. <code>MIT</code> <code></code>  - [GitHub](https://github.com/pytest-dev/pytest) (\ud83d\udc68\u200d\ud83d\udcbb 970 \u00b7 \ud83d\udd00 2.5K \u00b7 \ud83d\udce5 1K \u00b7 \ud83d\udce6 1.2M \u00b7 \ud83d\udccb 5.8K - 14% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/pytest-dev/pytest\n</code></pre> - [PyPi](https://pypi.org/project/pytest) (\ud83d\udce5 130M / month \u00b7 \ud83d\udce6 44K \u00b7 \u23f1\ufe0f 19.05.2024):     <pre><code>pip install pytest\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest) (\ud83d\udce5 26M \u00b7 \u23f1\ufe0f 20.05.2024):     <pre><code>conda install -c conda-forge pytest\n</code></pre> hypothesis (\ud83e\udd4742 \u00b7  \u2b50 7.3K) - Hypothesis is a powerful, flexible, and easy to use library for.. <code>MPL-2.0</code>  - [GitHub](https://github.com/HypothesisWorks/hypothesis) (\ud83d\udc68\u200d\ud83d\udcbb 330 \u00b7 \ud83d\udd00 580 \u00b7 \ud83d\udce6 27K \u00b7 \ud83d\udccb 1.5K - 2% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/HypothesisWorks/hypothesis\n</code></pre> - [PyPi](https://pypi.org/project/hypothesis) (\ud83d\udce5 8.9M / month \u00b7 \ud83d\udce6 2K \u00b7 \u23f1\ufe0f 29.05.2024):     <pre><code>pip install hypothesis\n</code></pre> - [Conda](https://anaconda.org/conda-forge/hypothesis) (\ud83d\udce5 8.8M \u00b7 \u23f1\ufe0f 29.05.2024):     <pre><code>conda install -c conda-forge hypothesis\n</code></pre> robotframework (\ud83e\udd4740 \u00b7  \u2b50 9.2K) - Generic automation framework for acceptance testing and RPA. <code>Apache-2</code>  - [GitHub](https://github.com/robotframework/robotframework) (\ud83d\udc68\u200d\ud83d\udcbb 200 \u00b7 \ud83d\udd00 2.2K \u00b7 \ud83d\udce5 550 \u00b7 \ud83d\udce6 11K \u00b7 \ud83d\udccb 4.4K - 7% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/robotframework/robotframework\n</code></pre> - [PyPi](https://pypi.org/project/robotframework) (\ud83d\udce5 2.6M / month \u00b7 \ud83d\udce6 800 \u00b7 \u23f1\ufe0f 11.01.2024):     <pre><code>pip install robotframework\n</code></pre> - [Conda](https://anaconda.org/conda-forge/robotframework) (\ud83d\udce5 180K \u00b7 \u23f1\ufe0f 11.01.2024):     <pre><code>conda install -c conda-forge robotframework\n</code></pre> pytest-xdist (\ud83e\udd4740 \u00b7  \u2b50 1.4K) - pytest plugin for distributed testing and loop-on-failures.. <code>MIT</code> <code></code>  - [GitHub](https://github.com/pytest-dev/pytest-xdist) (\ud83d\udc68\u200d\ud83d\udcbb 100 \u00b7 \ud83d\udd00 220 \u00b7 \ud83d\udce5 37 \u00b7 \ud83d\udce6 99K \u00b7 \ud83d\udccb 630 - 40% open \u00b7 \u23f1\ufe0f 16.05.2024):      <pre><code>git clone https://github.com/pytest-dev/pytest-xdist\n</code></pre> - [PyPi](https://pypi.org/project/pytest-xdist) (\ud83d\udce5 25M / month \u00b7 \ud83d\udce6 3.8K \u00b7 \u23f1\ufe0f 28.04.2024):     <pre><code>pip install pytest-xdist\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest-xdist) (\ud83d\udce5 6M \u00b7 \u23f1\ufe0f 21.11.2023):     <pre><code>conda install -c conda-forge pytest-xdist\n</code></pre> playwright-python (\ud83e\udd4739 \u00b7  \u2b50 11K \u00b7 \ud83d\udcc8) - Python version of the Playwright testing and.. <code>Apache-2</code>  - [GitHub](https://github.com/microsoft/playwright-python) (\ud83d\udc68\u200d\ud83d\udcbb 39 \u00b7 \ud83d\udd00 820 \u00b7 \ud83d\udce6 16K \u00b7 \ud83d\udccb 1.3K - 2% open \u00b7 \u23f1\ufe0f 24.05.2024):      <pre><code>git clone https://github.com/microsoft/playwright-python\n</code></pre> - [PyPi](https://pypi.org/project/playwright) (\ud83d\udce5 3.4M / month \u00b7 \ud83d\udce6 930 \u00b7 \u23f1\ufe0f 17.05.2024):     <pre><code>pip install playwright\n</code></pre> tox (\ud83e\udd4739 \u00b7  \u2b50 3.6K) - Command line driven CI frontend and development task automation tool. <code>MIT</code> <code></code>  - [GitHub](https://github.com/tox-dev/tox) (\ud83d\udc68\u200d\ud83d\udcbb 310 \u00b7 \ud83d\udd00 500 \u00b7 \ud83d\udce6 120K \u00b7 \ud83d\udccb 1.7K - 5% open \u00b7 \u23f1\ufe0f 24.05.2024):      <pre><code>git clone https://github.com/tox-dev/tox\n</code></pre> - [PyPi](https://pypi.org/project/tox) (\ud83d\udce5 15M / month \u00b7 \ud83d\udce6 8.5K \u00b7 \u23f1\ufe0f 26.04.2024):     <pre><code>pip install tox\n</code></pre> - [Conda](https://anaconda.org/conda-forge/tox) (\ud83d\udce5 940K \u00b7 \u23f1\ufe0f 27.04.2024):     <pre><code>conda install -c conda-forge tox\n</code></pre> pytest-cov (\ud83e\udd4838 \u00b7  \u2b50 1.7K) - Coverage plugin for pytest. <code>MIT</code> <code></code>  - [GitHub](https://github.com/pytest-dev/pytest-cov) (\ud83d\udc68\u200d\ud83d\udcbb 89 \u00b7 \ud83d\udd00 210 \u00b7 \ud83d\udce6 320K \u00b7 \ud83d\udccb 400 - 37% open \u00b7 \u23f1\ufe0f 24.03.2024):      <pre><code>git clone https://github.com/pytest-dev/pytest-cov\n</code></pre> - [PyPi](https://pypi.org/project/pytest-cov) (\ud83d\udce5 52M / month \u00b7 \ud83d\udce6 27K \u00b7 \u23f1\ufe0f 24.03.2024):     <pre><code>pip install pytest-cov\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest-cov) (\ud83d\udce5 11M \u00b7 \u23f1\ufe0f 26.03.2024):     <pre><code>conda install -c conda-forge pytest-cov\n</code></pre> pyautogui (\ud83e\udd4836 \u00b7  \u2b50 9.7K \u00b7 \ud83d\udca4) - A cross-platform GUI automation Python module for human beings... <code>BSD-3</code>  - [GitHub](https://github.com/asweigart/pyautogui) (\ud83d\udc68\u200d\ud83d\udcbb 52 \u00b7 \ud83d\udd00 1.2K \u00b7 \ud83d\udce6 35K \u00b7 \ud83d\udccb 730 - 68% open \u00b7 \u23f1\ufe0f 07.06.2023):      <pre><code>git clone https://github.com/asweigart/pyautogui\n</code></pre> - [PyPi](https://pypi.org/project/pyautogui) (\ud83d\udce5 780K / month \u00b7 \ud83d\udce6 910 \u00b7 \u23f1\ufe0f 24.05.2023):     <pre><code>pip install pyautogui\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pyautogui) (\ud83d\udce5 230K \u00b7 \u23f1\ufe0f 16.10.2023):     <pre><code>conda install -c conda-forge pyautogui\n</code></pre> pytest-asyncio (\ud83e\udd4836 \u00b7  \u2b50 1.3K \u00b7 \ud83d\udcc9) - Asyncio support for pytest. <code>Apache-2</code> <code></code>  - [GitHub](https://github.com/pytest-dev/pytest-asyncio) (\ud83d\udc68\u200d\ud83d\udcbb 47 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce5 1.2K \u00b7 \ud83d\udce6 97K \u00b7 \ud83d\udccb 320 - 16% open \u00b7 \u23f1\ufe0f 21.05.2024):      <pre><code>git clone https://github.com/pytest-dev/pytest-asyncio\n</code></pre> - [PyPi](https://pypi.org/project/pytest-asyncio) (\ud83d\udce5 15M / month \u00b7 \ud83d\udce6 3.6K \u00b7 \u23f1\ufe0f 19.05.2024):     <pre><code>pip install pytest-asyncio\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest-asyncio) (\ud83d\udce5 1.9M \u00b7 \u23f1\ufe0f 29.04.2024):     <pre><code>conda install -c conda-forge pytest-asyncio\n</code></pre> pytest-mock (\ud83e\udd4835 \u00b7  \u2b50 1.8K) - Thin-wrapper around the mock package for easier use with pytest. <code>MIT</code> <code></code>  - [GitHub](https://github.com/pytest-dev/pytest-mock) (\ud83d\udc68\u200d\ud83d\udcbb 72 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce5 33 \u00b7 \ud83d\udce6 80K \u00b7 \ud83d\udccb 160 - 7% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/pytest-dev/pytest-mock\n</code></pre> - [PyPi](https://pypi.org/project/pytest-mock) (\ud83d\udce5 23M / month \u00b7 \ud83d\udce6 4.7K \u00b7 \u23f1\ufe0f 21.03.2024):     <pre><code>pip install pytest-mock\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest-mock) (\ud83d\udce5 2.6M \u00b7 \u23f1\ufe0f 22.03.2024):     <pre><code>conda install -c conda-forge pytest-mock\n</code></pre> mimesis (\ud83e\udd4834 \u00b7  \u2b50 4.3K) - Mimesis is a robust data generator for Python that can produce a wide.. <code>MIT</code>  - [GitHub](https://github.com/lk-geimfari/mimesis) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 330 \u00b7 \ud83d\udce5 580 \u00b7 \ud83d\udce6 1.8K \u00b7 \ud83d\udccb 360 - 4% open \u00b7 \u23f1\ufe0f 25.05.2024):      <pre><code>git clone https://github.com/lk-geimfari/mimesis\n</code></pre> - [PyPi](https://pypi.org/project/mimesis) (\ud83d\udce5 650K / month \u00b7 \ud83d\udce6 57 \u00b7 \u23f1\ufe0f 04.04.2024):     <pre><code>pip install mimesis\n</code></pre> - [Conda](https://anaconda.org/conda-forge/mimesis) (\ud83d\udce5 200K \u00b7 \u23f1\ufe0f 24.01.2024):     <pre><code>conda install -c conda-forge mimesis\n</code></pre> freezegun (\ud83e\udd4834 \u00b7  \u2b50 4K) - Let your Python tests travel through time. <code>Apache-2</code>  - [GitHub](https://github.com/spulec/freezegun) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 260 \u00b7 \ud83d\udce5 19 \u00b7 \ud83d\udccb 340 - 40% open \u00b7 \u23f1\ufe0f 11.05.2024):      <pre><code>git clone https://github.com/spulec/freezegun\n</code></pre> - [PyPi](https://pypi.org/project/freezegun) (\ud83d\udce5 11M / month \u00b7 \ud83d\udce6 870 \u00b7 \u23f1\ufe0f 11.05.2024):     <pre><code>pip install freezegun\n</code></pre> - [Conda](https://anaconda.org/conda-forge/freezegun) (\ud83d\udce5 1.6M \u00b7 \u23f1\ufe0f 24.04.2024):     <pre><code>conda install -c conda-forge freezegun\n</code></pre> pytest-bdd (\ud83e\udd4834 \u00b7  \u2b50 1.3K) - BDD library for the py.test runner. <code>MIT</code> <code></code>  - [GitHub](https://github.com/pytest-dev/pytest-bdd) (\ud83d\udc68\u200d\ud83d\udcbb 61 \u00b7 \ud83d\udd00 210 \u00b7 \ud83d\udce6 3.5K \u00b7 \ud83d\udccb 370 - 39% open \u00b7 \u23f1\ufe0f 17.03.2024):      <pre><code>git clone https://github.com/pytest-dev/pytest-bdd\n</code></pre> - [PyPi](https://pypi.org/project/pytest-bdd) (\ud83d\udce5 1.3M / month \u00b7 \ud83d\udce6 99 \u00b7 \u23f1\ufe0f 17.03.2024):     <pre><code>pip install pytest-bdd\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest-bdd) (\ud83d\udce5 58K \u00b7 \u23f1\ufe0f 17.03.2024):     <pre><code>conda install -c conda-forge pytest-bdd\n</code></pre> nose2 (\ud83e\udd4834 \u00b7  \u2b50 780) - The successor to nose, based on unittest2. <code>BSD-2</code>  - [GitHub](https://github.com/nose-devs/nose2) (\ud83d\udc68\u200d\ud83d\udcbb 80 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce6 25K \u00b7 \ud83d\udccb 270 - 18% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/nose-devs/nose2\n</code></pre> - [PyPi](https://pypi.org/project/nose2) (\ud83d\udce5 810K / month \u00b7 \ud83d\udce6 300 \u00b7 \u23f1\ufe0f 07.05.2024):     <pre><code>pip install nose2\n</code></pre> - [Conda](https://anaconda.org/conda-forge/nose2) (\ud83d\udce5 140K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge nose2\n</code></pre> coveralls-python (\ud83e\udd4834 \u00b7  \u2b50 550) - Show coverage stats online via coveralls.io. <code>MIT</code> <code></code>  - [GitHub](https://github.com/TheKevJames/coveralls-python) (\ud83d\udc68\u200d\ud83d\udcbb 66 \u00b7 \ud83d\udd00 180 \u00b7 \ud83d\udce6 34K \u00b7 \ud83d\udccb 170 - 2% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/TheKevJames/coveralls-python\n</code></pre> - [PyPi](https://pypi.org/project/coveralls) (\ud83d\udce5 740K / month \u00b7 \ud83d\udce6 2K \u00b7 \u23f1\ufe0f 15.05.2024):     <pre><code>pip install coveralls\n</code></pre> - [Conda](https://anaconda.org/conda-forge/coveralls) (\ud83d\udce5 1.1M \u00b7 \u23f1\ufe0f 15.05.2024):     <pre><code>conda install -c conda-forge coveralls\n</code></pre> nox (\ud83e\udd4832 \u00b7  \u2b50 1.2K) - Flexible test automation for Python. <code>Apache-2</code> <code></code>  - [GitHub](https://github.com/wntrblm/nox) (\ud83d\udc68\u200d\ud83d\udcbb 95 \u00b7 \ud83d\udd00 150 \u00b7 \ud83d\udce6 5.4K \u00b7 \ud83d\udccb 360 - 15% open \u00b7 \u23f1\ufe0f 23.05.2024):      <pre><code>git clone https://github.com/theacodes/nox\n</code></pre> - [PyPi](https://pypi.org/project/nox) (\ud83d\udce5 2M / month \u00b7 \ud83d\udce6 870 \u00b7 \u23f1\ufe0f 15.04.2024):     <pre><code>pip install nox\n</code></pre> - [Conda](https://anaconda.org/conda-forge/nox) (\ud83d\udce5 300K \u00b7 \u23f1\ufe0f 17.04.2024):     <pre><code>conda install -c conda-forge nox\n</code></pre> pytest-html (\ud83e\udd4832 \u00b7  \u2b50 660) - Plugin for generating HTML reports for pytest results. <code>MIT</code> <code></code>  - [GitHub](https://github.com/pytest-dev/pytest-html) (\ud83d\udc68\u200d\ud83d\udcbb 56 \u00b7 \ud83d\udd00 230 \u00b7 \ud83d\udce6 47K \u00b7 \ud83d\udccb 410 - 38% open \u00b7 \u23f1\ufe0f 24.04.2024):      <pre><code>git clone https://github.com/pytest-dev/pytest-html\n</code></pre> - [PyPi](https://pypi.org/project/pytest-html) (\ud83d\udce5 9.4M / month \u00b7 \ud83d\udce6 570 \u00b7 \u23f1\ufe0f 07.11.2023):     <pre><code>pip install pytest-html\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest-html) (\ud83d\udce5 530K \u00b7 \u23f1\ufe0f 23.11.2023):     <pre><code>conda install -c conda-forge pytest-html\n</code></pre> factory_boy (\ud83e\udd4931 \u00b7  \u2b50 3.4K) - A test fixtures replacement for Python. <code>MIT</code>  - [GitHub](https://github.com/FactoryBoy/factory_boy) (\ud83d\udc68\u200d\ud83d\udcbb 130 \u00b7 \ud83d\udd00 380 \u00b7 \ud83d\udccb 600 - 30% open \u00b7 \u23f1\ufe0f 25.04.2024):      <pre><code>git clone https://github.com/FactoryBoy/factory_boy\n</code></pre> - [PyPi](https://pypi.org/project/factory_boy) (\ud83d\udce5 4.1M / month \u00b7 \ud83d\udce6 560 \u00b7 \u23f1\ufe0f 19.07.2023):     <pre><code>pip install factory_boy\n</code></pre> - [Conda](https://anaconda.org/conda-forge/factory_boy) (\ud83d\udce5 150K \u00b7 \u23f1\ufe0f 19.07.2023):     <pre><code>conda install -c conda-forge factory_boy\n</code></pre> asv (\ud83e\udd4931 \u00b7  \u2b50 840) - Airspeed Velocity: A simple Python benchmarking tool with web-based reporting. <code>BSD-3</code>  - [GitHub](https://github.com/airspeed-velocity/asv) (\ud83d\udc68\u200d\ud83d\udcbb 81 \u00b7 \ud83d\udd00 170 \u00b7 \ud83d\udce5 310 \u00b7 \ud83d\udce6 1.1K \u00b7 \ud83d\udccb 600 - 23% open \u00b7 \u23f1\ufe0f 25.02.2024):      <pre><code>git clone https://github.com/airspeed-velocity/asv\n</code></pre> - [PyPi](https://pypi.org/project/asv) (\ud83d\udce5 82K / month \u00b7 \ud83d\udce6 89 \u00b7 \u23f1\ufe0f 25.02.2024):     <pre><code>pip install asv\n</code></pre> - [Conda](https://anaconda.org/conda-forge/asv) (\ud83d\udce5 790K \u00b7 \u23f1\ufe0f 25.02.2024):     <pre><code>conda install -c conda-forge asv\n</code></pre> pytest-sugar (\ud83e\udd4930 \u00b7  \u2b50 1.3K) - a plugin for py.test that changes the default look and feel.. <code>BSD-3</code> <code></code>  - [GitHub](https://github.com/Teemu/pytest-sugar) (\ud83d\udc68\u200d\ud83d\udcbb 53 \u00b7 \ud83d\udd00 74 \u00b7 \ud83d\udce5 19 \u00b7 \ud83d\udce6 25K \u00b7 \ud83d\udccb 120 - 18% open \u00b7 \u23f1\ufe0f 12.02.2024):      <pre><code>git clone https://github.com/Teemu/pytest-sugar\n</code></pre> - [PyPi](https://pypi.org/project/pytest-sugar) (\ud83d\udce5 1.8M / month \u00b7 \ud83d\udce6 1.1K \u00b7 \u23f1\ufe0f 01.02.2024):     <pre><code>pip install pytest-sugar\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest-sugar) (\ud83d\udce5 240K \u00b7 \u23f1\ufe0f 05.02.2024):     <pre><code>conda install -c conda-forge pytest-sugar\n</code></pre> green (\ud83e\udd4930 \u00b7  \u2b50 780) - Green is a clean, colorful, fast python test runner. <code>MIT</code>  - [GitHub](https://github.com/CleanCut/green) (\ud83d\udc68\u200d\ud83d\udcbb 40 \u00b7 \ud83d\udd00 75 \u00b7 \ud83d\udce6 1.2K \u00b7 \ud83d\udccb 190 - 3% open \u00b7 \u23f1\ufe0f 25.04.2024):      <pre><code>git clone https://github.com/CleanCut/green\n</code></pre> - [PyPi](https://pypi.org/project/green) (\ud83d\udce5 13K / month \u00b7 \ud83d\udce6 120 \u00b7 \u23f1\ufe0f 18.04.2024):     <pre><code>pip install green\n</code></pre> - [Conda](https://anaconda.org/conda-forge/green) (\ud83d\udce5 140K \u00b7 \u23f1\ufe0f 28.09.2023):     <pre><code>conda install -c conda-forge green\n</code></pre> pytest-testinfra (\ud83e\udd4929 \u00b7  \u2b50 2.3K) - Testinfra test your infrastructures. <code>Apache-2</code> <code></code>  - [GitHub](https://github.com/pytest-dev/pytest-testinfra) (\ud83d\udc68\u200d\ud83d\udcbb 140 \u00b7 \ud83d\udd00 350 \u00b7 \ud83d\udccb 360 - 38% open \u00b7 \u23f1\ufe0f 27.05.2024):      <pre><code>git clone https://github.com/pytest-dev/pytest-testinfra\n</code></pre> - [PyPi](https://pypi.org/project/pytest-testinfra) (\ud83d\udce5 460K / month \u00b7 \ud83d\udce6 19 \u00b7 \u23f1\ufe0f 26.05.2024):     <pre><code>pip install pytest-testinfra\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest-testinfra) (\ud83d\udce5 17K \u00b7 \u23f1\ufe0f 19.11.2023):     <pre><code>conda install -c conda-forge pytest-testinfra\n</code></pre> pytest-benchmark (\ud83e\udd4929 \u00b7  \u2b50 1.2K) - py.test fixture for benchmarking code. <code>BSD-2</code> <code></code>  - [GitHub](https://github.com/ionelmc/pytest-benchmark) (\ud83d\udc68\u200d\ud83d\udcbb 41 \u00b7 \ud83d\udd00 110 \u00b7 \ud83d\udce6 8.8K \u00b7 \ud83d\udccb 190 - 53% open \u00b7 \u23f1\ufe0f 15.12.2023):      <pre><code>git clone https://github.com/ionelmc/pytest-benchmark\n</code></pre> - [PyPi](https://pypi.org/project/pytest-benchmark) (\ud83d\udce5 2M / month \u00b7 \ud83d\udce6 810 \u00b7 \u23f1\ufe0f 25.10.2022):     <pre><code>pip install pytest-benchmark\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest-benchmark) (\ud83d\udce5 2M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge pytest-benchmark\n</code></pre> pytest-randomly (\ud83e\udd4929 \u00b7  \u2b50 590) - Pytest plugin to randomly order tests and control random.seed. <code>MIT</code>  - [GitHub](https://github.com/pytest-dev/pytest-randomly) (\ud83d\udc68\u200d\ud83d\udcbb 20 \u00b7 \ud83d\udd00 30 \u00b7 \ud83d\udce6 8.5K \u00b7 \ud83d\udccb 65 - 15% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/pytest-dev/pytest-randomly\n</code></pre> - [PyPi](https://pypi.org/project/pytest-randomly) (\ud83d\udce5 3.4M / month \u00b7 \ud83d\udce6 400 \u00b7 \u23f1\ufe0f 15.08.2023):     <pre><code>pip install pytest-randomly\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest-randomly) (\ud83d\udce5 190K \u00b7 \u23f1\ufe0f 15.08.2023):     <pre><code>conda install -c conda-forge pytest-randomly\n</code></pre> ddt (\ud83e\udd4929 \u00b7  \u2b50 440) - Data-Driven Tests for Python Unittest. <code>MIT</code>  - [GitHub](https://github.com/datadriventests/ddt) (\ud83d\udc68\u200d\ud83d\udcbb 38 \u00b7 \ud83d\udd00 110 \u00b7 \ud83d\udce6 5.7K \u00b7 \ud83d\udccb 57 - 19% open \u00b7 \u23f1\ufe0f 26.02.2024):      <pre><code>git clone https://github.com/datadriventests/ddt\n</code></pre> - [PyPi](https://pypi.org/project/ddt) (\ud83d\udce5 540K / month \u00b7 \ud83d\udce6 200 \u00b7 \u23f1\ufe0f 26.02.2024):     <pre><code>pip install ddt\n</code></pre> - [Conda](https://anaconda.org/conda-forge/ddt) (\ud83d\udce5 95K \u00b7 \u23f1\ufe0f 26.02.2024):     <pre><code>conda install -c conda-forge ddt\n</code></pre> pytest-testmon (\ud83e\udd4926 \u00b7  \u2b50 800 \u00b7 \ud83d\udcc9) - Selects tests affected by changed files. Executes the.. <code>MIT</code> <code></code>  - [GitHub](https://github.com/tarpas/pytest-testmon) (\ud83d\udc68\u200d\ud83d\udcbb 25 \u00b7 \ud83d\udd00 54 \u00b7 \ud83d\udce6 1.2K \u00b7 \ud83d\udccb 160 - 18% open \u00b7 \u23f1\ufe0f 30.04.2024):      <pre><code>git clone https://github.com/tarpas/pytest-testmon\n</code></pre> - [PyPi](https://pypi.org/project/pytest-testmon) (\ud83d\udce5 220K / month \u00b7 \ud83d\udce6 25 \u00b7 \u23f1\ufe0f 27.02.2024):     <pre><code>pip install pytest-testmon\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest-testmon) (\ud83d\udce5 42K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge pytest-testmon\n</code></pre> pytest-mypy (\ud83e\udd4926 \u00b7  \u2b50 240) - Mypy static type checker plugin for Pytest. <code>MIT</code> <code></code>  - [GitHub](https://github.com/realpython/pytest-mypy) (\ud83d\udc68\u200d\ud83d\udcbb 16 \u00b7 \ud83d\udd00 32 \u00b7 \ud83d\udce6 4K \u00b7 \ud83d\udccb 64 - 15% open \u00b7 \u23f1\ufe0f 12.03.2024):      <pre><code>git clone https://github.com/dbader/pytest-mypy\n</code></pre> - [PyPi](https://pypi.org/project/pytest-mypy) (\ud83d\udce5 380K / month \u00b7 \ud83d\udce6 710 \u00b7 \u23f1\ufe0f 18.12.2022):     <pre><code>pip install pytest-mypy\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest-mypy) (\ud83d\udce5 98K \u00b7 \u23f1\ufe0f 10.04.2024):     <pre><code>conda install -c conda-forge pytest-mypy\n</code></pre> Mamba Test Runner (\ud83e\udd4925 \u00b7  \u2b50 520) - The definitive testing tool for Python. Born under the banner.. <code>MIT</code>  - [GitHub](https://github.com/nestorsalceda/mamba) (\ud83d\udc68\u200d\ud83d\udcbb 23 \u00b7 \ud83d\udd00 65 \u00b7 \ud83d\udce6 980 \u00b7 \ud83d\udccb 100 - 50% open \u00b7 \u23f1\ufe0f 09.11.2023):      <pre><code>git clone https://github.com/nestorsalceda/mamba\n</code></pre> - [PyPi](https://pypi.org/project/mamba) (\ud83d\udce5 9.6K / month \u00b7 \ud83d\udce6 29 \u00b7 \u23f1\ufe0f 09.11.2023):     <pre><code>pip install mamba\n</code></pre> pytest-docker (\ud83e\udd4925 \u00b7  \u2b50 400) - Docker-based integration tests. <code>MIT</code> <code></code>  - [GitHub](https://github.com/avast/pytest-docker) (\ud83d\udc68\u200d\ud83d\udcbb 23 \u00b7 \ud83d\udd00 67 \u00b7 \ud83d\udce5 140 \u00b7 \ud83d\udce6 940 \u00b7 \ud83d\udccb 54 - 31% open \u00b7 \u23f1\ufe0f 02.02.2024):      <pre><code>git clone https://github.com/avast/pytest-docker\n</code></pre> - [PyPi](https://pypi.org/project/pytest-docker) (\ud83d\udce5 300K / month \u00b7 \ud83d\udce6 86 \u00b7 \u23f1\ufe0f 02.02.2024):     <pre><code>pip install pytest-docker\n</code></pre> pytest-datadir (\ud83e\udd4923 \u00b7  \u2b50 240) - pytest plugin for manipulating test data directories and.. <code>MIT</code> <code></code>  - [GitHub](https://github.com/gabrielcnr/pytest-datadir) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 22 \u00b7 \ud83d\udce5 4 \u00b7 \ud83d\udce6 1.7K \u00b7 \ud83d\udccb 19 - 26% open \u00b7 \u23f1\ufe0f 29.04.2024):      <pre><code>git clone https://github.com/gabrielcnr/pytest-datadir\n</code></pre> - [PyPi](https://pypi.org/project/pytest-datadir) (\ud83d\udce5 300K / month \u00b7 \ud83d\udce6 190 \u00b7 \u23f1\ufe0f 03.10.2023):     <pre><code>pip install pytest-datadir\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytest-datadir) (\ud83d\udce5 250K \u00b7 \u23f1\ufe0f 03.10.2023):     <pre><code>conda install -c conda-forge pytest-datadir\n</code></pre> xdoctest (\ud83e\udd4923 \u00b7  \u2b50 200) - A rewrite of Pythons builtin doctest module (with pytest plugin.. <code>Apache-2</code>  - [GitHub](https://github.com/Erotemic/xdoctest) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 10 \u00b7 \ud83d\udccb 49 - 42% open \u00b7 \u23f1\ufe0f 30.01.2024):      <pre><code>git clone https://github.com/Erotemic/xdoctest\n</code></pre> - [PyPi](https://pypi.org/project/xdoctest) (\ud83d\udce5 320K / month \u00b7 \ud83d\udce6 180 \u00b7 \u23f1\ufe0f 30.01.2024):     <pre><code>pip install xdoctest\n</code></pre> - [Conda](https://anaconda.org/conda-forge/xdoctest) (\ud83d\udce5 220K \u00b7 \u23f1\ufe0f 30.01.2024):     <pre><code>conda install -c conda-forge xdoctest\n</code></pre> Show 10 hidden projects...  - nose (\ud83e\udd4833 \u00b7  \u2b50 1.4K \u00b7 \ud83d\udc80) - nose is nicer testing for python. <code>\u2757\ufe0fLGPL-2.1+</code> - uiautomator (\ud83e\udd4926 \u00b7  \u2b50 2K \u00b7 \ud83d\udc80) - Python wrapper of Android uiautomator test tool. <code>MIT</code> - PyHamcrest (\ud83e\udd4926 \u00b7  \u2b50 750) - Hamcrest matchers for Python. <code>\u2757Unlicensed</code> - pytest-watch (\ud83e\udd4925 \u00b7  \u2b50 730 \u00b7 \ud83d\udc80) - Local continuous test runner with pytest and watchdog. <code>MIT</code> <code></code> - pytest-plugins (\ud83e\udd4924 \u00b7  \u2b50 550 \u00b7 \ud83d\udc80) - A grab-bag of nifty pytest plugins. <code>MIT</code> - pytest-lazy-fixture (\ud83e\udd4924 \u00b7  \u2b50 370 \u00b7 \ud83d\udc80) - It helps to use fixtures in pytest.mark.parametrize. <code>MIT</code> <code></code> - sixpack (\ud83e\udd4921 \u00b7  \u2b50 1.8K \u00b7 \ud83d\udc80) - Sixpack is a language-agnostic a/b-testing framework. <code>BSD-2</code> - assertpy (\ud83e\udd4920 \u00b7  \u2b50 470 \u00b7 \ud83d\udc80) - Simple assertion library for unit testing in python with a fluent.. <code>BSD-3</code> - fake2db (\ud83e\udd4917 \u00b7  \u2b50 2.3K \u00b7 \ud83d\udc80) - create custom test databases that are populated with fake data. <code>\u2757\ufe0fGPL-2.0</code> - pytest-play (\ud83e\udd4916 \u00b7  \u2b50 68 \u00b7 \ud83d\udc80) - pytest plugin that let you automate actions and.. <code>Apache-2</code> <code></code> <p></p>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#code-packaging","title":"Code Packaging","text":"<p>\ud83d\udd17\u00a0Python.org Packaging  - An Overview of Packaging for Python.</p> pyinstaller (\ud83e\udd4742 \u00b7  \u2b50 11K) - Freeze (package) Python programs into stand-alone executables. <code>\u2757\ufe0fGPL-2.0</code>  - [GitHub](https://github.com/pyinstaller/pyinstaller) (\ud83d\udc68\u200d\ud83d\udcbb 470 \u00b7 \ud83d\udd00 1.9K \u00b7 \ud83d\udce5 750K \u00b7 \ud83d\udce6 59K \u00b7 \ud83d\udccb 5.3K - 5% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/pyinstaller/pyinstaller\n</code></pre> - [PyPi](https://pypi.org/project/pyinstaller) (\ud83d\udce5 2.5M / month \u00b7 \ud83d\udce6 770 \u00b7 \u23f1\ufe0f 21.05.2024):     <pre><code>pip install pyinstaller\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pyinstaller) (\ud83d\udce5 580K \u00b7 \u23f1\ufe0f 22.05.2024):     <pre><code>conda install -c conda-forge pyinstaller\n</code></pre> Nuitka (\ud83e\udd4739 \u00b7  \u2b50 11K) - Nuitka is a Python compiler written in Python. Its fully compatible.. <code>Apache-2</code>  - [GitHub](https://github.com/Nuitka/Nuitka) (\ud83d\udc68\u200d\ud83d\udcbb 170 \u00b7 \ud83d\udd00 590 \u00b7 \ud83d\udce6 2K \u00b7 \ud83d\udccb 2.2K - 4% open \u00b7 \u23f1\ufe0f 23.05.2024):      <pre><code>git clone https://github.com/Nuitka/Nuitka\n</code></pre> - [PyPi](https://pypi.org/project/nuitka) (\ud83d\udce5 100K / month \u00b7 \ud83d\udce6 71 \u00b7 \u23f1\ufe0f 16.05.2024):     <pre><code>pip install nuitka\n</code></pre> - [Conda](https://anaconda.org/conda-forge/nuitka) (\ud83d\udce5 700K \u00b7 \u23f1\ufe0f 17.05.2024):     <pre><code>conda install -c conda-forge nuitka\n</code></pre> packaging (\ud83e\udd4838 \u00b7  \u2b50 590) - Core utilities for Python packages. <code>Apache-2</code>  - [GitHub](https://github.com/pypa/packaging) (\ud83d\udc68\u200d\ud83d\udcbb 110 \u00b7 \ud83d\udd00 230 \u00b7 \ud83d\udce5 810 \u00b7 \ud83d\udce6 1.2M \u00b7 \ud83d\udccb 380 - 23% open \u00b7 \u23f1\ufe0f 20.05.2024):      <pre><code>git clone https://github.com/pypa/packaging\n</code></pre> - [PyPi](https://pypi.org/project/packaging) (\ud83d\udce5 350M / month \u00b7 \ud83d\udce6 10K \u00b7 \u23f1\ufe0f 10.03.2024):     <pre><code>pip install packaging\n</code></pre> - [Conda](https://anaconda.org/conda-forge/packaging) (\ud83d\udce5 46M \u00b7 \u23f1\ufe0f 10.03.2024):     <pre><code>conda install -c conda-forge packaging\n</code></pre> briefcase (\ud83e\udd4834 \u00b7  \u2b50 2.4K) - Tools to support converting a Python project into a standalone.. <code>BSD-3</code>  - [GitHub](https://github.com/beeware/briefcase) (\ud83d\udc68\u200d\ud83d\udcbb 150 \u00b7 \ud83d\udd00 340 \u00b7 \ud83d\udce5 280 \u00b7 \ud83d\udce6 560 \u00b7 \ud83d\udccb 750 - 17% open \u00b7 \u23f1\ufe0f 30.05.2024):      <pre><code>git clone https://github.com/beeware/briefcase\n</code></pre> - [PyPi](https://pypi.org/project/briefcase) (\ud83d\udce5 13K / month \u00b7 \ud83d\udce6 12 \u00b7 \u23f1\ufe0f 06.05.2024):     <pre><code>pip install briefcase\n</code></pre> pex (\ud83e\udd4833 \u00b7  \u2b50 2.5K) - A tool for generating .pex (Python EXecutable) files, lock files and venvs. <code>Apache-2</code>  - [GitHub](https://github.com/pex-tool/pex) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 250 \u00b7 \ud83d\udce5 4.6M \u00b7 \ud83d\udce6 600 \u00b7 \ud83d\udccb 1.1K - 14% open \u00b7 \u23f1\ufe0f 13.05.2024):      <pre><code>git clone https://github.com/pantsbuild/pex\n</code></pre> - [PyPi](https://pypi.org/project/pex) (\ud83d\udce5 1.7M / month \u00b7 \ud83d\udce6 46 \u00b7 \u23f1\ufe0f 12.04.2024):     <pre><code>pip install pex\n</code></pre> cx_Freeze (\ud83e\udd4832 \u00b7  \u2b50 1.3K) - cx_Freeze creates standalone executables from Python scripts,.. <code>Python-2.0</code>  - [GitHub](https://github.com/marcelotduarte/cx_Freeze) (\ud83d\udc68\u200d\ud83d\udcbb 110 \u00b7 \ud83d\udd00 210 \u00b7 \ud83d\udccb 940 - 4% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/marcelotduarte/cx_Freeze\n</code></pre> - [PyPi](https://pypi.org/project/cx_freeze) (\ud83d\udce5 150K / month \u00b7 \ud83d\udce6 86 \u00b7 \u23f1\ufe0f 26.05.2024):     <pre><code>pip install cx_freeze\n</code></pre> - [Conda](https://anaconda.org/conda-forge/cx_freeze) (\ud83d\udce5 330K \u00b7 \u23f1\ufe0f 26.05.2024):     <pre><code>conda install -c conda-forge cx_freeze\n</code></pre> shiv (\ud83e\udd4925 \u00b7  \u2b50 1.7K) - shiv is a command line utility for building fully self contained Python.. <code>BSD-2</code>  - [GitHub](https://github.com/linkedin/shiv) (\ud83d\udc68\u200d\ud83d\udcbb 42 \u00b7 \ud83d\udd00 92 \u00b7 \ud83d\udce5 770 \u00b7 \ud83d\udccb 130 - 39% open \u00b7 \u23f1\ufe0f 09.05.2024):      <pre><code>git clone https://github.com/linkedin/shiv\n</code></pre> - [PyPi](https://pypi.org/project/shiv) (\ud83d\udce5 29K / month \u00b7 \ud83d\udce6 14 \u00b7 \u23f1\ufe0f 09.05.2024):     <pre><code>pip install shiv\n</code></pre> constructor (\ud83e\udd4925 \u00b7  \u2b50 440) - tool for creating installers from conda packages. <code>BSD-3</code>  - [GitHub](https://github.com/conda/constructor) (\ud83d\udc68\u200d\ud83d\udcbb 71 \u00b7 \ud83d\udd00 170 \u00b7 \ud83d\udce5 280 \u00b7 \ud83d\udce6 19 \u00b7 \ud83d\udccb 360 - 7% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/conda/constructor\n</code></pre> - [Conda](https://anaconda.org/anaconda/constructor) (\ud83d\udce5 9.9K \u00b7 \u23f1\ufe0f 16.05.2024):     <pre><code>conda install -c anaconda constructor\n</code></pre> pynsist (\ud83e\udd4924 \u00b7  \u2b50 880) - Build Windows installers for Python applications. <code>MIT</code>  - [GitHub](https://github.com/takluyver/pynsist) (\ud83d\udc68\u200d\ud83d\udcbb 31 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce6 220 \u00b7 \ud83d\udccb 180 - 17% open \u00b7 \u23f1\ufe0f 09.04.2024):      <pre><code>git clone https://github.com/takluyver/pynsist\n</code></pre> - [PyPi](https://pypi.org/project/pynsist) (\ud83d\udce5 3.1K / month \u00b7 \ud83d\udce6 13 \u00b7 \u23f1\ufe0f 21.03.2022):     <pre><code>pip install pynsist\n</code></pre> py2exe (\ud83e\udd4923 \u00b7  \u2b50 770 \u00b7 \ud83d\udca4) - Create standalone Windows programs from Python code. <code>MIT</code>  - [GitHub](https://github.com/py2exe/py2exe) (\ud83d\udc68\u200d\ud83d\udcbb 20 \u00b7 \ud83d\udd00 90 \u00b7 \ud83d\udce5 17K \u00b7 \ud83d\udce6 2K \u00b7 \ud83d\udccb 160 - 13% open \u00b7 \u23f1\ufe0f 08.10.2023):      <pre><code>git clone https://github.com/py2exe/py2exe\n</code></pre> - [PyPi](https://pypi.org/project/py2exe) (\ud83d\udce5 16K / month \u00b7 \ud83d\udce6 10 \u00b7 \u23f1\ufe0f 07.10.2023):     <pre><code>pip install py2exe\n</code></pre> xar (\ud83e\udd4920 \u00b7  \u2b50 1.6K) - executable archive format. <code>BSD-3</code>  - [GitHub](https://github.com/facebookincubator/xar) (\ud83d\udc68\u200d\ud83d\udcbb 44 \u00b7 \ud83d\udd00 55 \u00b7 \ud83d\udce6 30 \u00b7 \ud83d\udccb 33 - 24% open \u00b7 \u23f1\ufe0f 28.12.2023):      <pre><code>git clone https://github.com/facebookincubator/xar\n</code></pre> - [PyPi](https://pypi.org/project/xar) (\ud83d\udce5 330 / month \u00b7 \u23f1\ufe0f 02.12.2020):     <pre><code>pip install xar\n</code></pre> Show 4 hidden projects...  - PyOxidizer (\ud83e\udd4928 \u00b7  \u2b50 5.3K \u00b7 \ud83d\udc80) - A modern Python application packaging and distribution tool. <code>MPL-2.0</code> - py2app (\ud83e\udd4928 \u00b7  \u2b50 320 \u00b7 \ud83d\udc80) - py2app is a Python setuptools command which will allow you to make.. <code>MIT</code> - subpar (\ud83e\udd4913 \u00b7  \u2b50 570 \u00b7 \ud83d\udc80) - Subpar is a utility for creating self-contained python.. <code>Apache-2</code> - pyship (\ud83e\udd4911 \u00b7  \u2b50 38 \u00b7 \ud83d\udca4) - pyship - ship Python desktop apps to end users. <code>MIT</code> <p></p>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#build-tools","title":"Build Tools","text":"setuptools (\ud83e\udd4747 \u00b7  \u2b50 2.3K) - Official project repository for the Setuptools build system. <code>MIT</code>  - [GitHub](https://github.com/pypa/setuptools) (\ud83d\udc68\u200d\ud83d\udcbb 600 \u00b7 \ud83d\udd00 1.1K \u00b7 \ud83d\udce6 520K \u00b7 \ud83d\udccb 2.5K - 24% open \u00b7 \u23f1\ufe0f 24.05.2024):      <pre><code>git clone https://github.com/pypa/setuptools\n</code></pre> - [PyPi](https://pypi.org/project/setuptools) (\ud83d\udce5 380M / month \u00b7 \ud83d\udce6 20K \u00b7 \u23f1\ufe0f 21.05.2024):     <pre><code>pip install setuptools\n</code></pre> - [Conda](https://anaconda.org/conda-forge/setuptools) (\ud83d\udce5 110M \u00b7 \u23f1\ufe0f 22.05.2024):     <pre><code>conda install -c conda-forge setuptools\n</code></pre> twine (\ud83e\udd4739 \u00b7  \u2b50 1.5K) - Utilities for interacting with PyPI. <code>Apache-2</code>  - [GitHub](https://github.com/pypa/twine) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 300 \u00b7 \ud83d\udce5 13 \u00b7 \ud83d\udce6 110K \u00b7 \ud83d\udccb 510 - 10% open \u00b7 \u23f1\ufe0f 21.05.2024):      <pre><code>git clone https://github.com/pypa/twine\n</code></pre> - [PyPi](https://pypi.org/project/twine) (\ud83d\udce5 7.1M / month \u00b7 \ud83d\udce6 14K \u00b7 \u23f1\ufe0f 16.05.2024):     <pre><code>pip install twine\n</code></pre> - [Conda](https://anaconda.org/conda-forge/twine) (\ud83d\udce5 980K \u00b7 \u23f1\ufe0f 17.05.2024):     <pre><code>conda install -c conda-forge twine\n</code></pre> scons (\ud83e\udd4838 \u00b7  \u2b50 2K \u00b7 \ud83d\udcc8) - SCons - a software construction tool. <code>MIT</code>  - [GitHub](https://github.com/SCons/scons) (\ud83d\udc68\u200d\ud83d\udcbb 160 \u00b7 \ud83d\udd00 310 \u00b7 \ud83d\udce5 1.5K \u00b7 \ud83d\udce6 3.1K \u00b7 \ud83d\udccb 3.4K - 19% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/SCons/scons\n</code></pre> - [PyPi](https://pypi.org/project/scons) (\ud83d\udce5 750K / month \u00b7 \ud83d\udce6 39 \u00b7 \u23f1\ufe0f 18.03.2024):     <pre><code>pip install scons\n</code></pre> - [Conda](https://anaconda.org/conda-forge/scons) (\ud83d\udce5 580K \u00b7 \u23f1\ufe0f 18.03.2024):     <pre><code>conda install -c conda-forge scons\n</code></pre> wheel (\ud83e\udd4837 \u00b7  \u2b50 480) - The official binary distribution format for Python. <code>MIT</code>  - [GitHub](https://github.com/pypa/wheel) (\ud83d\udc68\u200d\ud83d\udcbb 82 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce6 270K \u00b7 \ud83d\udccb 400 - 12% open \u00b7 \u23f1\ufe0f 09.05.2024):      <pre><code>git clone https://github.com/pypa/wheel\n</code></pre> - [PyPi](https://pypi.org/project/wheel) (\ud83d\udce5 470M / month \u00b7 \ud83d\udce6 11K \u00b7 \u23f1\ufe0f 11.03.2024):     <pre><code>pip install wheel\n</code></pre> - [Conda](https://anaconda.org/conda-forge/wheel) (\ud83d\udce5 92M \u00b7 \u23f1\ufe0f 27.03.2024):     <pre><code>conda install -c conda-forge wheel\n</code></pre> buildbot (\ud83e\udd4836 \u00b7  \u2b50 5.2K) - Python-based continuous integration testing framework; your pull.. <code>\u2757\ufe0fGPL-2.0</code>  - [GitHub](https://github.com/buildbot/buildbot) (\ud83d\udc68\u200d\ud83d\udcbb 860 \u00b7 \ud83d\udd00 1.6K \u00b7 \ud83d\udce5 38K \u00b7 \ud83d\udce6 350 \u00b7 \ud83d\udccb 1.6K - 44% open \u00b7 \u23f1\ufe0f 23.05.2024):      <pre><code>git clone https://github.com/buildbot/buildbot\n</code></pre> - [PyPi](https://pypi.org/project/buildbot) (\ud83d\udce5 16K / month \u00b7 \ud83d\udce6 18 \u00b7 \u23f1\ufe0f 20.05.2024):     <pre><code>pip install buildbot\n</code></pre> - [Conda](https://anaconda.org/conda-forge/buildbot) (\ud83d\udce5 98K \u00b7 \u23f1\ufe0f 20.05.2024):     <pre><code>conda install -c conda-forge buildbot\n</code></pre> invoke (\ud83e\udd4835 \u00b7  \u2b50 4.3K) - Pythonic task management &amp; command execution. <code>BSD-2</code>  - [GitHub](https://github.com/pyinvoke/invoke) (\ud83d\udc68\u200d\ud83d\udcbb 60 \u00b7 \ud83d\udd00 360 \u00b7 \ud83d\udce6 25K \u00b7 \ud83d\udccb 810 - 49% open \u00b7 \u23f1\ufe0f 01.12.2023):      <pre><code>git clone https://github.com/pyinvoke/invoke\n</code></pre> - [PyPi](https://pypi.org/project/invoke) (\ud83d\udce5 8.8M / month \u00b7 \ud83d\udce6 950 \u00b7 \u23f1\ufe0f 12.07.2023):     <pre><code>pip install invoke\n</code></pre> - [Conda](https://anaconda.org/conda-forge/invoke) (\ud83d\udce5 980K \u00b7 \u23f1\ufe0f 13.07.2023):     <pre><code>conda install -c conda-forge invoke\n</code></pre> setuptools_scm (\ud83e\udd4835 \u00b7  \u2b50 820) - the blessed package to manage your versions by scm tags. <code>MIT</code>  - [GitHub](https://github.com/pypa/setuptools_scm) (\ud83d\udc68\u200d\ud83d\udcbb 140 \u00b7 \ud83d\udd00 210 \u00b7 \ud83d\udccb 580 - 15% open \u00b7 \u23f1\ufe0f 15.05.2024):      <pre><code>git clone https://github.com/pypa/setuptools_scm\n</code></pre> - [PyPi](https://pypi.org/project/setuptools_scm) (\ud83d\udce5 29M / month \u00b7 \ud83d\udce6 1.4K \u00b7 \u23f1\ufe0f 06.05.2024):     <pre><code>pip install setuptools_scm\n</code></pre> - [Conda](https://anaconda.org/conda-forge/setuptools_scm) (\ud83d\udce5 2.4M \u00b7 \u23f1\ufe0f 07.05.2024):     <pre><code>conda install -c conda-forge setuptools_scm\n</code></pre> flit (\ud83e\udd4931 \u00b7  \u2b50 2.1K) - Simplified packaging of Python modules. <code>BSD-3</code>  - [GitHub](https://github.com/pypa/flit) (\ud83d\udc68\u200d\ud83d\udcbb 73 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce6 1.9K \u00b7 \ud83d\udccb 420 - 31% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/pypa/flit\n</code></pre> - [PyPi](https://pypi.org/project/flit) (\ud83d\udce5 380K / month \u00b7 \ud83d\udce6 720 \u00b7 \u23f1\ufe0f 14.05.2023):     <pre><code>pip install flit\n</code></pre> - [Conda](https://anaconda.org/conda-forge/flit) (\ud83d\udce5 180K \u00b7 \u23f1\ufe0f 25.03.2024):     <pre><code>conda install -c conda-forge flit\n</code></pre> pybuilder (\ud83e\udd4926 \u00b7  \u2b50 1.7K) - Software build automation tool for Python. <code>Apache-2</code>  - [GitHub](https://github.com/pybuilder/pybuilder) (\ud83d\udc68\u200d\ud83d\udcbb 39 \u00b7 \ud83d\udd00 250 \u00b7 \ud83d\udccb 520 - 18% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/pybuilder/pybuilder\n</code></pre> - [PyPi](https://pypi.org/project/pybuilder) (\ud83d\udce5 26K / month \u00b7 \ud83d\udce6 6 \u00b7 \u23f1\ufe0f 28.05.2024):     <pre><code>pip install pybuilder\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pybuilder) (\ud83d\udce5 75K \u00b7 \u23f1\ufe0f 28.05.2024):     <pre><code>conda install -c conda-forge pybuilder\n</code></pre> universal-build (\ud83e\udd4915 \u00b7  \u2b50 21 \u00b7 \ud83d\udc80) - Universal build utilities for containerized build pipelines. <code>MIT</code>  - [GitHub](https://github.com/ml-tooling/universal-build) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 7 \u00b7 \ud83d\udce5 19 \u00b7 \ud83d\udce6 12 \u00b7 \ud83d\udccb 4 - 25% open \u00b7 \u23f1\ufe0f 15.09.2022):      <pre><code>git clone https://github.com/ml-tooling/universal-build\n</code></pre> - [PyPi](https://pypi.org/project/universal-build) (\ud83d\udce5 510 / month \u00b7 \ud83d\udce6 7 \u00b7 \u23f1\ufe0f 16.11.2021):     <pre><code>pip install universal-build\n</code></pre> Show 4 hidden projects...  - doit (\ud83e\udd4932 \u00b7  \u2b50 1.8K \u00b7 \ud83d\udc80) - task management &amp; automation tool. <code>MIT</code> - buildout (\ud83e\udd4926 \u00b7  \u2b50 570 \u00b7 \ud83d\udc80) - Buildout is a deployment automation tool written in and.. <code>\u2757\ufe0fZPL-2.1</code> - paver (\ud83e\udd4923 \u00b7  \u2b50 460 \u00b7 \ud83d\udc80) - Python-based project scripting. <code>BSD-3</code> - pynt (\ud83e\udd4918 \u00b7  \u2b50 160 \u00b7 \ud83d\udc80) - A pynt of Python build. <code>MIT</code>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#system-monitoring-profiling","title":"System Monitoring &amp; Profiling","text":"psutil (\ud83e\udd4745 \u00b7  \u2b50 10K) - Cross-platform lib for process and system monitoring in Python. <code>BSD-3</code>  - [GitHub](https://github.com/giampaolo/psutil) (\ud83d\udc68\u200d\ud83d\udcbb 210 \u00b7 \ud83d\udd00 1.4K \u00b7 \ud83d\udce6 490K \u00b7 \ud83d\udccb 1.8K - 17% open \u00b7 \u23f1\ufe0f 18.05.2024):      <pre><code>git clone https://github.com/giampaolo/psutil\n</code></pre> - [PyPi](https://pypi.org/project/psutil) (\ud83d\udce5 110M / month \u00b7 \ud83d\udce6 10K \u00b7 \u23f1\ufe0f 19.01.2024):     <pre><code>pip install psutil\n</code></pre> - [Conda](https://anaconda.org/conda-forge/psutil) (\ud83d\udce5 31M \u00b7 \u23f1\ufe0f 08.02.2024):     <pre><code>conda install -c conda-forge psutil\n</code></pre> Glances (\ud83e\udd4740 \u00b7  \u2b50 25K) - Glances an Eye on your system. A top/htop alternative for.. <code>\u2757\ufe0fLGPL-3.0</code>  - [GitHub](https://github.com/nicolargo/glances) (\ud83d\udc68\u200d\ud83d\udcbb 190 \u00b7 \ud83d\udd00 1.4K \u00b7 \ud83d\udce5 1.6K \u00b7 \ud83d\udce6 880 \u00b7 \ud83d\udccb 1.8K - 12% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/nicolargo/glances\n</code></pre> - [PyPi](https://pypi.org/project/glances) (\ud83d\udce5 670K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 25.05.2024):     <pre><code>pip install glances\n</code></pre> - [Conda](https://anaconda.org/conda-forge/glances) (\ud83d\udce5 220K \u00b7 \u23f1\ufe0f 24.03.2024):     <pre><code>conda install -c conda-forge glances\n</code></pre> memray (\ud83e\udd4835 \u00b7  \u2b50 13K \u00b7 \ud83d\udcc8) - Memray is a memory profiler for Python. <code>Apache-2</code>  - [GitHub](https://github.com/bloomberg/memray) (\ud83d\udc68\u200d\ud83d\udcbb 50 \u00b7 \ud83d\udd00 370 \u00b7 \ud83d\udce6 440 \u00b7 \ud83d\udccb 170 - 12% open \u00b7 \u23f1\ufe0f 30.05.2024):      <pre><code>git clone https://github.com/bloomberg/memray\n</code></pre> - [PyPi](https://pypi.org/project/memray) (\ud83d\udce5 780K / month \u00b7 \ud83d\udce6 43 \u00b7 \u23f1\ufe0f 10.04.2024):     <pre><code>pip install memray\n</code></pre> - [Conda](https://anaconda.org/conda-forge/memray) (\ud83d\udce5 120K \u00b7 \u23f1\ufe0f 11.04.2024):     <pre><code>conda install -c conda-forge memray\n</code></pre> py-spy (\ud83e\udd4833 \u00b7  \u2b50 12K) - Sampling profiler for Python programs. <code>MIT</code>  - [GitHub](https://github.com/benfred/py-spy) (\ud83d\udc68\u200d\ud83d\udcbb 38 \u00b7 \ud83d\udd00 390 \u00b7 \ud83d\udce5 18K \u00b7 \ud83d\udce6 4.1K \u00b7 \ud83d\udccb 370 - 48% open \u00b7 \u23f1\ufe0f 27.02.2024):      <pre><code>git clone https://github.com/benfred/py-spy\n</code></pre> - [PyPi](https://pypi.org/project/py-spy) (\ud83d\udce5 2.1M / month \u00b7 \ud83d\udce6 46 \u00b7 \u23f1\ufe0f 07.09.2022):     <pre><code>pip install py-spy\n</code></pre> - [Conda](https://anaconda.org/conda-forge/py-spy) (\ud83d\udce5 540K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge py-spy\n</code></pre> - [Cargo](https://crates.io/crates/py-spy) (\ud83d\udce5 1.8K / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 07.09.2022):     <pre><code>cargo install py-spy\n</code></pre> Scalene (\ud83e\udd4832 \u00b7  \u2b50 11K) - Scalene: a high-performance, high-precision CPU, GPU, and memory.. <code>Apache-2</code>  - [GitHub](https://github.com/plasma-umass/scalene) (\ud83d\udc68\u200d\ud83d\udcbb 49 \u00b7 \ud83d\udd00 380 \u00b7 \ud83d\udce6 630 \u00b7 \ud83d\udccb 460 - 35% open \u00b7 \u23f1\ufe0f 17.05.2024):      <pre><code>git clone https://github.com/plasma-umass/scalene\n</code></pre> - [PyPi](https://pypi.org/project/scalene) (\ud83d\udce5 44K / month \u00b7 \ud83d\udce6 12 \u00b7 \u23f1\ufe0f 03.05.2024):     <pre><code>pip install scalene\n</code></pre> pyinstrument (\ud83e\udd4830 \u00b7  \u2b50 6.2K) - Call stack profiler for Python. Shows you why your code is slow!. <code>BSD-3</code>  - [GitHub](https://github.com/joerick/pyinstrument) (\ud83d\udc68\u200d\ud83d\udcbb 55 \u00b7 \ud83d\udd00 220 \u00b7 \ud83d\udce6 2.3K \u00b7 \ud83d\udccb 150 - 22% open \u00b7 \u23f1\ufe0f 12.03.2024):      <pre><code>git clone https://github.com/joerick/pyinstrument\n</code></pre> - [PyPi](https://pypi.org/project/pyinstrument) (\ud83d\udce5 1.3M / month \u00b7 \ud83d\udce6 130 \u00b7 \u23f1\ufe0f 26.01.2024):     <pre><code>pip install pyinstrument\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pyinstrument) (\ud83d\udce5 320K \u00b7 \u23f1\ufe0f 26.01.2024):     <pre><code>conda install -c conda-forge pyinstrument\n</code></pre> Yappi (\ud83e\udd4829 \u00b7  \u2b50 1.4K \u00b7 \ud83d\udcc9) - Yet Another Python Profiler, but this time multithreading, asyncio and.. <code>MIT</code>  - [GitHub](https://github.com/sumerc/yappi) (\ud83d\udc68\u200d\ud83d\udcbb 31 \u00b7 \ud83d\udd00 72 \u00b7 \ud83d\udce6 1.2K \u00b7 \ud83d\udccb 80 - 25% open \u00b7 \u23f1\ufe0f 18.12.2023):      <pre><code>git clone https://github.com/sumerc/yappi\n</code></pre> - [PyPi](https://pypi.org/project/yappi) (\ud83d\udce5 3.1M / month \u00b7 \ud83d\udce6 53 \u00b7 \u23f1\ufe0f 07.12.2023):     <pre><code>pip install yappi\n</code></pre> - [Conda](https://anaconda.org/conda-forge/yappi) (\ud83d\udce5 180K \u00b7 \u23f1\ufe0f 07.12.2023):     <pre><code>conda install -c conda-forge yappi\n</code></pre> memory-profiler (\ud83e\udd4928 \u00b7  \u2b50 4.2K) - Monitor Memory usage of Python code. <code>BSD-3</code>  - [GitHub](https://github.com/pythonprofilers/memory_profiler) (\ud83d\udc68\u200d\ud83d\udcbb 100 \u00b7 \ud83d\udd00 370 \u00b7 \ud83d\udccb 250 - 53% open \u00b7 \u23f1\ufe0f 16.04.2024):      <pre><code>git clone https://github.com/pythonprofilers/memory_profiler\n</code></pre> - [PyPi](https://pypi.org/project/memory_profiler) (\ud83d\udce5 1.5M / month \u00b7 \ud83d\udce6 410 \u00b7 \u23f1\ufe0f 15.11.2022):     <pre><code>pip install memory_profiler\n</code></pre> - [Conda](https://anaconda.org/conda-forge/memory_profiler) (\ud83d\udce5 790K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge memory_profiler\n</code></pre> line_profiler (\ud83e\udd4928 \u00b7  \u2b50 2.5K) - Line-by-line profiling for Python. <code>BSD-3</code>  - [GitHub](https://github.com/pyutils/line_profiler) (\ud83d\udc68\u200d\ud83d\udcbb 44 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce5 4 \u00b7 \ud83d\udccb 100 - 45% open \u00b7 \u23f1\ufe0f 28.04.2024):      <pre><code>git clone https://github.com/pyutils/line_profiler\n</code></pre> - [PyPi](https://pypi.org/project/line_profiler) (\ud83d\udce5 540K / month \u00b7 \ud83d\udce6 180 \u00b7 \u23f1\ufe0f 28.04.2024):     <pre><code>pip install line_profiler\n</code></pre> - [Conda](https://anaconda.org/conda-forge/line_profiler) (\ud83d\udce5 870K \u00b7 \u23f1\ufe0f 27.09.2023):     <pre><code>conda install -c conda-forge line_profiler\n</code></pre> Diamond (\ud83e\udd4928 \u00b7  \u2b50 1.7K) - Diamond is a python daemon that collects system metrics and publishes.. <code>MIT</code>  - [GitHub](https://github.com/python-diamond/Diamond) (\ud83d\udc68\u200d\ud83d\udcbb 390 \u00b7 \ud83d\udd00 600 \u00b7 \ud83d\udce6 170 \u00b7 \ud83d\udccb 300 - 44% open \u00b7 \u23f1\ufe0f 01.11.2023):      <pre><code>git clone https://github.com/python-diamond/Diamond\n</code></pre> - [PyPi](https://pypi.org/project/diamond) (\ud83d\udce5 9.8K / month \u00b7 \ud83d\udce6 6 \u00b7 \u23f1\ufe0f 25.11.2016):     <pre><code>pip install diamond\n</code></pre> Show 8 hidden projects...  - Bpytop (\ud83e\udd4829 \u00b7  \u2b50 9.9K \u00b7 \ud83d\udc80) - Linux/OSX/FreeBSD resource monitor. <code>Apache-2</code> - memory_profiler (\ud83e\udd4926 \u00b7  \u2b50 4.2K \u00b7 \ud83d\udc80) - Monitor Memory usage of Python code. <code>BSD-3</code> - pympler (\ud83e\udd4926 \u00b7  \u2b50 1.2K \u00b7 \ud83d\udc80) - Development tool to measure, monitor and analyze the memory.. <code>Apache-2</code> - vprof (\ud83e\udd4923 \u00b7  \u2b50 4K \u00b7 \ud83d\udc80) - Visual profiler for Python. <code>BSD-2</code> - Profiling (\ud83e\udd4921 \u00b7  \u2b50 3K \u00b7 \ud83d\udc80) - Was an interactive continuous Python profiler. <code>BSD-3</code> - heartrate (\ud83e\udd4919 \u00b7  \u2b50 1.7K \u00b7 \ud83d\udc80) - Simple real time visualisation of the execution of a Python program. <code>MIT</code> - pyheat (\ud83e\udd4918 \u00b7  \u2b50 830 \u00b7 \ud83d\udc80) - pprofile + matplotlib = Python program profiled as an awesome heatmap!. <code>MIT</code> - livepython (\ud83e\udd4913 \u00b7  \u2b50 2.6K \u00b7 \ud83d\udc80) - Visually trace Python code in real-time. <code>MIT</code>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#ast-tools","title":"AST Tools","text":"executing (\ud83e\udd4730 \u00b7  \u2b50 310) - Get information about what a Python frame is currently doing,.. <code>MIT</code>  - [GitHub](https://github.com/alexmojaki/executing) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 31 \u00b7 \ud83d\udce6 190K \u00b7 \ud83d\udccb 43 - 41% open \u00b7 \u23f1\ufe0f 06.11.2023):      <pre><code>git clone https://github.com/alexmojaki/executing\n</code></pre> - [PyPi](https://pypi.org/project/executing) (\ud83d\udce5 32M / month \u00b7 \ud83d\udce6 390 \u00b7 \u23f1\ufe0f 29.10.2023):     <pre><code>pip install executing\n</code></pre> - [Conda](https://anaconda.org/conda-forge/executing) (\ud83d\udce5 12M \u00b7 \u23f1\ufe0f 29.10.2023):     <pre><code>conda install -c conda-forge executing\n</code></pre> astor (\ud83e\udd4827 \u00b7  \u2b50 780) - Python AST read/write. <code>BSD-3</code>  - [GitHub](https://github.com/berkerpeksag/astor) (\ud83d\udc68\u200d\ud83d\udcbb 35 \u00b7 \ud83d\udd00 100 \u00b7 \ud83d\udccb 120 - 33% open \u00b7 \u23f1\ufe0f 30.03.2024):      <pre><code>git clone https://github.com/berkerpeksag/astor\n</code></pre> - [PyPi](https://pypi.org/project/astor) (\ud83d\udce5 6.2M / month \u00b7 \ud83d\udce6 570 \u00b7 \u23f1\ufe0f 10.12.2019):     <pre><code>pip install astor\n</code></pre> - [Conda](https://anaconda.org/conda-forge/astor) (\ud83d\udce5 2.3M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge astor\n</code></pre> gast (\ud83e\udd4827 \u00b7  \u2b50 140) - Python AST that abstracts the underlying Python version. <code>BSD-3</code>  - [GitHub](https://github.com/serge-sans-paille/gast) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 32 \u00b7 \ud83d\udce6 160K \u00b7 \ud83d\udccb 36 - 5% open \u00b7 \u23f1\ufe0f 26.05.2024):      <pre><code>git clone https://github.com/serge-sans-paille/gast\n</code></pre> - [PyPi](https://pypi.org/project/gast) (\ud83d\udce5 19M / month \u00b7 \ud83d\udce6 410 \u00b7 \u23f1\ufe0f 29.04.2023):     <pre><code>pip install gast\n</code></pre> - [Conda](https://anaconda.org/conda-forge/gast) (\ud83d\udce5 2.7M \u00b7 \u23f1\ufe0f 03.07.2023):     <pre><code>conda install -c conda-forge gast\n</code></pre> typed_ast (\ud83e\udd4926 \u00b7  \u2b50 230 \u00b7 \ud83d\udca4) - Modified fork of CPythons ast module that parses `# type:`.. <code>Apache-2</code>  - [GitHub](https://github.com/python/typed_ast) (\ud83d\udc68\u200d\ud83d\udcbb 26 \u00b7 \ud83d\udd00 53 \u00b7 \ud83d\udccb 87 - 1% open \u00b7 \u23f1\ufe0f 03.07.2023):      <pre><code>git clone https://github.com/python/typed_ast\n</code></pre> - [PyPi](https://pypi.org/project/typed_ast) (\ud83d\udce5 7.2M / month \u00b7 \ud83d\udce6 620 \u00b7 \u23f1\ufe0f 04.07.2023):     <pre><code>pip install typed_ast\n</code></pre> - [Conda](https://anaconda.org/conda-forge/typed-ast) (\ud83d\udce5 6.3M \u00b7 \u23f1\ufe0f 22.09.2023):     <pre><code>conda install -c conda-forge typed-ast\n</code></pre> asteval (\ud83e\udd4924 \u00b7  \u2b50 170 \u00b7 \ud83d\udcc8) - minimalistic evaluator of python expression using ast module. <code>MIT</code>  - [GitHub](https://github.com/newville/asteval) (\ud83d\udc68\u200d\ud83d\udcbb 24 \u00b7 \ud83d\udd00 40 \u00b7 \u23f1\ufe0f 06.11.2023):      <pre><code>git clone https://github.com/newville/asteval\n</code></pre> - [PyPi](https://pypi.org/project/asteval) (\ud83d\udce5 380K / month \u00b7 \ud83d\udce6 110 \u00b7 \u23f1\ufe0f 23.05.2024):     <pre><code>pip install asteval\n</code></pre> - [Conda](https://anaconda.org/conda-forge/asteval) (\ud83d\udce5 390K \u00b7 \u23f1\ufe0f 24.05.2024):     <pre><code>conda install -c conda-forge asteval\n</code></pre> Show 1 hidden projects...  - astunparse (\ud83e\udd4828 \u00b7  \u2b50 220 \u00b7 \ud83d\udc80) - An AST unparser for Python. <code>BSD-3</code>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#others","title":"Others","text":"pre-commit (\ud83e\udd4741 \u00b7  \u2b50 12K) - A framework for managing and maintaining multi-language pre-commit.. <code>MIT</code>  - [GitHub](https://github.com/pre-commit/pre-commit) (\ud83d\udc68\u200d\ud83d\udcbb 160 \u00b7 \ud83d\udd00 770 \u00b7 \ud83d\udce5 1.4M \u00b7 \ud83d\udce6 190K \u00b7 \ud83d\udccb 2K - 1% open \u00b7 \u23f1\ufe0f 27.05.2024):      <pre><code>git clone https://github.com/pre-commit/pre-commit\n</code></pre> - [PyPi](https://pypi.org/project/pre-commit) (\ud83d\udce5 22M / month \u00b7 \ud83d\udce6 11K \u00b7 \u23f1\ufe0f 11.05.2024):     <pre><code>pip install pre-commit\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pre-commit) (\ud83d\udce5 4.6M \u00b7 \u23f1\ufe0f 11.05.2024):     <pre><code>conda install -c conda-forge pre-commit\n</code></pre>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#related-resources","title":"Related Resources","text":"<ul> <li>Best-of lists: Discover other best-of lists with awesome open-source projects on all kinds of topics.</li> </ul>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#contribution","title":"Contribution","text":"<p>Contributions are encouraged and always welcome! If you like to add or update projects, choose one of the following ways:</p> <ul> <li>Open an issue by selecting one of the provided categories from the issue page and fill in the requested information.</li> <li>Modify the projects.yaml with your additions or changes, and submit a pull request. This can also be done directly via the Github UI.</li> </ul> <p>If you like to contribute to or share suggestions regarding the project metadata collection or markdown generation, please refer to the best-of-generator repository. If you like to create your own best-of list, we recommend to follow this guide.</p> <p>For more information on how to add or update projects, please read the contribution guidelines. By participating in this project, you agree to abide by its Code of Conduct.</p>"},{"location":"blog/2024/09/28/best-of-python-developer-tools/#license","title":"License","text":""},{"location":"blog/2024/09/30/best-of-python/","title":"Best of Python","text":"Best-of Python      <p> \ud83c\udfc6\u00a0 A ranked list of awesome Python open-source libraries &amp; tools. Updated weekly. </p> <p> </p> <p>This curated list contains 390 awesome open-source projects with a total of 1.8M stars grouped into 28 categories. All projects are ranked by a project-quality score, which is calculated based on various metrics automatically collected from GitHub and different package managers. If you like to add or update projects, feel free to open an issue, submit a pull request, or directly edit the projects.yaml. Contributions are very welcome!</p> <p>      \ud83e\uddd9\u200d\u2642\ufe0f\u00a0 Discover other best-of lists or create your own.     \ud83d\udceb\u00a0 Subscribe to our newsletter for updates and trending projects. </p>"},{"location":"blog/2024/09/30/best-of-python/#contents","title":"Contents","text":"<ul> <li>Data Serialization 16 projects</li> <li>Data Containers &amp; Dataframes 30 projects</li> <li>Data Structures 15 projects</li> <li>Data Validation 15 projects</li> <li>Algorithms &amp; Design Patterns 4 projects</li> <li>Date &amp; Time Utilities 9 projects</li> <li>File &amp; Path Utilities 10 projects</li> <li>Compatiblity 7 projects</li> <li>Cryptography 7 projects</li> <li>Infrastructure &amp; DevOps 20 projects</li> <li>Process Utilities 4 projects</li> <li>Asynchronous Programming 7 projects</li> <li>Configuration 9 projects</li> <li>CLI Development 19 projects</li> <li>Development Tools 1 projects</li> <li>Data Caching 6 projects</li> <li>GUI Development 10 projects</li> <li>Computer &amp; Machine Vision 2 projects</li> <li>Machine Learning &amp; Data Engineering 1 projects</li> <li>Text Data 12 projects</li> <li>Web Development 1 projects</li> <li>Database Clients 64 projects</li> <li>Data Loading &amp; Extraction 30 projects</li> <li>Data Pipelines &amp; Streaming 43 projects</li> <li>File Formats 3 projects</li> <li>Code Inspection 4 projects</li> <li>General Utilities 15 projects</li> <li>Python Implementations 6 projects</li> <li>Others 21 projects</li> </ul>"},{"location":"blog/2024/09/30/best-of-python/#explanation","title":"Explanation","text":"<ul> <li>\ud83e\udd47\ud83e\udd48\ud83e\udd49\u00a0 Combined project-quality score</li> <li>\u2b50\ufe0f\u00a0 Star count from GitHub</li> <li>\ud83d\udc23\u00a0 New project (less than 6 months old)</li> <li>\ud83d\udca4\u00a0 Inactive project (6 months no activity)</li> <li>\ud83d\udc80\u00a0 Dead project (12 months no activity)</li> <li>\ud83d\udcc8\ud83d\udcc9\u00a0 Project is trending up or down</li> <li>\u2795\u00a0 Project was recently added</li> <li>\u2757\ufe0f\u00a0 Warning (e.g. missing/risky license)</li> <li>\ud83d\udc68\u200d\ud83d\udcbb\u00a0 Contributors count from GitHub</li> <li>\ud83d\udd00\u00a0 Fork count from GitHub</li> <li>\ud83d\udccb\u00a0 Issue count from GitHub</li> <li>\u23f1\ufe0f\u00a0 Last update timestamp on package manager</li> <li>\ud83d\udce5\u00a0 Download count from package manager</li> <li>\ud83d\udce6\u00a0 Number of dependent projects</li> <li>\u00a0 Pandas related project</li> </ul>"},{"location":"blog/2024/09/30/best-of-python/#data-serialization","title":"Data Serialization","text":"protobuf (\ud83e\udd4752 \u00b7  \u2b50 64K \u00b7 \ud83d\udcc9) - Protocol Buffers - Googles data interchange format. <code>BSD-3</code>  - [GitHub](https://github.com/protocolbuffers/protobuf) (\ud83d\udc68\u200d\ud83d\udcbb 1.2K \u00b7 \ud83d\udd00 15K \u00b7 \ud83d\udce5 44M \u00b7 \ud83d\udce6 650K \u00b7 \ud83d\udccb 6.2K - 6% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/protocolbuffers/protobuf\n</code></pre> - [PyPi](https://pypi.org/project/protobuf) (\ud83d\udce5 190M / month \u00b7 \ud83d\udce6 6.8K \u00b7 \u23f1\ufe0f 23.05.2024):     <pre><code>pip install protobuf\n</code></pre> - [Conda](https://anaconda.org/conda-forge/protobuf) (\ud83d\udce5 18M \u00b7 \u23f1\ufe0f 06.03.2024):     <pre><code>conda install -c conda-forge protobuf\n</code></pre> - [npm](https://www.npmjs.com/package/google-protobuf) (\ud83d\udce5 7.6M / month \u00b7 \ud83d\udce6 2.9K \u00b7 \u23f1\ufe0f 10.10.2022):     <pre><code>npm install google-protobuf\n</code></pre> flatbuffers (\ud83e\udd4743 \u00b7  \u2b50 22K) - FlatBuffers: Memory Efficient Serialization Library. <code>Apache-2</code>  - [GitHub](https://github.com/google/flatbuffers) (\ud83d\udc68\u200d\ud83d\udcbb 680 \u00b7 \ud83d\udd00 3.2K \u00b7 \ud83d\udce5 460K \u00b7 \ud83d\udce6 110K \u00b7 \ud83d\udccb 2.4K - 6% open \u00b7 \u23f1\ufe0f 03.06.2024):      <pre><code>git clone https://github.com/google/flatbuffers\n</code></pre> - [PyPi](https://pypi.org/project/flatbuffers) (\ud83d\udce5 19M / month \u00b7 \ud83d\udce6 410 \u00b7 \u23f1\ufe0f 26.03.2024):     <pre><code>pip install flatbuffers\n</code></pre> - [Conda](https://anaconda.org/conda-forge/flatbuffers) (\ud83d\udce5 1.1M \u00b7 \u23f1\ufe0f 26.03.2024):     <pre><code>conda install -c conda-forge flatbuffers\n</code></pre> - [npm](https://www.npmjs.com/package/flatbuffers) (\ud83d\udce5 1.4M / month \u00b7 \ud83d\udce6 230 \u00b7 \u23f1\ufe0f 26.03.2024):     <pre><code>npm install flatbuffers\n</code></pre> marshmallow (\ud83e\udd4840 \u00b7  \u2b50 6.9K) - A lightweight library for converting complex objects to and from.. <code>MIT</code>  - [GitHub](https://github.com/marshmallow-code/marshmallow) (\ud83d\udc68\u200d\ud83d\udcbb 210 \u00b7 \ud83d\udd00 620 \u00b7 \ud83d\udce6 140K \u00b7 \ud83d\udccb 1.2K - 14% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/marshmallow-code/marshmallow\n</code></pre> - [PyPi](https://pypi.org/project/marshmallow) (\ud83d\udce5 49M / month \u00b7 \ud83d\udce6 2.2K \u00b7 \u23f1\ufe0f 06.06.2024):     <pre><code>pip install marshmallow\n</code></pre> - [Conda](https://anaconda.org/conda-forge/marshmallow) (\ud83d\udce5 2.5M \u00b7 \u23f1\ufe0f 06.06.2024):     <pre><code>conda install -c conda-forge marshmallow\n</code></pre> orjson (\ud83e\udd4838 \u00b7  \u2b50 5.7K) - Fast, correct Python JSON library supporting dataclasses, datetimes,.. <code>Apache-2</code>  - [GitHub](https://github.com/ijl/orjson) (\ud83d\udc68\u200d\ud83d\udcbb 22 \u00b7 \ud83d\udd00 200 \u00b7 \ud83d\udce6 98K \u00b7 \ud83d\udccb 400 - 2% open \u00b7 \u23f1\ufe0f 03.05.2024):      <pre><code>git clone https://github.com/ijl/orjson\n</code></pre> - [PyPi](https://pypi.org/project/orjson) (\ud83d\udce5 32M / month \u00b7 \ud83d\udce6 2.4K \u00b7 \u23f1\ufe0f 03.05.2024):     <pre><code>pip install orjson\n</code></pre> - [Conda](https://anaconda.org/conda-forge/orjson) (\ud83d\udce5 1.3M \u00b7 \u23f1\ufe0f 03.05.2024):     <pre><code>conda install -c conda-forge orjson\n</code></pre> dill (\ud83e\udd4837 \u00b7  \u2b50 2.2K) - serialize all of Python. <code>BSD-3</code>  - [GitHub](https://github.com/uqfoundation/dill) (\ud83d\udc68\u200d\ud83d\udcbb 45 \u00b7 \ud83d\udd00 170 \u00b7 \ud83d\udce5 290K \u00b7 \ud83d\udce6 160K \u00b7 \ud83d\udccb 520 - 35% open \u00b7 \u23f1\ufe0f 24.05.2024):      <pre><code>git clone https://github.com/uqfoundation/dill\n</code></pre> - [PyPi](https://pypi.org/project/dill) (\ud83d\udce5 60M / month \u00b7 \ud83d\udce6 2.9K \u00b7 \u23f1\ufe0f 27.01.2024):     <pre><code>pip install dill\n</code></pre> - [Conda](https://anaconda.org/conda-forge/dill) (\ud83d\udce5 6.8M \u00b7 \u23f1\ufe0f 28.01.2024):     <pre><code>conda install -c conda-forge dill\n</code></pre> jsonpickle (\ud83e\udd4836 \u00b7  \u2b50 1.2K) - Python library for serializing any arbitrary object graph into.. <code>BSD-3</code>  - [GitHub](https://github.com/jsonpickle/jsonpickle) (\ud83d\udc68\u200d\ud83d\udcbb 76 \u00b7 \ud83d\udd00 170 \u00b7 \ud83d\udccb 320 - 22% open \u00b7 \u23f1\ufe0f 02.06.2024):      <pre><code>git clone https://github.com/jsonpickle/jsonpickle\n</code></pre> - [PyPi](https://pypi.org/project/jsonpickle) (\ud83d\udce5 12M / month \u00b7 \ud83d\udce6 1.2K \u00b7 \u23f1\ufe0f 11.04.2024):     <pre><code>pip install jsonpickle\n</code></pre> - [Conda](https://anaconda.org/conda-forge/jsonpickle) (\ud83d\udce5 1.7M \u00b7 \u23f1\ufe0f 11.04.2024):     <pre><code>conda install -c conda-forge jsonpickle\n</code></pre> msgpack (\ud83e\udd4835 \u00b7  \u2b50 1.9K) - MessagePack serializer implementation for Python msgpack.org[Python]. <code>Apache-2</code>  - [GitHub](https://github.com/msgpack/msgpack-python) (\ud83d\udc68\u200d\ud83d\udcbb 79 \u00b7 \ud83d\udd00 220 \u00b7 \ud83d\udce5 1.3K \u00b7 \ud83d\udccb 290 - 1% open \u00b7 \u23f1\ufe0f 07.05.2024):      <pre><code>git clone https://github.com/msgpack/msgpack-python\n</code></pre> - [PyPi](https://pypi.org/project/msgpack) (\ud83d\udce5 71M / month \u00b7 \ud83d\udce6 1.9K \u00b7 \u23f1\ufe0f 07.05.2024):     <pre><code>pip install msgpack\n</code></pre> - [Conda](https://anaconda.org/conda-forge/msgpack-python) (\ud83d\udce5 16M \u00b7 \u23f1\ufe0f 14.05.2024):     <pre><code>conda install -c conda-forge msgpack-python\n</code></pre> ultrajson (\ud83e\udd4934 \u00b7  \u2b50 4.3K) - Ultra fast JSON decoder and encoder written in C with Python bindings. <code>BSD-3</code>  - [GitHub](https://github.com/ultrajson/ultrajson) (\ud83d\udc68\u200d\ud83d\udcbb 88 \u00b7 \ud83d\udd00 360 \u00b7 \ud83d\udccb 350 - 8% open \u00b7 \u23f1\ufe0f 01.06.2024):      <pre><code>git clone https://github.com/ultrajson/ultrajson\n</code></pre> - [PyPi](https://pypi.org/project/ujson) (\ud83d\udce5 21M / month \u00b7 \ud83d\udce6 2.2K \u00b7 \u23f1\ufe0f 14.05.2024):     <pre><code>pip install ujson\n</code></pre> - [Conda](https://anaconda.org/conda-forge/ujson) (\ud83d\udce5 4.9M \u00b7 \u23f1\ufe0f 15.05.2024):     <pre><code>conda install -c conda-forge ujson\n</code></pre> simplejson (\ud83e\udd4934 \u00b7  \u2b50 1.6K) - simplejson is a simple, fast, extensible JSON encoder/decoder for.. <code>MIT</code>  - [GitHub](https://github.com/simplejson/simplejson) (\ud83d\udc68\u200d\ud83d\udcbb 43 \u00b7 \ud83d\udd00 330 \u00b7 \ud83d\udce5 6.5K \u00b7 \ud83d\udce6 130K \u00b7 \ud83d\udccb 200 - 10% open \u00b7 \u23f1\ufe0f 03.12.2023):      <pre><code>git clone https://github.com/simplejson/simplejson\n</code></pre> - [PyPi](https://pypi.org/project/simplejson) (\ud83d\udce5 21M / month \u00b7 \ud83d\udce6 2.5K \u00b7 \u23f1\ufe0f 06.10.2023):     <pre><code>pip install simplejson\n</code></pre> - [Conda](https://anaconda.org/conda-forge/simplejson) (\ud83d\udce5 3.3M \u00b7 \u23f1\ufe0f 15.02.2024):     <pre><code>conda install -c conda-forge simplejson\n</code></pre> cloudpickle (\ud83e\udd4932 \u00b7  \u2b50 1.6K) - Extended pickling support for Python objects. <code>BSD-3</code>  - [GitHub](https://github.com/cloudpipe/cloudpickle) (\ud83d\udc68\u200d\ud83d\udcbb 59 \u00b7 \ud83d\udd00 160 \u00b7 \ud83d\udce5 27 \u00b7 \ud83d\udccb 260 - 34% open \u00b7 \u23f1\ufe0f 08.04.2024):      <pre><code>git clone https://github.com/cloudpipe/cloudpickle\n</code></pre> - [PyPi](https://pypi.org/project/cloudpickle) (\ud83d\udce5 44M / month \u00b7 \ud83d\udce6 1.6K \u00b7 \u23f1\ufe0f 16.10.2023):     <pre><code>pip install cloudpickle\n</code></pre> - [Conda](https://anaconda.org/conda-forge/cloudpickle) (\ud83d\udce5 17M \u00b7 \u23f1\ufe0f 16.10.2023):     <pre><code>conda install -c conda-forge cloudpickle\n</code></pre> python-rapidjson (\ud83e\udd4929 \u00b7  \u2b50 490) - Python wrapper around rapidjson. <code>MIT</code>  - [GitHub](https://github.com/python-rapidjson/python-rapidjson) (\ud83d\udc68\u200d\ud83d\udcbb 23 \u00b7 \ud83d\udd00 47 \u00b7 \ud83d\udce6 5.5K \u00b7 \ud83d\udccb 110 - 12% open \u00b7 \u23f1\ufe0f 18.05.2024):      <pre><code>git clone https://github.com/python-rapidjson/python-rapidjson\n</code></pre> - [PyPi](https://pypi.org/project/python-rapidjson) (\ud83d\udce5 2M / month \u00b7 \ud83d\udce6 240 \u00b7 \u23f1\ufe0f 18.05.2024):     <pre><code>pip install python-rapidjson\n</code></pre> - [Conda](https://anaconda.org/conda-forge/python-rapidjson) (\ud83d\udce5 1.7M \u00b7 \u23f1\ufe0f 18.05.2024):     <pre><code>conda install -c conda-forge python-rapidjson\n</code></pre> srsly (\ud83e\udd4928 \u00b7  \u2b50 420) - Modern high-performance serialization utilities for Python (JSON,.. <code>MIT</code>  - [GitHub](https://github.com/explosion/srsly) (\ud83d\udc68\u200d\ud83d\udcbb 15 \u00b7 \ud83d\udd00 30 \u00b7 \ud83d\udce6 45K \u00b7 \ud83d\udccb 30 - 13% open \u00b7 \u23f1\ufe0f 11.04.2024):      <pre><code>git clone https://github.com/explosion/srsly\n</code></pre> - [PyPi](https://pypi.org/project/srsly) (\ud83d\udce5 11M / month \u00b7 \ud83d\udce6 170 \u00b7 \u23f1\ufe0f 22.09.2023):     <pre><code>pip install srsly\n</code></pre> - [Conda](https://anaconda.org/conda-forge/srsly) (\ud83d\udce5 1.5M \u00b7 \u23f1\ufe0f 25.09.2023):     <pre><code>conda install -c conda-forge srsly\n</code></pre> pysimdjson (\ud83e\udd4926 \u00b7  \u2b50 630) - Python bindings for the simdjson project. <code>MIT</code>  - [GitHub](https://github.com/TkTech/pysimdjson) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 52 \u00b7 \ud83d\udce6 1.3K \u00b7 \ud83d\udccb 87 - 10% open \u00b7 \u23f1\ufe0f 05.02.2024):      <pre><code>git clone https://github.com/TkTech/pysimdjson\n</code></pre> - [PyPi](https://pypi.org/project/pysimdjson) (\ud83d\udce5 1.1M / month \u00b7 \ud83d\udce6 49 \u00b7 \u23f1\ufe0f 06.02.2024):     <pre><code>pip install pysimdjson\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pysimdjson) (\ud83d\udce5 98K \u00b7 \u23f1\ufe0f 06.02.2024):     <pre><code>conda install -c conda-forge pysimdjson\n</code></pre> hickle (\ud83e\udd4926 \u00b7  \u2b50 480) - a HDF5-based python pickle replacement. <code>MIT</code>  - [GitHub](https://github.com/telegraphic/hickle) (\ud83d\udc68\u200d\ud83d\udcbb 26 \u00b7 \ud83d\udd00 71 \u00b7 \ud83d\udce6 760 \u00b7 \ud83d\udccb 110 - 5% open \u00b7 \u23f1\ufe0f 31.03.2024):      <pre><code>git clone https://github.com/telegraphic/hickle\n</code></pre> - [PyPi](https://pypi.org/project/hickle) (\ud83d\udce5 49K / month \u00b7 \ud83d\udce6 39 \u00b7 \u23f1\ufe0f 30.03.2024):     <pre><code>pip install hickle\n</code></pre> - [Conda](https://anaconda.org/conda-forge/hickle) (\ud83d\udce5 25K \u00b7 \u23f1\ufe0f 14.02.2024):     <pre><code>conda install -c conda-forge hickle\n</code></pre> rtoml (\ud83e\udd4922 \u00b7  \u2b50 300) - A fast TOML library for python implemented in rust. <code>MIT</code>  - [GitHub](https://github.com/samuelcolvin/rtoml) (\ud83d\udc68\u200d\ud83d\udcbb 15 \u00b7 \ud83d\udd00 30 \u00b7 \ud83d\udce6 420 \u00b7 \ud83d\udccb 26 - 57% open \u00b7 \u23f1\ufe0f 26.01.2024):      <pre><code>git clone https://github.com/samuelcolvin/rtoml\n</code></pre> - [PyPi](https://pypi.org/project/rtoml) (\ud83d\udce5 460K / month \u00b7 \ud83d\udce6 110 \u00b7 \u23f1\ufe0f 21.12.2023):     <pre><code>pip install rtoml\n</code></pre> Show 1 hidden projects...  - pyasn1 (\ud83e\udd4835 \u00b7  \u2b50 240 \u00b7 \ud83d\udc80) - Generic ASN.1 library for Python. <code>BSD-2</code>"},{"location":"blog/2024/09/30/best-of-python/#data-containers-dataframes","title":"Data Containers &amp; Dataframes","text":"<p>General-purpose data containers as well as utilities &amp; extensions for pandas.</p> pandas (\ud83e\udd4754 \u00b7  \u2b50 42K) - Flexible and powerful data analysis / manipulation library for.. <code>BSD-3</code> <code></code>  - [GitHub](https://github.com/pandas-dev/pandas) (\ud83d\udc68\u200d\ud83d\udcbb 3.6K \u00b7 \ud83d\udd00 17K \u00b7 \ud83d\udce5 270K \u00b7 \ud83d\udce6 1.7M \u00b7 \ud83d\udccb 27K - 14% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/pandas-dev/pandas\n</code></pre> - [PyPi](https://pypi.org/project/pandas) (\ud83d\udce5 230M / month \u00b7 \ud83d\udce6 67K \u00b7 \u23f1\ufe0f 10.04.2024):     <pre><code>pip install pandas\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pandas) (\ud83d\udce5 52M \u00b7 \u23f1\ufe0f 16.05.2024):     <pre><code>conda install -c conda-forge pandas\n</code></pre> polars (\ud83e\udd4744 \u00b7  \u2b50 27K \u00b7 \ud83d\udcc8) - Dataframes powered by a multithreaded, vectorized query engine, written.. <code>MIT</code>  - [GitHub](https://github.com/pola-rs/polars) (\ud83d\udc68\u200d\ud83d\udcbb 420 \u00b7 \ud83d\udd00 1.6K \u00b7 \ud83d\udce5 980 \u00b7 \ud83d\udce6 9.8K \u00b7 \ud83d\udccb 7.7K - 21% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/pola-rs/polars\n</code></pre> - [PyPi](https://pypi.org/project/polars) (\ud83d\udce5 7.6M / month \u00b7 \ud83d\udce6 980 \u00b7 \u23f1\ufe0f 01.06.2024):     <pre><code>pip install polars\n</code></pre> h5py (\ud83e\udd4841 \u00b7  \u2b50 2K) - HDF5 for Python -- The h5py package is a Pythonic interface to the HDF5.. <code>BSD-3</code>  - [GitHub](https://github.com/h5py/h5py) (\ud83d\udc68\u200d\ud83d\udcbb 200 \u00b7 \ud83d\udd00 520 \u00b7 \ud83d\udce5 3.4K \u00b7 \ud83d\udce6 270K \u00b7 \ud83d\udccb 1.5K - 18% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/h5py/h5py\n</code></pre> - [PyPi](https://pypi.org/project/h5py) (\ud83d\udce5 22M / month \u00b7 \ud83d\udce6 6.7K \u00b7 \u23f1\ufe0f 10.04.2024):     <pre><code>pip install h5py\n</code></pre> - [Conda](https://anaconda.org/conda-forge/h5py) (\ud83d\udce5 16M \u00b7 \u23f1\ufe0f 06.06.2024):     <pre><code>conda install -c conda-forge h5py\n</code></pre> xarray (\ud83e\udd4840 \u00b7  \u2b50 3.4K) - N-D labeled arrays and datasets in Python. <code>Apache-2</code>  - [GitHub](https://github.com/pydata/xarray) (\ud83d\udc68\u200d\ud83d\udcbb 500 \u00b7 \ud83d\udd00 1K \u00b7 \ud83d\udce6 27K \u00b7 \ud83d\udccb 4.3K - 26% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/pydata/xarray\n</code></pre> - [PyPi](https://pypi.org/project/xarray) (\ud83d\udce5 5.3M / month \u00b7 \ud83d\udce6 3K \u00b7 \u23f1\ufe0f 13.05.2024):     <pre><code>pip install xarray\n</code></pre> - [Conda](https://anaconda.org/conda-forge/xarray) (\ud83d\udce5 10M \u00b7 \u23f1\ufe0f 13.05.2024):     <pre><code>conda install -c conda-forge xarray\n</code></pre> Modin (\ud83e\udd4837 \u00b7  \u2b50 9.5K) - Modin: Scale your Pandas workflows by changing a single line of.. <code>Apache-2</code> <code></code>  - [GitHub](https://github.com/modin-project/modin) (\ud83d\udc68\u200d\ud83d\udcbb 130 \u00b7 \ud83d\udd00 640 \u00b7 \ud83d\udce5 200K \u00b7 \ud83d\udce6 1.5K \u00b7 \ud83d\udccb 4.2K - 16% open \u00b7 \u23f1\ufe0f 03.06.2024):      <pre><code>git clone https://github.com/modin-project/modin\n</code></pre> - [PyPi](https://pypi.org/project/modin) (\ud83d\udce5 1.4M / month \u00b7 \ud83d\udce6 47 \u00b7 \u23f1\ufe0f 15.05.2024):     <pre><code>pip install modin\n</code></pre> - [Conda](https://anaconda.org/conda-forge/modin-core) (\ud83d\udce5 330K \u00b7 \u23f1\ufe0f 15.05.2024):     <pre><code>conda install -c conda-forge modin-core\n</code></pre> numexpr (\ud83e\udd4837 \u00b7  \u2b50 2.2K) - Fast numerical array expression evaluator for Python, NumPy, Pandas,.. <code>MIT</code>  - [GitHub](https://github.com/pydata/numexpr) (\ud83d\udc68\u200d\ud83d\udcbb 78 \u00b7 \ud83d\udd00 200 \u00b7 \ud83d\udce5 640 \u00b7 \ud83d\udce6 76K \u00b7 \ud83d\udccb 380 - 1% open \u00b7 \u23f1\ufe0f 31.05.2024):      <pre><code>git clone https://github.com/pydata/numexpr\n</code></pre> - [PyPi](https://pypi.org/project/numexpr) (\ud83d\udce5 3.9M / month \u00b7 \ud83d\udce6 860 \u00b7 \u23f1\ufe0f 02.04.2024):     <pre><code>pip install numexpr\n</code></pre> - [Conda](https://anaconda.org/conda-forge/numexpr) (\ud83d\udce5 8.2M \u00b7 \u23f1\ufe0f 27.05.2024):     <pre><code>conda install -c conda-forge numexpr\n</code></pre> zarr (\ud83e\udd4836 \u00b7  \u2b50 1.4K) - An implementation of chunked, compressed, N-dimensional arrays for Python. <code>MIT</code>  - [GitHub](https://github.com/zarr-developers/zarr-python) (\ud83d\udc68\u200d\ud83d\udcbb 98 \u00b7 \ud83d\udd00 260 \u00b7 \ud83d\udce6 3.9K \u00b7 \ud83d\udccb 770 - 42% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/zarr-developers/zarr-python\n</code></pre> - [PyPi](https://pypi.org/project/zarr) (\ud83d\udce5 610K / month \u00b7 \ud83d\udce6 900 \u00b7 \u23f1\ufe0f 26.05.2024):     <pre><code>pip install zarr\n</code></pre> - [Conda](https://anaconda.org/conda-forge/zarr) (\ud83d\udce5 3.1M \u00b7 \u23f1\ufe0f 27.05.2024):     <pre><code>conda install -c conda-forge zarr\n</code></pre> PyTables (\ud83e\udd4834 \u00b7  \u2b50 1.3K) - A Python package to manage extremely large amounts of data. <code>BSD-3</code>  - [GitHub](https://github.com/PyTables/PyTables) (\ud83d\udc68\u200d\ud83d\udcbb 140 \u00b7 \ud83d\udd00 270 \u00b7 \ud83d\udce5 190 \u00b7 \ud83d\udccb 730 - 23% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/PyTables/PyTables\n</code></pre> - [PyPi](https://pypi.org/project/tables) (\ud83d\udce5 970K / month \u00b7 \ud83d\udce6 1.4K \u00b7 \u23f1\ufe0f 27.11.2023):     <pre><code>pip install tables\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytables) (\ud83d\udce5 7.3M \u00b7 \u23f1\ufe0f 11.04.2024):     <pre><code>conda install -c conda-forge pytables\n</code></pre> pandera (\ud83e\udd4833 \u00b7  \u2b50 3.1K) - A light-weight, flexible, and expressive statistical data testing.. <code>MIT</code> <code></code>  - [GitHub](https://github.com/unionai-oss/pandera) (\ud83d\udc68\u200d\ud83d\udcbb 130 \u00b7 \ud83d\udd00 280 \u00b7 \ud83d\udce6 1.6K \u00b7 \ud83d\udccb 800 - 40% open \u00b7 \u23f1\ufe0f 31.05.2024):      <pre><code>git clone https://github.com/pandera-dev/pandera\n</code></pre> - [PyPi](https://pypi.org/project/pandera) (\ud83d\udce5 1.9M / month \u00b7 \ud83d\udce6 180 \u00b7 \u23f1\ufe0f 14.05.2024):     <pre><code>pip install pandera\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pandera-core) (\ud83d\udce5 40K \u00b7 \u23f1\ufe0f 08.05.2024):     <pre><code>conda install -c conda-forge pandera-core\n</code></pre> Bottleneck (\ud83e\udd4833 \u00b7  \u2b50 1K) - Fast NumPy array functions written in C. <code>BSD-2</code>  - [GitHub](https://github.com/pydata/bottleneck) (\ud83d\udc68\u200d\ud83d\udcbb 32 \u00b7 \ud83d\udd00 99 \u00b7 \ud83d\udce6 48K \u00b7 \ud83d\udccb 240 - 20% open \u00b7 \u23f1\ufe0f 23.05.2024):      <pre><code>git clone https://github.com/pydata/bottleneck\n</code></pre> - [PyPi](https://pypi.org/project/Bottleneck) (\ud83d\udce5 1M / month \u00b7 \ud83d\udce6 410 \u00b7 \u23f1\ufe0f 23.05.2024):     <pre><code>pip install Bottleneck\n</code></pre> - [Conda](https://anaconda.org/conda-forge/bottleneck) (\ud83d\udce5 4.1M \u00b7 \u23f1\ufe0f 26.02.2024):     <pre><code>conda install -c conda-forge bottleneck\n</code></pre> TinyDB (\ud83e\udd4832 \u00b7  \u2b50 6.6K \u00b7 \ud83d\udca4) - TinyDB is a lightweight document oriented database optimized for your.. <code>MIT</code>  - [GitHub](https://github.com/msiemens/tinydb) (\ud83d\udc68\u200d\ud83d\udcbb 82 \u00b7 \ud83d\udd00 520 \u00b7 \ud83d\udce6 13K \u00b7 \ud83d\udccb 320 - 8% open \u00b7 \u23f1\ufe0f 24.07.2023):      <pre><code>git clone https://github.com/msiemens/tinydb\n</code></pre> - [PyPi](https://pypi.org/project/tinydb) (\ud83d\udce5 650K / month \u00b7 \ud83d\udce6 650 \u00b7 \u23f1\ufe0f 12.06.2023):     <pre><code>pip install tinydb\n</code></pre> - [Conda](https://anaconda.org/conda-forge/tinydb) (\ud83d\udce5 400K \u00b7 \u23f1\ufe0f 12.06.2023):     <pre><code>conda install -c conda-forge tinydb\n</code></pre> docarray (\ud83e\udd4832 \u00b7  \u2b50 2.8K) - Represent, send, store and search multimodal data. <code>Apache-2</code>  - [GitHub](https://github.com/docarray/docarray) (\ud83d\udc68\u200d\ud83d\udcbb 74 \u00b7 \ud83d\udd00 220 \u00b7 \ud83d\udce6 4.4K \u00b7 \ud83d\udccb 640 - 10% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/jina-ai/docarray\n</code></pre> - [PyPi](https://pypi.org/project/docarray) (\ud83d\udce5 86K / month \u00b7 \ud83d\udce6 68 \u00b7 \u23f1\ufe0f 22.12.2023):     <pre><code>pip install docarray\n</code></pre> - [Conda](https://anaconda.org/conda-forge/docarray) (\ud83d\udce5 140K \u00b7 \u23f1\ufe0f 18.06.2023):     <pre><code>conda install -c conda-forge docarray\n</code></pre> Koalas (\ud83e\udd4931 \u00b7  \u2b50 3.3K \u00b7 \ud83d\udca4) - Koalas: pandas API on Apache Spark. <code>Apache-2</code> <code>spark</code> <code></code>  - [GitHub](https://github.com/databricks/koalas) (\ud83d\udc68\u200d\ud83d\udcbb 51 \u00b7 \ud83d\udd00 360 \u00b7 \ud83d\udce5 1K \u00b7 \ud83d\udce6 340 \u00b7 \ud83d\udccb 600 - 18% open \u00b7 \u23f1\ufe0f 21.09.2023):      <pre><code>git clone https://github.com/databricks/koalas\n</code></pre> - [PyPi](https://pypi.org/project/koalas) (\ud83d\udce5 2.3M / month \u00b7 \ud83d\udce6 31 \u00b7 \u23f1\ufe0f 19.10.2021):     <pre><code>pip install koalas\n</code></pre> - [Conda](https://anaconda.org/conda-forge/koalas) (\ud83d\udce5 340K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge koalas\n</code></pre> datasketch (\ud83e\udd4931 \u00b7  \u2b50 2.4K) - MinHash, LSH, LSH Forest, Weighted MinHash, HyperLogLog,.. <code>MIT</code>  - [GitHub](https://github.com/ekzhu/datasketch) (\ud83d\udc68\u200d\ud83d\udcbb 30 \u00b7 \ud83d\udd00 290 \u00b7 \ud83d\udce5 27 \u00b7 \ud83d\udce6 1.3K \u00b7 \ud83d\udccb 170 - 30% open \u00b7 \u23f1\ufe0f 26.03.2024):      <pre><code>git clone https://github.com/ekzhu/datasketch\n</code></pre> - [PyPi](https://pypi.org/project/datasketch) (\ud83d\udce5 2.8M / month \u00b7 \ud83d\udce6 44 \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>pip install datasketch\n</code></pre> Vaex (\ud83e\udd4930 \u00b7  \u2b50 8.2K \u00b7 \ud83d\udca4) - Out-of-Core hybrid Apache Arrow/NumPy DataFrame for Python, ML,.. <code>MIT</code>  - [GitHub](https://github.com/vaexio/vaex) (\ud83d\udc68\u200d\ud83d\udcbb 72 \u00b7 \ud83d\udd00 590 \u00b7 \ud83d\udce5 280 \u00b7 \ud83d\udce6 760 \u00b7 \ud83d\udccb 1.3K - 40% open \u00b7 \u23f1\ufe0f 21.07.2023):      <pre><code>git clone https://github.com/vaexio/vaex\n</code></pre> - [PyPi](https://pypi.org/project/vaex) (\ud83d\udce5 22K / month \u00b7 \ud83d\udce6 51 \u00b7 \u23f1\ufe0f 21.07.2023):     <pre><code>pip install vaex\n</code></pre> - [Conda](https://anaconda.org/conda-forge/vaex) (\ud83d\udce5 190K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge vaex\n</code></pre> datatable (\ud83e\udd4928 \u00b7  \u2b50 1.8K) - A Python package for manipulating 2-dimensional tabular data.. <code>MPL-2.0</code>  - [GitHub](https://github.com/h2oai/datatable) (\ud83d\udc68\u200d\ud83d\udcbb 37 \u00b7 \ud83d\udd00 150 \u00b7 \ud83d\udce5 2.4K \u00b7 \ud83d\udccb 1.5K - 11% open \u00b7 \u23f1\ufe0f 01.12.2023):      <pre><code>git clone https://github.com/h2oai/datatable\n</code></pre> - [PyPi](https://pypi.org/project/datatable) (\ud83d\udce5 53K / month \u00b7 \ud83d\udce6 45 \u00b7 \u23f1\ufe0f 01.12.2023):     <pre><code>pip install datatable\n</code></pre> - [Conda](https://anaconda.org/conda-forge/datatable) (\ud83d\udce5 26K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge datatable\n</code></pre> Pandaral\u00b7lel (\ud83e\udd4927 \u00b7  \u2b50 3.6K) - A simple and efficient tool to parallelize Pandas.. <code>BSD-3</code> <code></code> <code>jupyter</code>  - [GitHub](https://github.com/nalepae/pandarallel) (\ud83d\udc68\u200d\ud83d\udcbb 26 \u00b7 \ud83d\udd00 200 \u00b7 \ud83d\udccb 220 - 40% open \u00b7 \u23f1\ufe0f 16.02.2024):      <pre><code>git clone https://github.com/nalepae/pandarallel\n</code></pre> - [PyPi](https://pypi.org/project/pandarallel) (\ud83d\udce5 420K / month \u00b7 \ud83d\udce6 91 \u00b7 \u23f1\ufe0f 02.05.2023):     <pre><code>pip install pandarallel\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pandarallel) (\ud83d\udce5 93K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge pandarallel\n</code></pre> StaticFrame (\ud83e\udd4927 \u00b7  \u2b50 410) - Immutable and statically-typeable DataFrames with runtime type and.. <code>MIT</code>  - [GitHub](https://github.com/static-frame/static-frame) (\ud83d\udc68\u200d\ud83d\udcbb 23 \u00b7 \ud83d\udd00 33 \u00b7 \ud83d\udce6 22 \u00b7 \ud83d\udccb 630 - 7% open \u00b7 \u23f1\ufe0f 21.05.2024):      <pre><code>git clone https://github.com/InvestmentSystems/static-frame\n</code></pre> - [PyPi](https://pypi.org/project/static-frame) (\ud83d\udce5 6.1K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 21.05.2024):     <pre><code>pip install static-frame\n</code></pre> - [Conda](https://anaconda.org/conda-forge/static-frame) (\ud83d\udce5 340K \u00b7 \u23f1\ufe0f 21.05.2024):     <pre><code>conda install -c conda-forge static-frame\n</code></pre> swifter (\ud83e\udd4926 \u00b7  \u2b50 2.5K) - A package which efficiently applies any function to a pandas.. <code>MIT</code> <code></code>  - [GitHub](https://github.com/jmcarpenter2/swifter) (\ud83d\udc68\u200d\ud83d\udcbb 18 \u00b7 \ud83d\udd00 100 \u00b7 \ud83d\udce6 1.3K \u00b7 \ud83d\udccb 150 - 13% open \u00b7 \u23f1\ufe0f 14.03.2024):      <pre><code>git clone https://github.com/jmcarpenter2/swifter\n</code></pre> - [PyPi](https://pypi.org/project/swifter) (\ud83d\udce5 720K / month \u00b7 \ud83d\udce6 52 \u00b7 \u23f1\ufe0f 31.07.2023):     <pre><code>pip install swifter\n</code></pre> - [Conda](https://anaconda.org/conda-forge/swifter) (\ud83d\udce5 340K \u00b7 \u23f1\ufe0f 31.07.2023):     <pre><code>conda install -c conda-forge swifter\n</code></pre> Pandas Summary (\ud83e\udd4924 \u00b7  \u2b50 490) - Engine for ML/Data tracking, visualization,.. <code>Apache-2</code> <code></code>  - [GitHub](https://github.com/polyaxon/traceml) (\ud83d\udc68\u200d\ud83d\udcbb 99 \u00b7 \ud83d\udd00 43 \u00b7 \ud83d\udccb 14 - 42% open \u00b7 \u23f1\ufe0f 16.05.2024):      <pre><code>git clone https://github.com/polyaxon/datatile\n</code></pre> - [PyPi](https://pypi.org/project/pandas-summary) (\ud83d\udce5 87K / month \u00b7 \ud83d\udce6 21 \u00b7 \u23f1\ufe0f 25.11.2021):     <pre><code>pip install pandas-summary\n</code></pre> Show 10 hidden projects...  - numpy (\ud83e\udd4751 \u00b7  \u2b50 27K) - The fundamental package for scientific computing with Python. <code>\u2757Unlicensed</code> - Blaze (\ud83e\udd4931 \u00b7  \u2b50 3.2K \u00b7 \ud83d\udc80) - NumPy and Pandas interface to Big Data. <code>BSD-3</code> - Arctic (\ud83e\udd4929 \u00b7  \u2b50 3K) - Arctic is a high performance datastore for numeric data. <code>\u2757\ufe0fLGPL-2.1</code> - sklearn-pandas (\ud83e\udd4928 \u00b7  \u2b50 2.8K \u00b7 \ud83d\udc80) - Pandas integration with sklearn. <code>\u2757\ufe0fZlib</code> <code>sklearn</code> <code></code> - pandasql (\ud83e\udd4928 \u00b7  \u2b50 1.3K \u00b7 \ud83d\udc80) - sqldf for pandas. <code>MIT</code> <code></code> - bcolz (\ud83e\udd4926 \u00b7  \u2b50 960 \u00b7 \ud83d\udc80) - A columnar data container that can be compressed. <code>BSD-3</code> - pickleDB (\ud83e\udd4922 \u00b7  \u2b50 880 \u00b7 \ud83d\udc80) - pickleDB is an open source key-value store using Pythons json module. <code>BSD-3</code> - fletcher (\ud83e\udd4919 \u00b7  \u2b50 230 \u00b7 \ud83d\udc80) - Pandas ExtensionDType/Array backed by Apache Arrow. <code>MIT</code> <code></code> - Bounter (\ud83e\udd4918 \u00b7  \u2b50 940 \u00b7 \ud83d\udc80) - Efficient Counter that uses a limited (bounded) amount of memory.. <code>MIT</code> - PandaPy (\ud83e\udd4913 \u00b7  \u2b50 550 \u00b7 \ud83d\udc80) - PandaPy has the speed of NumPy and the usability of Pandas 10x to.. <code>MIT</code> <code></code> <p></p>"},{"location":"blog/2024/09/30/best-of-python/#data-structures","title":"Data Structures","text":"pyrsistent (\ud83e\udd4735 \u00b7  \u2b50 2K \u00b7 \ud83d\udca4) - Persistent/Immutable/Functional data structures for Python. <code>MIT</code>  - [GitHub](https://github.com/tobgu/pyrsistent) (\ud83d\udc68\u200d\ud83d\udcbb 73 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce6 340K \u00b7 \ud83d\udccb 180 - 14% open \u00b7 \u23f1\ufe0f 25.10.2023):      <pre><code>git clone https://github.com/tobgu/pyrsistent\n</code></pre> - [PyPi](https://pypi.org/project/pyrsistent) (\ud83d\udce5 41M / month \u00b7 \ud83d\udce6 1K \u00b7 \u23f1\ufe0f 25.10.2023):     <pre><code>pip install pyrsistent\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pyrsistent) (\ud83d\udce5 21M \u00b7 \u23f1\ufe0f 31.10.2023):     <pre><code>conda install -c conda-forge pyrsistent\n</code></pre> python-sortedcontainers (\ud83e\udd4732 \u00b7  \u2b50 3.3K) - Python Sorted Container Types: Sorted List, Sorted.. <code>Apache-2</code>  - [GitHub](https://github.com/grantjenks/python-sortedcontainers) (\ud83d\udc68\u200d\ud83d\udcbb 24 \u00b7 \ud83d\udd00 200 \u00b7 \ud83d\udccb 190 - 12% open \u00b7 \u23f1\ufe0f 01.03.2024):      <pre><code>git clone https://github.com/grantjenks/python-sortedcontainers\n</code></pre> - [PyPi](https://pypi.org/project/sortedcontainers) (\ud83d\udce5 59M / month \u00b7 \ud83d\udce6 1.2K \u00b7 \u23f1\ufe0f 16.05.2021):     <pre><code>pip install sortedcontainers\n</code></pre> - [Conda](https://anaconda.org/conda-forge/sortedcontainers) (\ud83d\udce5 13M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge sortedcontainers\n</code></pre> bidict (\ud83e\udd4732 \u00b7  \u2b50 1.4K) - The bidirectional mapping library for Python. <code>MPL-2.0</code>  - [GitHub](https://github.com/jab/bidict) (\ud83d\udc68\u200d\ud83d\udcbb 15 \u00b7 \ud83d\udd00 63 \u00b7 \ud83d\udce5 53 \u00b7 \ud83d\udce6 26K \u00b7 \ud83d\udccb 62 - 3% open \u00b7 \u23f1\ufe0f 04.05.2024):      <pre><code>git clone https://github.com/jab/bidict\n</code></pre> - [PyPi](https://pypi.org/project/bidict) (\ud83d\udce5 3.9M / month \u00b7 \ud83d\udce6 440 \u00b7 \u23f1\ufe0f 18.02.2024):     <pre><code>pip install bidict\n</code></pre> - [Conda](https://anaconda.org/conda-forge/bidict) (\ud83d\udce5 410K \u00b7 \u23f1\ufe0f 18.02.2024):     <pre><code>conda install -c conda-forge bidict\n</code></pre> multidict (\ud83e\udd4732 \u00b7  \u2b50 400) - The multidict implementation. <code>Apache-2</code>  - [GitHub](https://github.com/aio-libs/multidict) (\ud83d\udc68\u200d\ud83d\udcbb 54 \u00b7 \ud83d\udd00 95 \u00b7 \ud83d\udce5 6.8K \u00b7 \ud83d\udccb 160 - 14% open \u00b7 \u23f1\ufe0f 19.04.2024):      <pre><code>git clone https://github.com/aio-libs/multidict\n</code></pre> - [PyPi](https://pypi.org/project/multidict) (\ud83d\udce5 110M / month \u00b7 \ud83d\udce6 1.3K \u00b7 \u23f1\ufe0f 01.02.2024):     <pre><code>pip install multidict\n</code></pre> - [Conda](https://anaconda.org/conda-forge/multidict) (\ud83d\udce5 13M \u00b7 \u23f1\ufe0f 04.02.2024):     <pre><code>conda install -c conda-forge multidict\n</code></pre> anytree (\ud83e\udd4831 \u00b7  \u2b50 910 \u00b7 \ud83d\udca4) - Python tree data library. <code>Apache-2</code>  - [GitHub](https://github.com/c0fec0de/anytree) (\ud83d\udc68\u200d\ud83d\udcbb 29 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce6 19K \u00b7 \ud83d\udccb 190 - 14% open \u00b7 \u23f1\ufe0f 16.11.2023):      <pre><code>git clone https://github.com/c0fec0de/anytree\n</code></pre> - [PyPi](https://pypi.org/project/anytree) (\ud83d\udce5 1.5M / month \u00b7 \ud83d\udce6 480 \u00b7 \u23f1\ufe0f 16.11.2023):     <pre><code>pip install anytree\n</code></pre> - [Conda](https://anaconda.org/conda-forge/anytree) (\ud83d\udce5 40K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge anytree\n</code></pre> python-benedict (\ud83e\udd4829 \u00b7  \u2b50 1.4K) - dict subclass with keylist/keypath support, built-in I/O.. <code>MIT</code>  - [GitHub](https://github.com/fabiocaccamo/python-benedict) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 48 \u00b7 \ud83d\udce6 1.7K \u00b7 \ud83d\udccb 110 - 17% open \u00b7 \u23f1\ufe0f 15.05.2024):      <pre><code>git clone https://github.com/fabiocaccamo/python-benedict\n</code></pre> - [PyPi](https://pypi.org/project/python-benedict) (\ud83d\udce5 620K / month \u00b7 \ud83d\udce6 67 \u00b7 \u23f1\ufe0f 04.03.2024):     <pre><code>pip install python-benedict\n</code></pre> - [Conda](https://anaconda.org/conda-forge/python-benedict) (\ud83d\udce5 160K \u00b7 \u23f1\ufe0f 05.03.2024):     <pre><code>conda install -c conda-forge python-benedict\n</code></pre> glom (\ud83e\udd4928 \u00b7  \u2b50 1.8K) - Pythons nested data operator (and CLI), for all your declarative.. <code>BSD-3</code>  - [GitHub](https://github.com/mahmoud/glom) (\ud83d\udc68\u200d\ud83d\udcbb 23 \u00b7 \ud83d\udd00 60 \u00b7 \ud83d\udce6 1.6K \u00b7 \ud83d\udccb 190 - 59% open \u00b7 \u23f1\ufe0f 12.01.2024):      <pre><code>git clone https://github.com/mahmoud/glom\n</code></pre> - [PyPi](https://pypi.org/project/glom) (\ud83d\udce5 2.1M / month \u00b7 \ud83d\udce6 170 \u00b7 \u23f1\ufe0f 27.11.2023):     <pre><code>pip install glom\n</code></pre> - [Conda](https://anaconda.org/conda-forge/glom) (\ud83d\udce5 34K \u00b7 \u23f1\ufe0f 27.11.2023):     <pre><code>conda install -c conda-forge glom\n</code></pre> immutables (\ud83e\udd4927 \u00b7  \u2b50 1.1K \u00b7 \ud83d\udca4) - A high-performance immutable mapping type for Python. <code>Apache-2</code>  - [GitHub](https://github.com/MagicStack/immutables) (\ud83d\udc68\u200d\ud83d\udcbb 16 \u00b7 \ud83d\udd00 54 \u00b7 \ud83d\udce6 6.7K \u00b7 \ud83d\udccb 48 - 22% open \u00b7 \u23f1\ufe0f 15.08.2023):      <pre><code>git clone https://github.com/MagicStack/immutables\n</code></pre> - [PyPi](https://pypi.org/project/immutables) (\ud83d\udce5 1.2M / month \u00b7 \ud83d\udce6 130 \u00b7 \u23f1\ufe0f 14.08.2023):     <pre><code>pip install immutables\n</code></pre> - [Conda](https://anaconda.org/conda-forge/immutables) (\ud83d\udce5 1M \u00b7 \u23f1\ufe0f 25.09.2023):     <pre><code>conda install -c conda-forge immutables\n</code></pre> janus (\ud83e\udd4927 \u00b7  \u2b50 790) - Thread-safe asyncio-aware queue for Python. <code>Apache-2</code>  - [GitHub](https://github.com/aio-libs/janus) (\ud83d\udc68\u200d\ud83d\udcbb 26 \u00b7 \ud83d\udd00 45 \u00b7 \ud83d\udccb 42 - 21% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/aio-libs/janus\n</code></pre> - [PyPi](https://pypi.org/project/janus) (\ud83d\udce5 800K / month \u00b7 \ud83d\udce6 120 \u00b7 \u23f1\ufe0f 17.12.2021):     <pre><code>pip install janus\n</code></pre> - [Conda](https://anaconda.org/conda-forge/janus) (\ud83d\udce5 19K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge janus\n</code></pre> munch (\ud83e\udd4927 \u00b7  \u2b50 760 \u00b7 \ud83d\udca4) - A Munch is a Python dictionary that provides attribute-style access (a.. <code>MIT</code>  - [GitHub](https://github.com/Infinidat/munch) (\ud83d\udc68\u200d\ud83d\udcbb 27 \u00b7 \ud83d\udd00 84 \u00b7 \ud83d\udccb 49 - 18% open \u00b7 \u23f1\ufe0f 01.07.2023):      <pre><code>git clone https://github.com/Infinidat/munch\n</code></pre> - [PyPi](https://pypi.org/project/munch) (\ud83d\udce5 1.9M / month \u00b7 \ud83d\udce6 540 \u00b7 \u23f1\ufe0f 01.07.2023):     <pre><code>pip install munch\n</code></pre> - [Conda](https://anaconda.org/conda-forge/munch) (\ud83d\udce5 4M \u00b7 \u23f1\ufe0f 02.07.2023):     <pre><code>conda install -c conda-forge munch\n</code></pre> python-box (\ud83e\udd4925 \u00b7  \u2b50 2.4K \u00b7 \ud83d\udca4) - Python dictionaries with advanced dot notation access. <code>MIT</code>  - [GitHub](https://github.com/cdgriffith/Box) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 98 \u00b7 \ud83d\udce5 39 \u00b7 \ud83d\udccb 160 - 14% open \u00b7 \u23f1\ufe0f 26.08.2023):      <pre><code>git clone https://github.com/cdgriffith/Box\n</code></pre> - [PyPi](https://pypi.org/project/python-box) (\ud83d\udce5 3.1M / month \u00b7 \ud83d\udce6 410 \u00b7 \u23f1\ufe0f 26.08.2023):     <pre><code>pip install python-box\n</code></pre> - [Conda](https://anaconda.org/conda-forge/python-box) (\ud83d\udce5 560K \u00b7 \u23f1\ufe0f 01.10.2023):     <pre><code>conda install -c conda-forge python-box\n</code></pre> Show 4 hidden projects...  - addict (\ud83e\udd4829 \u00b7  \u2b50 2.4K \u00b7 \ud83d\udc80) - The Python Dict thats better than heroin. <code>MIT</code> - sqlitedict (\ud83e\udd4829 \u00b7  \u2b50 1.1K \u00b7 \ud83d\udc80) - Persistent dict, backed by sqlite3 and pickle, multithread-.. <code>Apache-2</code> - ordered-set (\ud83e\udd4928 \u00b7  \u2b50 210 \u00b7 \ud83d\udc80) - A mutable set that remembers the order of its entries. One of.. <code>MIT</code> - cleverdict (\ud83e\udd4915 \u00b7  \u2b50 99 \u00b7 \ud83d\udc80) - A JSON-friendly data structure which allows both object attributes.. <code>MIT</code>"},{"location":"blog/2024/09/30/best-of-python/#data-validation","title":"Data Validation","text":"pydantic (\ud83e\udd4746 \u00b7  \u2b50 19K) - Data validation using Python type hints. <code>MIT</code>  - [GitHub](https://github.com/pydantic/pydantic) (\ud83d\udc68\u200d\ud83d\udcbb 540 \u00b7 \ud83d\udd00 1.7K \u00b7 \ud83d\udce6 420K \u00b7 \ud83d\udccb 4.1K - 10% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/samuelcolvin/pydantic\n</code></pre> - [PyPi](https://pypi.org/project/pydantic) (\ud83d\udce5 200M / month \u00b7 \ud83d\udce6 19K \u00b7 \u23f1\ufe0f 03.06.2024):     <pre><code>pip install pydantic\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pydantic) (\ud83d\udce5 7.9M \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>conda install -c conda-forge pydantic\n</code></pre> jsonschema (\ud83e\udd4741 \u00b7  \u2b50 4.5K \u00b7 \ud83d\udcc8) - An implementation of the JSON Schema specification for Python. <code>MIT</code>  - [GitHub](https://github.com/python-jsonschema/jsonschema) (\ud83d\udc68\u200d\ud83d\udcbb 110 \u00b7 \ud83d\udd00 570 \u00b7 \ud83d\udce5 250 \u00b7 \ud83d\udce6 570K \u00b7 \ud83d\udccb 830 - 3% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/Julian/jsonschema\n</code></pre> - [PyPi](https://pypi.org/project/jsonschema) (\ud83d\udce5 120M / month \u00b7 \ud83d\udce6 6.2K \u00b7 \u23f1\ufe0f 30.04.2024):     <pre><code>pip install jsonschema\n</code></pre> - [Conda](https://anaconda.org/conda-forge/jsonschema) (\ud83d\udce5 28M \u00b7 \u23f1\ufe0f 01.05.2024):     <pre><code>conda install -c conda-forge jsonschema\n</code></pre> validators (\ud83e\udd4835 \u00b7  \u2b50 920) - Python Data Validation for Humans. <code>MIT</code>  - [GitHub](https://github.com/python-validators/validators) (\ud83d\udc68\u200d\ud83d\udcbb 54 \u00b7 \ud83d\udd00 150 \u00b7 \ud83d\udce5 40 \u00b7 \ud83d\udce6 120K \u00b7 \ud83d\udccb 170 - 0% open \u00b7 \u23f1\ufe0f 25.05.2024):      <pre><code>git clone https://github.com/kvesteri/validators\n</code></pre> - [PyPi](https://pypi.org/project/validators) (\ud83d\udce5 8.5M / month \u00b7 \ud83d\udce6 7.1K \u00b7 \u23f1\ufe0f 25.05.2024):     <pre><code>pip install validators\n</code></pre> - [Conda](https://anaconda.org/conda-forge/validators) (\ud83d\udce5 650K \u00b7 \u23f1\ufe0f 28.05.2024):     <pre><code>conda install -c conda-forge validators\n</code></pre> cerberus (\ud83e\udd4834 \u00b7  \u2b50 3.1K \u00b7 \ud83d\udca4) - Lightweight, extensible data validation library for Python. <code>ISC</code>  - [GitHub](https://github.com/pyeve/cerberus) (\ud83d\udc68\u200d\ud83d\udcbb 66 \u00b7 \ud83d\udd00 240 \u00b7 \ud83d\udce6 16K \u00b7 \ud83d\udccb 350 - 5% open \u00b7 \u23f1\ufe0f 23.10.2023):      <pre><code>git clone https://github.com/pyeve/cerberus\n</code></pre> - [PyPi](https://pypi.org/project/cerberus) (\ud83d\udce5 4.5M / month \u00b7 \ud83d\udce6 660 \u00b7 \u23f1\ufe0f 09.08.2023):     <pre><code>pip install cerberus\n</code></pre> - [Conda](https://anaconda.org/conda-forge/cerberus) (\ud83d\udce5 380K \u00b7 \u23f1\ufe0f 06.10.2023):     <pre><code>conda install -c conda-forge cerberus\n</code></pre> schema (\ud83e\udd4833 \u00b7  \u2b50 2.8K) - Schema validation just got Pythonic. <code>MIT</code>  - [GitHub](https://github.com/keleshev/schema) (\ud83d\udc68\u200d\ud83d\udcbb 69 \u00b7 \ud83d\udd00 210 \u00b7 \ud83d\udce6 9.4K \u00b7 \ud83d\udccb 180 - 53% open \u00b7 \u23f1\ufe0f 06.05.2024):      <pre><code>git clone https://github.com/keleshev/schema\n</code></pre> - [PyPi](https://pypi.org/project/schema) (\ud83d\udce5 18M / month \u00b7 \ud83d\udce6 740 \u00b7 \u23f1\ufe0f 04.05.2024):     <pre><code>pip install schema\n</code></pre> - [Conda](https://anaconda.org/conda-forge/schema) (\ud83d\udce5 170K \u00b7 \u23f1\ufe0f 04.05.2024):     <pre><code>conda install -c conda-forge schema\n</code></pre> voluptuous (\ud83e\udd4832 \u00b7  \u2b50 1.8K) - CONTRIBUTIONS ONLY: Voluptuous, despite the name, is a Python data.. <code>BSD-3</code>  - [GitHub](https://github.com/alecthomas/voluptuous) (\ud83d\udc68\u200d\ud83d\udcbb 96 \u00b7 \ud83d\udd00 210 \u00b7 \ud83d\udce6 16K \u00b7 \ud83d\udccb 250 - 16% open \u00b7 \u23f1\ufe0f 02.02.2024):      <pre><code>git clone https://github.com/alecthomas/voluptuous\n</code></pre> - [PyPi](https://pypi.org/project/voluptuous) (\ud83d\udce5 2.5M / month \u00b7 \ud83d\udce6 540 \u00b7 \u23f1\ufe0f 03.02.2024):     <pre><code>pip install voluptuous\n</code></pre> - [Conda](https://anaconda.org/conda-forge/voluptuous) (\ud83d\udce5 370K \u00b7 \u23f1\ufe0f 03.02.2024):     <pre><code>conda install -c conda-forge voluptuous\n</code></pre> python-email-validator (\ud83e\udd4930 \u00b7  \u2b50 1K) - A robust email syntax and deliverability validation.. <code>Unlicense</code>  - [GitHub](https://github.com/JoshData/python-email-validator) (\ud83d\udc68\u200d\ud83d\udcbb 24 \u00b7 \ud83d\udd00 150 \u00b7 \ud83d\udccb 98 - 11% open \u00b7 \u23f1\ufe0f 10.05.2024):      <pre><code>git clone https://github.com/JoshData/python-email-validator\n</code></pre> - [PyPi](https://pypi.org/project/email-validator) (\ud83d\udce5 22M / month \u00b7 \ud83d\udce6 690 \u00b7 \u23f1\ufe0f 26.02.2024):     <pre><code>pip install email-validator\n</code></pre> - [Conda](https://anaconda.org/conda-forge/email-validator) (\ud83d\udce5 210K \u00b7 \u23f1\ufe0f 27.02.2024):     <pre><code>conda install -c conda-forge email-validator\n</code></pre> param (\ud83e\udd4930 \u00b7  \u2b50 400) - Param: Make your Python code clearer and more reliable by declaring.. <code>BSD-3</code>  - [GitHub](https://github.com/holoviz/param) (\ud83d\udc68\u200d\ud83d\udcbb 37 \u00b7 \ud83d\udd00 68 \u00b7 \ud83d\udce6 11K \u00b7 \ud83d\udccb 460 - 35% open \u00b7 \u23f1\ufe0f 15.05.2024):      <pre><code>git clone https://github.com/holoviz/param\n</code></pre> - [PyPi](https://pypi.org/project/param) (\ud83d\udce5 600K / month \u00b7 \ud83d\udce6 150 \u00b7 \u23f1\ufe0f 02.05.2024):     <pre><code>pip install param\n</code></pre> - [Conda](https://anaconda.org/conda-forge/param) (\ud83d\udce5 1.6M \u00b7 \u23f1\ufe0f 22.03.2024):     <pre><code>conda install -c conda-forge param\n</code></pre> dirty-equals (\ud83e\udd4921 \u00b7  \u2b50 780 \u00b7 \ud83d\udca4) - Doing dirty (but extremely useful) things with equals. <code>MIT</code>  - [GitHub](https://github.com/samuelcolvin/dirty-equals) (\ud83d\udc68\u200d\ud83d\udcbb 16 \u00b7 \ud83d\udd00 35 \u00b7 \ud83d\udce6 330 \u00b7 \ud83d\udccb 34 - 44% open \u00b7 \u23f1\ufe0f 15.11.2023):      <pre><code>git clone https://github.com/samuelcolvin/dirty-equals\n</code></pre> - [PyPi](https://pypi.org/project/dirty-equals) (\ud83d\udce5 140K / month \u00b7 \ud83d\udce6 31 \u00b7 \u23f1\ufe0f 15.11.2023):     <pre><code>pip install dirty-equals\n</code></pre> - [Conda](https://anaconda.org/conda-forge/dirty-equals) (\ud83d\udce5 48K \u00b7 \u23f1\ufe0f 15.11.2023):     <pre><code>conda install -c conda-forge dirty-equals\n</code></pre> validr (\ud83e\udd4917 \u00b7  \u2b50 210) - A simple, fast, extensible python library for data validation. <code>MIT</code>  - [GitHub](https://github.com/guyskk/validr) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 12 \u00b7 \ud83d\udccb 25 - 12% open \u00b7 \u23f1\ufe0f 23.12.2023):      <pre><code>git clone https://github.com/guyskk/validr\n</code></pre> - [PyPi](https://pypi.org/project/validr) (\ud83d\udce5 620 / month \u00b7 \ud83d\udce6 6 \u00b7 \u23f1\ufe0f 13.12.2023):     <pre><code>pip install validr\n</code></pre> Show 5 hidden projects...  - schematics (\ud83e\udd4930 \u00b7  \u2b50 2.6K \u00b7 \ud83d\udc80) - Python Data Structures for Humans. <code>BSD-3</code> - strictyaml (\ud83e\udd4927 \u00b7  \u2b50 1.4K \u00b7 \ud83d\udc80) - Type-safe YAML parser and validator. <code>MIT</code> - valideer (\ud83e\udd4919 \u00b7  \u2b50 260 \u00b7 \ud83d\udc80) - Lightweight data validation and adaptation Python library. <code>MIT</code> - typical (\ud83e\udd4919 \u00b7  \u2b50 180 \u00b7 \ud83d\udc80) - Typical: Fast, simple, &amp; correct data-validation using Python 3 typing. <code>MIT</code> - dataklasses (\ud83e\udd497 \u00b7  \u2b50 780 \u00b7 \ud83d\udc80) - A different spin on dataclasses. <code>\u2757Unlicensed</code>"},{"location":"blog/2024/09/30/best-of-python/#algorithms-design-patterns","title":"Algorithms &amp; Design Patterns","text":"<p>\ud83d\udd17\u00a0python-patterns ( \u2b50 40K)  - Collection of design patterns/idioms in Python.</p> transitions (\ud83e\udd4734 \u00b7  \u2b50 5.4K) - A lightweight, object-oriented finite state machine implementation.. <code>MIT</code>  - [GitHub](https://github.com/pytransitions/transitions) (\ud83d\udc68\u200d\ud83d\udcbb 78 \u00b7 \ud83d\udd00 520 \u00b7 \ud83d\udce6 3.5K \u00b7 \ud83d\udccb 460 - 3% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/pytransitions/transitions\n</code></pre> - [PyPi](https://pypi.org/project/transitions) (\ud83d\udce5 600K / month \u00b7 \ud83d\udce6 170 \u00b7 \u23f1\ufe0f 14.05.2024):     <pre><code>pip install transitions\n</code></pre> - [Conda](https://anaconda.org/conda-forge/transitions) (\ud83d\udce5 660K \u00b7 \u23f1\ufe0f 14.05.2024):     <pre><code>conda install -c conda-forge transitions\n</code></pre> algorithms (\ud83e\udd4929 \u00b7  \u2b50 24K) - Minimal examples of data structures and algorithms in Python. <code>MIT</code>  - [GitHub](https://github.com/keon/algorithms) (\ud83d\udc68\u200d\ud83d\udcbb 200 \u00b7 \ud83d\udd00 4.6K \u00b7 \ud83d\udce6 110 \u00b7 \ud83d\udccb 300 - 66% open \u00b7 \u23f1\ufe0f 05.02.2024):      <pre><code>git clone https://github.com/keon/algorithms\n</code></pre> - [PyPi](https://pypi.org/project/algorithms) (\ud83d\udce5 1.5K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 04.10.2020):     <pre><code>pip install algorithms\n</code></pre> - [Conda](https://anaconda.org/conda-forge/algorithms) (\ud83d\udce5 2.2K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge algorithms\n</code></pre> PyPattyrn (\ud83e\udd4921 \u00b7  \u2b50 2.2K) - A simple library for implementing common design patterns. <code>MIT</code>  - [GitHub](https://github.com/tylerlaberge/PyPattyrn) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 150 \u00b7 \ud83d\udce6 49 \u00b7 \ud83d\udccb 42 - 2% open \u00b7 \u23f1\ufe0f 26.05.2024):      <pre><code>git clone https://github.com/tylerlaberge/PyPattyrn\n</code></pre> - [PyPi](https://pypi.org/project/pypattyrn) (\ud83d\udce5 1.4K / month \u00b7 \ud83d\udce6 14 \u00b7 \u23f1\ufe0f 11.09.2016):     <pre><code>pip install pypattyrn\n</code></pre> <p></p>"},{"location":"blog/2024/09/30/best-of-python/#date-time-utilities","title":"Date &amp; Time Utilities","text":"arrow (\ud83e\udd4739 \u00b7  \u2b50 8.6K \u00b7 \ud83d\udca4) - Better dates &amp; times for Python. <code>Apache-2</code>  - [GitHub](https://github.com/arrow-py/arrow) (\ud83d\udc68\u200d\ud83d\udcbb 270 \u00b7 \ud83d\udd00 660 \u00b7 \ud83d\udce6 110K \u00b7 \ud83d\udccb 500 - 20% open \u00b7 \u23f1\ufe0f 30.09.2023):      <pre><code>git clone https://github.com/arrow-py/arrow\n</code></pre> - [PyPi](https://pypi.org/project/arrow) (\ud83d\udce5 30M / month \u00b7 \ud83d\udce6 1.9K \u00b7 \u23f1\ufe0f 30.09.2023):     <pre><code>pip install arrow\n</code></pre> - [Conda](https://anaconda.org/conda-forge/arrow) (\ud83d\udce5 4.9M \u00b7 \u23f1\ufe0f 01.10.2023):     <pre><code>conda install -c conda-forge arrow\n</code></pre> pendulum (\ud83e\udd4835 \u00b7  \u2b50 6.1K) - Python datetimes made easy. <code>MIT</code>  - [GitHub](https://github.com/sdispater/pendulum) (\ud83d\udc68\u200d\ud83d\udcbb 96 \u00b7 \ud83d\udd00 360 \u00b7 \ud83d\udce5 650 \u00b7 \ud83d\udce6 28K \u00b7 \ud83d\udccb 560 - 42% open \u00b7 \u23f1\ufe0f 16.12.2023):      <pre><code>git clone https://github.com/sdispater/pendulum\n</code></pre> - [PyPi](https://pypi.org/project/pendulum) (\ud83d\udce5 48M / month \u00b7 \ud83d\udce6 1.2K \u00b7 \u23f1\ufe0f 16.12.2023):     <pre><code>pip install pendulum\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pendulum) (\ud83d\udce5 1M \u00b7 \u23f1\ufe0f 07.01.2024):     <pre><code>conda install -c conda-forge pendulum\n</code></pre> python-dateutil (\ud83e\udd4835 \u00b7  \u2b50 2.3K) - Useful extensions to the standard Python datetime features. <code>Apache-2</code>  - [GitHub](https://github.com/dateutil/dateutil) (\ud83d\udc68\u200d\ud83d\udcbb 130 \u00b7 \ud83d\udd00 480 \u00b7 \ud83d\udce5 35K \u00b7 \ud83d\udccb 790 - 45% open \u00b7 \u23f1\ufe0f 20.05.2024):      <pre><code>git clone https://github.com/dateutil/dateutil\n</code></pre> - [PyPi](https://pypi.org/project/python-dateutil) (\ud83d\udce5 360M / month \u00b7 \ud83d\udce6 10K \u00b7 \u23f1\ufe0f 01.03.2024):     <pre><code>pip install python-dateutil\n</code></pre> - [Conda](https://anaconda.org/conda-forge/python-dateutil) (\ud83d\udce5 58M \u00b7 \u23f1\ufe0f 01.03.2024):     <pre><code>conda install -c conda-forge python-dateutil\n</code></pre> dateparser (\ud83e\udd4834 \u00b7  \u2b50 2.5K) - python parser for human readable dates. <code>BSD-3</code>  - [GitHub](https://github.com/scrapinghub/dateparser) (\ud83d\udc68\u200d\ud83d\udcbb 140 \u00b7 \ud83d\udd00 470 \u00b7 \ud83d\udce6 28K \u00b7 \ud83d\udccb 700 - 46% open \u00b7 \u23f1\ufe0f 08.04.2024):      <pre><code>git clone https://github.com/scrapinghub/dateparser\n</code></pre> - [PyPi](https://pypi.org/project/dateparser) (\ud83d\udce5 7.2M / month \u00b7 \ud83d\udce6 1K \u00b7 \u23f1\ufe0f 17.11.2023):     <pre><code>pip install dateparser\n</code></pre> - [Conda](https://anaconda.org/conda-forge/dateparser) (\ud83d\udce5 220K \u00b7 \u23f1\ufe0f 17.11.2023):     <pre><code>conda install -c conda-forge dateparser\n</code></pre> pytz (\ud83e\udd4834 \u00b7  \u2b50 320) - pytz Python historical timezone library and database. <code>MIT</code>  - [GitHub](https://github.com/stub42/pytz) (\ud83d\udc68\u200d\ud83d\udcbb 21 \u00b7 \ud83d\udd00 86 \u00b7 \ud83d\udce5 59 \u00b7 \ud83d\udce6 2M \u00b7 \ud83d\udccb 88 - 37% open \u00b7 \u23f1\ufe0f 02.02.2024):      <pre><code>git clone https://github.com/stub42/pytz\n</code></pre> - [PyPi](https://pypi.org/project/pytz) (\ud83d\udce5 180M / month \u00b7 \ud83d\udce6 11K \u00b7 \u23f1\ufe0f 02.02.2024):     <pre><code>pip install pytz\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pytz) (\ud83d\udce5 54M \u00b7 \u23f1\ufe0f 02.02.2024):     <pre><code>conda install -c conda-forge pytz\n</code></pre> holidays (\ud83e\udd4931 \u00b7  \u2b50 1.4K) - Generate and work with holidays in Python. <code>MIT</code>  - [GitHub](https://github.com/dr-prodigy/python-holidays) (\ud83d\udc68\u200d\ud83d\udcbb 230 \u00b7 \ud83d\udd00 440 \u00b7 \u23f1\ufe0f 12.04.2024):      <pre><code>git clone https://github.com/dr-prodigy/python-holidays\n</code></pre> - [PyPi](https://pypi.org/project/holidays) (\ud83d\udce5 7.4M / month \u00b7 \ud83d\udce6 320 \u00b7 \u23f1\ufe0f 03.06.2024):     <pre><code>pip install holidays\n</code></pre> - [Conda](https://anaconda.org/conda-forge/holidays) (\ud83d\udce5 3.9M \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>conda install -c conda-forge holidays\n</code></pre> tzlocal (\ud83e\udd4931 \u00b7  \u2b50 180) - A Python module that tries to figure out what your local timezone is. <code>MIT</code>  - [GitHub](https://github.com/regebro/tzlocal) (\ud83d\udc68\u200d\ud83d\udcbb 31 \u00b7 \ud83d\udd00 59 \u00b7 \ud83d\udce6 170K \u00b7 \ud83d\udccb 84 - 3% open \u00b7 \u23f1\ufe0f 08.12.2023):      <pre><code>git clone https://github.com/regebro/tzlocal\n</code></pre> - [PyPi](https://pypi.org/project/tzlocal) (\ud83d\udce5 47M / month \u00b7 \ud83d\udce6 1.6K \u00b7 \u23f1\ufe0f 22.10.2023):     <pre><code>pip install tzlocal\n</code></pre> - [Conda](https://anaconda.org/conda-forge/tzlocal) (\ud83d\udce5 2.7M \u00b7 \u23f1\ufe0f 22.10.2023):     <pre><code>conda install -c conda-forge tzlocal\n</code></pre> Show 2 hidden projects...  - parsedatetime (\ud83e\udd4929 \u00b7  \u2b50 690 \u00b7 \ud83d\udc80) - Parse human-readable date/time strings. <code>Apache-2</code> - isodate (\ud83e\udd4929 \u00b7  \u2b50 140 \u00b7 \ud83d\udc80) - ISO 8601 date/time parser. <code>BSD-3</code>"},{"location":"blog/2024/09/30/best-of-python/#file-path-utilities","title":"File &amp; Path Utilities","text":"filesystem_spec (\ud83e\udd4740 \u00b7  \u2b50 920) - A specification that python filesystems should adhere to. <code>BSD-3</code>  - [GitHub](https://github.com/fsspec/filesystem_spec) (\ud83d\udc68\u200d\ud83d\udcbb 240 \u00b7 \ud83d\udd00 340 \u00b7 \ud83d\udce6 130K \u00b7 \ud83d\udccb 690 - 37% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/fsspec/filesystem_spec\n</code></pre> - [PyPi](https://pypi.org/project/fsspec) (\ud83d\udce5 260M / month \u00b7 \ud83d\udce6 1.6K \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>pip install fsspec\n</code></pre> - [Conda](https://anaconda.org/conda-forge/fsspec) (\ud83d\udce5 17M \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>conda install -c conda-forge fsspec\n</code></pre> watchdog (\ud83e\udd4836 \u00b7  \u2b50 6.3K) - Python library and shell utilities to monitor filesystem events. <code>Apache-2</code>  - [GitHub](https://github.com/gorakhargosh/watchdog) (\ud83d\udc68\u200d\ud83d\udcbb 150 \u00b7 \ud83d\udd00 680 \u00b7 \ud83d\udce6 150K \u00b7 \ud83d\udccb 650 - 29% open \u00b7 \u23f1\ufe0f 23.05.2024):      <pre><code>git clone https://github.com/gorakhargosh/watchdog\n</code></pre> - [PyPi](https://pypi.org/project/watchdog) (\ud83d\udce5 22M / month \u00b7 \ud83d\udce6 2.4K \u00b7 \u23f1\ufe0f 23.05.2024):     <pre><code>pip install watchdog\n</code></pre> - [Conda](https://anaconda.org/conda-forge/watchdog) (\ud83d\udce5 3M \u00b7 \u23f1\ufe0f 24.05.2024):     <pre><code>conda install -c conda-forge watchdog\n</code></pre> filelock (\ud83e\udd4835 \u00b7  \u2b50 700) - A platform-independent file lock for Python. <code>Unlicense</code>  - [GitHub](https://github.com/tox-dev/filelock) (\ud83d\udc68\u200d\ud83d\udcbb 46 \u00b7 \ud83d\udd00 100 \u00b7 \ud83d\udce6 450K \u00b7 \ud83d\udccb 110 - 13% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/tox-dev/py-filelock\n</code></pre> - [PyPi](https://pypi.org/project/filelock) (\ud83d\udce5 140M / month \u00b7 \ud83d\udce6 2.1K \u00b7 \u23f1\ufe0f 29.04.2024):     <pre><code>pip install filelock\n</code></pre> - [Conda](https://anaconda.org/conda-forge/filelock) (\ud83d\udce5 18M \u00b7 \u23f1\ufe0f 29.04.2024):     <pre><code>conda install -c conda-forge filelock\n</code></pre> aiofiles (\ud83e\udd4933 \u00b7  \u2b50 2.6K) - File support for asyncio. <code>Apache-2</code>  - [GitHub](https://github.com/Tinche/aiofiles) (\ud83d\udc68\u200d\ud83d\udcbb 36 \u00b7 \ud83d\udd00 150 \u00b7 \ud83d\udce6 150K \u00b7 \ud83d\udccb 120 - 42% open \u00b7 \u23f1\ufe0f 06.02.2024):      <pre><code>git clone https://github.com/Tinche/aiofiles\n</code></pre> - [PyPi](https://pypi.org/project/aiofiles) (\ud83d\udce5 19M / month \u00b7 \ud83d\udce6 2.5K \u00b7 \u23f1\ufe0f 09.08.2023):     <pre><code>pip install aiofiles\n</code></pre> - [Conda](https://anaconda.org/conda-forge/aiofiles) (\ud83d\udce5 1.1M \u00b7 \u23f1\ufe0f 02.11.2023):     <pre><code>conda install -c conda-forge aiofiles\n</code></pre> path (\ud83e\udd4933 \u00b7  \u2b50 1.1K) - Object-oriented file system path manipulation. <code>MIT</code>  - [GitHub](https://github.com/jaraco/path) (\ud83d\udc68\u200d\ud83d\udcbb 54 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce6 15K \u00b7 \ud83d\udccb 140 - 2% open \u00b7 \u23f1\ufe0f 27.05.2024):      <pre><code>git clone https://github.com/jaraco/path\n</code></pre> - [PyPi](https://pypi.org/project/path) (\ud83d\udce5 1.4M / month \u00b7 \ud83d\udce6 200 \u00b7 \u23f1\ufe0f 09.04.2024):     <pre><code>pip install path\n</code></pre> - [Conda](https://anaconda.org/conda-forge/path) (\ud83d\udce5 550K \u00b7 \u23f1\ufe0f 15.04.2024):     <pre><code>conda install -c conda-forge path\n</code></pre> scandir (\ud83e\udd4928 \u00b7  \u2b50 530 \u00b7 \ud83d\udca4) - Better directory iterator and faster os.walk(), now in the Python.. <code>BSD-3</code>  - [GitHub](https://github.com/benhoyt/scandir) (\ud83d\udc68\u200d\ud83d\udcbb 23 \u00b7 \ud83d\udd00 69 \u00b7 \ud83d\udce6 15K \u00b7 \ud83d\udccb 96 - 6% open \u00b7 \u23f1\ufe0f 29.08.2023):      <pre><code>git clone https://github.com/benhoyt/scandir\n</code></pre> - [PyPi](https://pypi.org/project/scandir) (\ud83d\udce5 3.2M / month \u00b7 \ud83d\udce6 210 \u00b7 \u23f1\ufe0f 09.03.2019):     <pre><code>pip install scandir\n</code></pre> - [Conda](https://anaconda.org/conda-forge/scandir) (\ud83d\udce5 1.4M \u00b7 \u23f1\ufe0f 23.09.2023):     <pre><code>conda install -c conda-forge scandir\n</code></pre> Show 4 hidden projects...  - zipp (\ud83e\udd4836 \u00b7  \u2b50 52 \u00b7 \ud83d\udcc8) - Backport of pathlib-compatible object wrapper for zip files. <code>MIT</code> - appdirs (\ud83e\udd4931 \u00b7  \u2b50 1K \u00b7 \ud83d\udc80) - A small Python module for determining appropriate platform-specific.. <code>MIT</code> - pyfilesystem2 (\ud83e\udd4930 \u00b7  \u2b50 2K \u00b7 \ud83d\udc80) - Pythons Filesystem abstraction layer. <code>MIT</code> - Unipath (\ud83e\udd4922 \u00b7  \u2b50 520 \u00b7 \ud83d\udc80) - An object-oriented approach to Python file/directory operations. <code>MIT</code>"},{"location":"blog/2024/09/30/best-of-python/#compatiblity","title":"Compatiblity","text":"future (\ud83e\udd4738 \u00b7  \u2b50 1.2K) - Easy, clean, reliable Python 2/3 compatibility. <code>MIT</code>  - [GitHub](https://github.com/PythonCharmers/python-future) (\ud83d\udc68\u200d\ud83d\udcbb 130 \u00b7 \ud83d\udd00 280 \u00b7 \ud83d\udce6 330K \u00b7 \ud83d\udccb 400 - 46% open \u00b7 \u23f1\ufe0f 21.02.2024):      <pre><code>git clone https://github.com/PythonCharmers/python-future\n</code></pre> - [PyPi](https://pypi.org/project/future) (\ud83d\udce5 41M / month \u00b7 \ud83d\udce6 5.5K \u00b7 \u23f1\ufe0f 21.02.2024):     <pre><code>pip install future\n</code></pre> - [Conda](https://anaconda.org/conda-forge/future) (\ud83d\udce5 13M \u00b7 \u23f1\ufe0f 22.02.2024):     <pre><code>conda install -c conda-forge future\n</code></pre> six (\ud83e\udd4837 \u00b7  \u2b50 970) - Python 2 and 3 compatibility library. <code>MIT</code>  - [GitHub](https://github.com/benjaminp/six) (\ud83d\udc68\u200d\ud83d\udcbb 67 \u00b7 \ud83d\udd00 270 \u00b7 \ud83d\udce6 2.2M \u00b7 \ud83d\udccb 300 - 37% open \u00b7 \u23f1\ufe0f 27.03.2024):      <pre><code>git clone https://github.com/benjaminp/six\n</code></pre> - [PyPi](https://pypi.org/project/six) (\ud83d\udce5 320M / month \u00b7 \ud83d\udce6 24K \u00b7 \u23f1\ufe0f 05.05.2021):     <pre><code>pip install six\n</code></pre> - [Conda](https://anaconda.org/conda-forge/six) (\ud83d\udce5 56M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge six\n</code></pre> typing (\ud83e\udd4834 \u00b7  \u2b50 1.6K) - Python static typing home. Hosts the documentation and a user help.. <code>Python-2.0</code>  - [GitHub](https://github.com/python/typing) (\ud83d\udc68\u200d\ud83d\udcbb 100 \u00b7 \ud83d\udd00 220 \u00b7 \ud83d\udccb 800 - 19% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/python/typing\n</code></pre> - [PyPi](https://pypi.org/project/typing) (\ud83d\udce5 9.1M / month \u00b7 \ud83d\udce6 3.1K \u00b7 \u23f1\ufe0f 01.05.2021):     <pre><code>pip install typing\n</code></pre> - [Conda](https://anaconda.org/conda-forge/typing) (\ud83d\udce5 3M \u00b7 \u23f1\ufe0f 17.05.2024):     <pre><code>conda install -c conda-forge typing\n</code></pre> Show 4 hidden projects...  - contextlib2 (\ud83e\udd4928 \u00b7  \u2b50 38) - contextlib2 is a backport of the standard librarys contextlib.. <code>\u2757\ufe0fpsfrag</code> - dataclasses (\ud83e\udd4927 \u00b7  \u2b50 580 \u00b7 \ud83d\udc80) - A backport of the dataclasses module for Python 3.6. <code>Apache-2</code> - futures (\ud83e\udd4927 \u00b7  \u2b50 230 \u00b7 \ud83d\udc80) - Backport of the concurrent.futures package to Python 2.6 and 2.7. <code>Python-2.0</code> - pathlib2 (\ud83e\udd4927 \u00b7  \u2b50 81 \u00b7 \ud83d\udca4) - Backport of pathlib aiming to support the full stdlib Python API. <code>MIT</code>"},{"location":"blog/2024/09/30/best-of-python/#cryptography","title":"Cryptography","text":"cryptography (\ud83e\udd4747 \u00b7  \u2b50 6.4K) - cryptography is a package designed to expose cryptographic.. <code>Apache-2</code>  - [GitHub](https://github.com/pyca/cryptography) (\ud83d\udc68\u200d\ud83d\udcbb 320 \u00b7 \ud83d\udd00 1.5K \u00b7 \ud83d\udce6 680K \u00b7 \ud83d\udccb 2.5K - 1% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/pyca/cryptography\n</code></pre> - [PyPi](https://pypi.org/project/cryptography) (\ud83d\udce5 270M / month \u00b7 \ud83d\udce6 8.8K \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>pip install cryptography\n</code></pre> - [Conda](https://anaconda.org/conda-forge/cryptography) (\ud83d\udce5 48M \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>conda install -c conda-forge cryptography\n</code></pre> pycryptodomex (\ud83e\udd4839 \u00b7  \u2b50 2.7K) - A self-contained cryptographic library for Python. <code>BSD-3</code>  - [GitHub](https://github.com/Legrandin/pycryptodome) (\ud83d\udc68\u200d\ud83d\udcbb 150 \u00b7 \ud83d\udd00 480 \u00b7 \ud83d\udce5 540 \u00b7 \ud83d\udce6 98K \u00b7 \ud83d\udccb 580 - 10% open \u00b7 \u23f1\ufe0f 12.05.2024):      <pre><code>git clone https://github.com/Legrandin/pycryptodome\n</code></pre> - [PyPi](https://pypi.org/project/pycryptodomex) (\ud83d\udce5 36M / month \u00b7 \ud83d\udce6 1.3K \u00b7 \u23f1\ufe0f 10.01.2024):     <pre><code>pip install pycryptodomex\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pycryptodomex) (\ud83d\udce5 1.7M \u00b7 \u23f1\ufe0f 23.09.2023):     <pre><code>conda install -c conda-forge pycryptodomex\n</code></pre> keyring (\ud83e\udd4839 \u00b7  \u2b50 1.2K) - Store and access your passwords safely. <code>MIT</code>  - [GitHub](https://github.com/jaraco/keyring) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 150 \u00b7 \ud83d\udce6 120K \u00b7 \ud83d\udccb 520 - 12% open \u00b7 \u23f1\ufe0f 13.05.2024):      <pre><code>git clone https://github.com/jaraco/keyring\n</code></pre> - [PyPi](https://pypi.org/project/keyring) (\ud83d\udce5 54M / month \u00b7 \ud83d\udce6 2.9K \u00b7 \u23f1\ufe0f 13.05.2024):     <pre><code>pip install keyring\n</code></pre> - [Conda](https://anaconda.org/conda-forge/keyring) (\ud83d\udce5 4.8M \u00b7 \u23f1\ufe0f 14.05.2024):     <pre><code>conda install -c conda-forge keyring\n</code></pre> bcrypt (\ud83e\udd4938 \u00b7  \u2b50 1.2K) - Modern(-ish) password hashing for your software and your servers. <code>Apache-2</code>  - [GitHub](https://github.com/pyca/bcrypt) (\ud83d\udc68\u200d\ud83d\udcbb 32 \u00b7 \ud83d\udd00 150 \u00b7 \ud83d\udce6 230K \u00b7 \ud83d\udccb 140 - 5% open \u00b7 \u23f1\ufe0f 03.06.2024):      <pre><code>git clone https://github.com/pyca/bcrypt\n</code></pre> - [PyPi](https://pypi.org/project/bcrypt) (\ud83d\udce5 61M / month \u00b7 \ud83d\udce6 1.3K \u00b7 \u23f1\ufe0f 04.05.2024):     <pre><code>pip install bcrypt\n</code></pre> - [Conda](https://anaconda.org/conda-forge/bcrypt) (\ud83d\udce5 5M \u00b7 \u23f1\ufe0f 17.05.2024):     <pre><code>conda install -c conda-forge bcrypt\n</code></pre> tink (\ud83e\udd4937 \u00b7  \u2b50 13K) - Tink is a multi-language, cross-platform, open source library that.. <code>Apache-2</code>  - [GitHub](https://github.com/tink-crypto/tink) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 1.2K \u00b7 \ud83d\udce5 1.1K \u00b7 \ud83d\udce6 1.1K \u00b7 \u23f1\ufe0f 17.04.2024):      <pre><code>git clone https://github.com/google/tink\n</code></pre> - [PyPi](https://pypi.org/project/tink) (\ud83d\udce5 420K / month \u00b7 \ud83d\udce6 8 \u00b7 \u23f1\ufe0f 02.05.2024):     <pre><code>pip install tink\n</code></pre> - [npm](https://www.npmjs.com/package/tink-crypto) (\ud83d\udce5 270 / month \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 02.05.2023):     <pre><code>npm install tink-crypto\n</code></pre> asn1crypto (\ud83e\udd4933 \u00b7  \u2b50 320 \u00b7 \ud83d\udca4) - Python ASN.1 library with a focus on performance and a pythonic API. <code>MIT</code>  - [GitHub](https://github.com/wbond/asn1crypto) (\ud83d\udc68\u200d\ud83d\udcbb 39 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce6 110K \u00b7 \ud83d\udccb 190 - 25% open \u00b7 \u23f1\ufe0f 03.11.2023):      <pre><code>git clone https://github.com/wbond/asn1crypto\n</code></pre> - [PyPi](https://pypi.org/project/asn1crypto) (\ud83d\udce5 82M / month \u00b7 \ud83d\udce6 590 \u00b7 \u23f1\ufe0f 15.03.2022):     <pre><code>pip install asn1crypto\n</code></pre> - [Conda](https://anaconda.org/conda-forge/asn1crypto) (\ud83d\udce5 8.5M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge asn1crypto\n</code></pre> rsa (\ud83e\udd4929 \u00b7  \u2b50 470) - Python-RSA is a pure-Python RSA implementation. <code>Apache-2</code>  - [GitHub](https://github.com/sybrenstuvel/python-rsa) (\ud83d\udc68\u200d\ud83d\udcbb 43 \u00b7 \ud83d\udd00 100 \u00b7 \ud83d\udccb 130 - 15% open \u00b7 \u23f1\ufe0f 30.01.2024):      <pre><code>git clone https://github.com/sybrenstuvel/python-rsa\n</code></pre> - [PyPi](https://pypi.org/project/rsa) (\ud83d\udce5 200M / month \u00b7 \ud83d\udce6 1.4K \u00b7 \u23f1\ufe0f 20.07.2022):     <pre><code>pip install rsa\n</code></pre> - [Conda](https://anaconda.org/conda-forge/rsa) (\ud83d\udce5 14M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge rsa\n</code></pre>"},{"location":"blog/2024/09/30/best-of-python/#infrastructure-devops","title":"Infrastructure &amp; DevOps","text":"ansible (\ud83e\udd4748 \u00b7  \u2b50 62K) - Ansible is a radically simple IT automation platform that makes your.. <code>\u2757\ufe0fGPL-3.0</code>  - [GitHub](https://github.com/ansible/ansible) (\ud83d\udc68\u200d\ud83d\udcbb 6.8K \u00b7 \ud83d\udd00 24K \u00b7 \ud83d\udce6 34K \u00b7 \ud83d\udccb 33K - 2% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/ansible/ansible\n</code></pre> - [PyPi](https://pypi.org/project/ansible) (\ud83d\udce5 5.1M / month \u00b7 \ud83d\udce6 460 \u00b7 \u23f1\ufe0f 06.06.2024):     <pre><code>pip install ansible\n</code></pre> - [Conda](https://anaconda.org/conda-forge/ansible) (\ud83d\udce5 1.1M \u00b7 \u23f1\ufe0f 06.06.2024):     <pre><code>conda install -c conda-forge ansible\n</code></pre> botocore (\ud83e\udd4744 \u00b7  \u2b50 1.4K) - The low-level, core functionality of boto3 and the AWS CLI. <code>Apache-2</code>  - [GitHub](https://github.com/boto/botocore) (\ud83d\udc68\u200d\ud83d\udcbb 200 \u00b7 \ud83d\udd00 1.1K \u00b7 \ud83d\udce6 330K \u00b7 \ud83d\udccb 1.1K - 13% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/boto/botocore\n</code></pre> - [PyPi](https://pypi.org/project/botocore) (\ud83d\udce5 640M / month \u00b7 \ud83d\udce6 2.6K \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>pip install botocore\n</code></pre> - [Conda](https://anaconda.org/conda-forge/botocore) (\ud83d\udce5 27M \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>conda install -c conda-forge botocore\n</code></pre> pulumi (\ud83e\udd4843 \u00b7  \u2b50 20K) - Pulumi - Infrastructure as Code in any programming language. <code>Apache-2</code>  - [GitHub](https://github.com/pulumi/pulumi) (\ud83d\udc68\u200d\ud83d\udcbb 270 \u00b7 \ud83d\udd00 1.1K \u00b7 \ud83d\udce5 3.4M \u00b7 \ud83d\udce6 7.9K \u00b7 \ud83d\udccb 7.3K - 29% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/pulumi/pulumi\n</code></pre> - [PyPi](https://pypi.org/project/pulumi) (\ud83d\udce5 940K / month \u00b7 \ud83d\udce6 260 \u00b7 \u23f1\ufe0f 06.06.2024):     <pre><code>pip install pulumi\n</code></pre> - [npm](https://www.npmjs.com/package/@pulumi/pulumi) (\ud83d\udce5 2.7M / month \u00b7 \ud83d\udce6 930 \u00b7 \u23f1\ufe0f 31.05.2024):     <pre><code>npm install @pulumi/pulumi\n</code></pre> awscli (\ud83e\udd4843 \u00b7  \u2b50 15K) - Universal Command Line Interface for Amazon Web Services. <code>Apache-2</code>  - [GitHub](https://github.com/aws/aws-cli) (\ud83d\udc68\u200d\ud83d\udcbb 440 \u00b7 \ud83d\udd00 4K \u00b7 \ud83d\udce5 1.7K \u00b7 \ud83d\udce6 5 \u00b7 \ud83d\udccb 4.6K - 11% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/aws/aws-cli\n</code></pre> - [PyPi](https://pypi.org/project/awscli) (\ud83d\udce5 140M / month \u00b7 \ud83d\udce6 620 \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>pip install awscli\n</code></pre> - [Conda](https://anaconda.org/conda-forge/awscli) (\ud83d\udce5 24M \u00b7 \u23f1\ufe0f 06.06.2024):     <pre><code>conda install -c conda-forge awscli\n</code></pre> docker (\ud83e\udd4843 \u00b7  \u2b50 6.7K) - A Python library for the Docker Engine API. <code>Apache-2</code>  - [GitHub](https://github.com/docker/docker-py) (\ud83d\udc68\u200d\ud83d\udcbb 450 \u00b7 \ud83d\udd00 1.7K \u00b7 \ud83d\udce5 980 \u00b7 \ud83d\udce6 82K \u00b7 \ud83d\udccb 1.7K - 27% open \u00b7 \u23f1\ufe0f 23.05.2024):      <pre><code>git clone https://github.com/docker/docker-py\n</code></pre> - [PyPi](https://pypi.org/project/docker) (\ud83d\udce5 44M / month \u00b7 \ud83d\udce6 3.1K \u00b7 \u23f1\ufe0f 23.05.2024):     <pre><code>pip install docker\n</code></pre> - [Conda](https://anaconda.org/conda-forge/docker-py) (\ud83d\udce5 4.3M \u00b7 \u23f1\ufe0f 24.05.2024):     <pre><code>conda install -c conda-forge docker-py\n</code></pre> docker-compose (\ud83e\udd4840 \u00b7  \u2b50 33K) - Define and run multi-container applications with Docker. <code>Apache-2</code>  - [GitHub](https://github.com/docker/compose) (\ud83d\udc68\u200d\ud83d\udcbb 540 \u00b7 \ud83d\udd00 5.1K \u00b7 \ud83d\udce5 98M \u00b7 \ud83d\udce6 560 \u00b7 \ud83d\udccb 7.5K - 3% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/docker/compose\n</code></pre> - [PyPi](https://pypi.org/project/docker-compose) (\ud83d\udce5 1.9M / month \u00b7 \ud83d\udce6 250 \u00b7 \u23f1\ufe0f 10.05.2021):     <pre><code>pip install docker-compose\n</code></pre> - [Conda](https://anaconda.org/conda-forge/docker-compose) (\ud83d\udce5 420K \u00b7 \u23f1\ufe0f 24.05.2024):     <pre><code>conda install -c conda-forge docker-compose\n</code></pre> paramiko (\ud83e\udd4840 \u00b7  \u2b50 8.9K \u00b7 \ud83d\udcc9) - The leading native Python SSHv2 protocol library. <code>\u2757\ufe0fLGPL-2.1</code>  - [GitHub](https://github.com/paramiko/paramiko) (\ud83d\udc68\u200d\ud83d\udcbb 190 \u00b7 \ud83d\udd00 2K \u00b7 \ud83d\udce6 97K \u00b7 \ud83d\udccb 1.8K - 56% open \u00b7 \u23f1\ufe0f 11.02.2024):      <pre><code>git clone https://github.com/paramiko/paramiko\n</code></pre> - [PyPi](https://pypi.org/project/paramiko) (\ud83d\udce5 58M / month \u00b7 \ud83d\udce6 2.8K \u00b7 \u23f1\ufe0f 18.12.2023):     <pre><code>pip install paramiko\n</code></pre> - [Conda](https://anaconda.org/conda-forge/paramiko) (\ud83d\udce5 4.6M \u00b7 \u23f1\ufe0f 19.12.2023):     <pre><code>conda install -c conda-forge paramiko\n</code></pre> kubernetes (\ud83e\udd4839 \u00b7  \u2b50 6.5K) - Official Python client library for kubernetes. <code>Apache-2</code>  - [GitHub](https://github.com/kubernetes-client/python) (\ud83d\udc68\u200d\ud83d\udcbb 200 \u00b7 \ud83d\udd00 3.2K \u00b7 \ud83d\udccb 1.3K - 7% open \u00b7 \u23f1\ufe0f 30.05.2024):      <pre><code>git clone https://github.com/kubernetes-client/python\n</code></pre> - [PyPi](https://pypi.org/project/kubernetes) (\ud83d\udce5 30M / month \u00b7 \ud83d\udce6 1.3K \u00b7 \u23f1\ufe0f 30.05.2024):     <pre><code>pip install kubernetes\n</code></pre> - [Conda](https://anaconda.org/conda-forge/kubernetes) (\ud83d\udce5 500K \u00b7 \u23f1\ufe0f 30.05.2024):     <pre><code>conda install -c conda-forge kubernetes\n</code></pre> netmiko (\ud83e\udd4937 \u00b7  \u2b50 3.5K) - Multi-vendor library to simplify Paramiko SSH connections to network.. <code>MIT</code>  - [GitHub](https://github.com/ktbyers/netmiko) (\ud83d\udc68\u200d\ud83d\udcbb 240 \u00b7 \ud83d\udd00 1.3K \u00b7 \ud83d\udce6 4.4K \u00b7 \ud83d\udccb 2.1K - 8% open \u00b7 \u23f1\ufe0f 16.05.2024):      <pre><code>git clone https://github.com/ktbyers/netmiko\n</code></pre> - [PyPi](https://pypi.org/project/netmiko) (\ud83d\udce5 320K / month \u00b7 \ud83d\udce6 180 \u00b7 \u23f1\ufe0f 17.11.2023):     <pre><code>pip install netmiko\n</code></pre> fabric (\ud83e\udd4936 \u00b7  \u2b50 15K) - Simple, Pythonic remote execution and deployment. <code>BSD-2</code>  - [GitHub](https://github.com/fabric/fabric) (\ud83d\udc68\u200d\ud83d\udcbb 140 \u00b7 \ud83d\udd00 1.9K \u00b7 \ud83d\udce6 21 \u00b7 \ud83d\udccb 1.8K - 26% open \u00b7 \u23f1\ufe0f 26.01.2024):      <pre><code>git clone https://github.com/fabric/fabric\n</code></pre> - [PyPi](https://pypi.org/project/fabric) (\ud83d\udce5 6.5M / month \u00b7 \ud83d\udce6 280 \u00b7 \u23f1\ufe0f 31.08.2023):     <pre><code>pip install fabric\n</code></pre> - [Conda](https://anaconda.org/conda-forge/fabric) (\ud83d\udce5 94K \u00b7 \u23f1\ufe0f 31.08.2023):     <pre><code>conda install -c conda-forge fabric\n</code></pre> schedule (\ud83e\udd4936 \u00b7  \u2b50 12K) - Python job scheduling for humans. <code>MIT</code>  - [GitHub](https://github.com/dbader/schedule) (\ud83d\udc68\u200d\ud83d\udcbb 60 \u00b7 \ud83d\udd00 950 \u00b7 \ud83d\udce6 35K \u00b7 \ud83d\udccb 460 - 34% open \u00b7 \u23f1\ufe0f 25.05.2024):      <pre><code>git clone https://github.com/dbader/schedule\n</code></pre> - [PyPi](https://pypi.org/project/schedule) (\ud83d\udce5 2.3M / month \u00b7 \ud83d\udce6 660 \u00b7 \u23f1\ufe0f 25.05.2024):     <pre><code>pip install schedule\n</code></pre> - [Conda](https://anaconda.org/conda-forge/schedule) (\ud83d\udce5 58K \u00b7 \u23f1\ufe0f 02.10.2023):     <pre><code>conda install -c conda-forge schedule\n</code></pre> plumbum (\ud83e\udd4934 \u00b7  \u2b50 2.8K) - Plumbum: Shell Combinators. <code>MIT</code>  - [GitHub](https://github.com/tomerfiliba/plumbum) (\ud83d\udc68\u200d\ud83d\udcbb 110 \u00b7 \ud83d\udd00 180 \u00b7 \ud83d\udce6 6.5K \u00b7 \ud83d\udccb 360 - 37% open \u00b7 \u23f1\ufe0f 20.05.2024):      <pre><code>git clone https://github.com/tomerfiliba/plumbum\n</code></pre> - [PyPi](https://pypi.org/project/plumbum) (\ud83d\udce5 2.9M / month \u00b7 \ud83d\udce6 290 \u00b7 \u23f1\ufe0f 29.04.2024):     <pre><code>pip install plumbum\n</code></pre> - [Conda](https://anaconda.org/conda-forge/plumbum) (\ud83d\udce5 1M \u00b7 \u23f1\ufe0f 29.04.2024):     <pre><code>conda install -c conda-forge plumbum\n</code></pre> pyinfra (\ud83e\udd4931 \u00b7  \u2b50 3.6K) - pyinfra turns Python code into shell commands and runs them on your.. <code>MIT</code>  - [GitHub](https://github.com/pyinfra-dev/pyinfra) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 350 \u00b7 \ud83d\udce6 120 \u00b7 \ud83d\udccb 720 - 22% open \u00b7 \u23f1\ufe0f 27.05.2024):      <pre><code>git clone https://github.com/Fizzadar/pyinfra\n</code></pre> - [PyPi](https://pypi.org/project/pyinfra) (\ud83d\udce5 20K / month \u00b7 \ud83d\udce6 16 \u00b7 \u23f1\ufe0f 04.05.2024):     <pre><code>pip install pyinfra\n</code></pre> pypyr (\ud83e\udd4920 \u00b7  \u2b50 570 \u00b7 \ud83d\udca4) - pypyr task-runner cli &amp; api for automation pipelines. Automate.. <code>Apache-2</code>  - [GitHub](https://github.com/pypyr/pypyr) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 26 \u00b7 \ud83d\udce6 110 \u00b7 \ud83d\udccb 140 - 11% open \u00b7 \u23f1\ufe0f 22.09.2023):      <pre><code>git clone https://github.com/pypyr/pypyr\n</code></pre> - [PyPi](https://pypi.org/project/pypyr) (\ud83d\udce5 2.6K / month \u00b7 \ud83d\udce6 11 \u00b7 \u23f1\ufe0f 22.09.2023):     <pre><code>pip install pypyr\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pypyr) (\ud83d\udce5 16K \u00b7 \u23f1\ufe0f 22.09.2023):     <pre><code>conda install -c conda-forge pypyr\n</code></pre> Show 6 hidden projects...  - sshtunnel (\ud83e\udd4931 \u00b7  \u2b50 1.2K \u00b7 \ud83d\udc80) - SSH tunnels to remote server. <code>MIT</code> - parallel-ssh (\ud83e\udd4926 \u00b7  \u2b50 1.2K \u00b7 \ud83d\udc80) - Asynchronous parallel SSH client library. <code>\u2757\ufe0fLGPL-2.1</code> - storm (\ud83e\udd4924 \u00b7  \u2b50 3.9K \u00b7 \ud83d\udc80) - Manage your SSH like a boss. <code>MIT</code> - fabtools (\ud83e\udd4924 \u00b7  \u2b50 1.2K \u00b7 \ud83d\udc80) - Tools for writing awesome Fabric files. <code>BSD-2</code> - wssh (\ud83e\udd4917 \u00b7  \u2b50 1.4K \u00b7 \ud83d\udc80) - SSH to WebSockets Bridge. <code>MIT</code> - Grai (\ud83e\udd4914 \u00b7  \u2b50 280) - Platform to programmatically manage, test, and debug data.. <code>\u2757\ufe0fMulanPSL-2.0</code>"},{"location":"blog/2024/09/30/best-of-python/#process-utilities","title":"Process Utilities","text":"pexpect (\ud83e\udd4738 \u00b7  \u2b50 2.5K \u00b7 \ud83d\udca4) - A Python module for controlling interactive programs in a pseudo-.. <code>ISC</code>  - [GitHub](https://github.com/pexpect/pexpect) (\ud83d\udc68\u200d\ud83d\udcbb 110 \u00b7 \ud83d\udd00 480 \u00b7 \ud83d\udce5 4.4K \u00b7 \ud83d\udce6 390K \u00b7 \ud83d\udccb 490 - 32% open \u00b7 \u23f1\ufe0f 25.11.2023):      <pre><code>git clone https://github.com/pexpect/pexpect\n</code></pre> - [PyPi](https://pypi.org/project/pexpect) (\ud83d\udce5 72M / month \u00b7 \ud83d\udce6 1.6K \u00b7 \u23f1\ufe0f 25.11.2023):     <pre><code>pip install pexpect\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pexpect) (\ud83d\udce5 19M \u00b7 \u23f1\ufe0f 24.01.2024):     <pre><code>conda install -c conda-forge pexpect\n</code></pre> supervisor (\ud83e\udd4836 \u00b7  \u2b50 8.3K) - Supervisor process control system for Unix.. <code>\u2757\ufe0fRepoze Public License</code>  - [GitHub](https://github.com/Supervisor/supervisor) (\ud83d\udc68\u200d\ud83d\udcbb 180 \u00b7 \ud83d\udd00 1.2K \u00b7 \ud83d\udce6 11K \u00b7 \ud83d\udccb 1.2K - 13% open \u00b7 \u23f1\ufe0f 22.05.2024):      <pre><code>git clone https://github.com/Supervisor/supervisor\n</code></pre> - [PyPi](https://pypi.org/project/supervisor) (\ud83d\udce5 1.5M / month \u00b7 \ud83d\udce6 120 \u00b7 \u23f1\ufe0f 24.12.2022):     <pre><code>pip install supervisor\n</code></pre> - [Conda](https://anaconda.org/conda-forge/supervisor) (\ud83d\udce5 310K \u00b7 \u23f1\ufe0f 23.11.2023):     <pre><code>conda install -c conda-forge supervisor\n</code></pre> sh (\ud83e\udd4935 \u00b7  \u2b50 6.9K) - Python process launching. <code>MIT</code>  - [GitHub](https://github.com/amoffat/sh) (\ud83d\udc68\u200d\ud83d\udcbb 98 \u00b7 \ud83d\udd00 500 \u00b7 \ud83d\udce6 15K \u00b7 \ud83d\udccb 480 - 1% open \u00b7 \u23f1\ufe0f 31.05.2024):      <pre><code>git clone https://github.com/amoffat/sh\n</code></pre> - [PyPi](https://pypi.org/project/sh) (\ud83d\udce5 7.2M / month \u00b7 \ud83d\udce6 720 \u00b7 \u23f1\ufe0f 01.06.2024):     <pre><code>pip install sh\n</code></pre> - [Conda](https://anaconda.org/conda-forge/sh) (\ud83d\udce5 210K \u00b7 \u23f1\ufe0f 01.06.2024):     <pre><code>conda install -c conda-forge sh\n</code></pre> ptyprocess (\ud83e\udd4924 \u00b7  \u2b50 210 \u00b7 \ud83d\udca4) - Run a subprocess in a pseudo terminal. <code>ISC</code>  - [GitHub](https://github.com/pexpect/ptyprocess) (\ud83d\udc68\u200d\ud83d\udcbb 19 \u00b7 \ud83d\udd00 70 \u00b7 \ud83d\udccb 37 - 51% open \u00b7 \u23f1\ufe0f 23.10.2023):      <pre><code>git clone https://github.com/pexpect/ptyprocess\n</code></pre> - [PyPi](https://pypi.org/project/ptyprocess) (\ud83d\udce5 73M / month \u00b7 \ud83d\udce6 680 \u00b7 \u23f1\ufe0f 28.12.2020):     <pre><code>pip install ptyprocess\n</code></pre> - [Conda](https://anaconda.org/conda-forge/ptyprocess) (\ud83d\udce5 18M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge ptyprocess\n</code></pre>"},{"location":"blog/2024/09/30/best-of-python/#asynchronous-programming","title":"Asynchronous Programming","text":"uvloop (\ud83e\udd4737 \u00b7  \u2b50 10K \u00b7 \ud83d\udca4) - Ultra fast asyncio event loop. <code>Apache-2</code>  - [GitHub](https://github.com/MagicStack/uvloop) (\ud83d\udc68\u200d\ud83d\udcbb 60 \u00b7 \ud83d\udd00 530 \u00b7 \ud83d\udce5 440 \u00b7 \ud83d\udce6 130K \u00b7 \ud83d\udccb 360 - 28% open \u00b7 \u23f1\ufe0f 22.10.2023):      <pre><code>git clone https://github.com/MagicStack/uvloop\n</code></pre> - [PyPi](https://pypi.org/project/uvloop) (\ud83d\udce5 18M / month \u00b7 \ud83d\udce6 1.3K \u00b7 \u23f1\ufe0f 22.10.2023):     <pre><code>pip install uvloop\n</code></pre> - [Conda](https://anaconda.org/conda-forge/uvloop) (\ud83d\udce5 730K \u00b7 \u23f1\ufe0f 23.10.2023):     <pre><code>conda install -c conda-forge uvloop\n</code></pre> anyio (\ud83e\udd4737 \u00b7  \u2b50 1.6K) - High level asynchronous concurrency and networking framework that works on.. <code>MIT</code>  - [GitHub](https://github.com/agronholm/anyio) (\ud83d\udc68\u200d\ud83d\udcbb 51 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce6 310K \u00b7 \ud83d\udccb 350 - 16% open \u00b7 \u23f1\ufe0f 03.06.2024):      <pre><code>git clone https://github.com/agronholm/anyio\n</code></pre> - [PyPi](https://pypi.org/project/anyio) (\ud83d\udce5 74M / month \u00b7 \ud83d\udce6 1.5K \u00b7 \u23f1\ufe0f 26.05.2024):     <pre><code>pip install anyio\n</code></pre> - [Conda](https://anaconda.org/conda-forge/anyio) (\ud83d\udce5 14M \u00b7 \u23f1\ufe0f 19.02.2024):     <pre><code>conda install -c conda-forge anyio\n</code></pre> greenlet (\ud83e\udd4737 \u00b7  \u2b50 1.6K) - Lightweight in-process concurrent programming. <code>MIT</code>  - [GitHub](https://github.com/python-greenlet/greenlet) (\ud83d\udc68\u200d\ud83d\udcbb 68 \u00b7 \ud83d\udd00 240 \u00b7 \ud83d\udce6 390K \u00b7 \ud83d\udccb 250 - 12% open \u00b7 \u23f1\ufe0f 21.12.2023):      <pre><code>git clone https://github.com/python-greenlet/greenlet\n</code></pre> - [PyPi](https://pypi.org/project/greenlet) (\ud83d\udce5 100M / month \u00b7 \ud83d\udce6 1.1K \u00b7 \u23f1\ufe0f 21.12.2023):     <pre><code>pip install greenlet\n</code></pre> - [Conda](https://anaconda.org/conda-forge/greenlet) (\ud83d\udce5 10M \u00b7 \u23f1\ufe0f 21.12.2023):     <pre><code>conda install -c conda-forge greenlet\n</code></pre> asyncer (\ud83e\udd4928 \u00b7  \u2b50 1.5K) - Asyncer, async and await, focused on developer experience. <code>MIT</code>  - [GitHub](https://github.com/tiangolo/asyncer) (\ud83d\udc68\u200d\ud83d\udcbb 15 \u00b7 \ud83d\udd00 47 \u00b7 \ud83d\udce6 3.9K \u00b7 \ud83d\udccb 20 - 80% open \u00b7 \u23f1\ufe0f 23.05.2024):      <pre><code>git clone https://github.com/tiangolo/asyncer\n</code></pre> - [PyPi](https://pypi.org/project/asyncer) (\ud83d\udce5 210K / month \u00b7 \ud83d\udce6 120 \u00b7 \u23f1\ufe0f 30.04.2024):     <pre><code>pip install asyncer\n</code></pre> - [Conda](https://anaconda.org/conda-forge/asyncer) (\ud83d\udce5 8.4K \u00b7 \u23f1\ufe0f 30.04.2024):     <pre><code>conda install -c conda-forge asyncer\n</code></pre> aiomisc (\ud83e\udd4924 \u00b7  \u2b50 370) - aiomisc - miscellaneous utils for asyncio. <code>MIT</code>  - [GitHub](https://github.com/aiokitchen/aiomisc) (\ud83d\udc68\u200d\ud83d\udcbb 20 \u00b7 \ud83d\udd00 26 \u00b7 \ud83d\udce6 370 \u00b7 \ud83d\udccb 24 - 25% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/aiokitchen/aiomisc\n</code></pre> - [PyPi](https://pypi.org/project/aiomisc) (\ud83d\udce5 19K / month \u00b7 \ud83d\udce6 57 \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>pip install aiomisc\n</code></pre> unsync (\ud83e\udd4922 \u00b7  \u2b50 870) - Unsynchronize asyncio. <code>MIT</code>  - [GitHub](https://github.com/alex-sherman/unsync) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 51 \u00b7 \ud83d\udce6 230 \u00b7 \ud83d\udccb 31 - 9% open \u00b7 \u23f1\ufe0f 16.03.2024):      <pre><code>git clone https://github.com/alex-sherman/unsync\n</code></pre> - [PyPi](https://pypi.org/project/unsync) (\ud83d\udce5 67K / month \u00b7 \ud83d\udce6 19 \u00b7 \u23f1\ufe0f 21.10.2021):     <pre><code>pip install unsync\n</code></pre> - [Conda](https://anaconda.org/conda-forge/unsync) (\ud83d\udce5 13K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge unsync\n</code></pre> stopit (\ud83e\udd4921 \u00b7  \u2b50 110) - Raise asynchronous exceptions in other thread, control the timeout of.. <code>MIT</code>  - [GitHub](https://github.com/glenfant/stopit) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 21 \u00b7 \ud83d\udce6 2.4K \u00b7 \ud83d\udccb 20 - 25% open \u00b7 \u23f1\ufe0f 09.01.2024):      <pre><code>git clone https://github.com/glenfant/stopit\n</code></pre> - [PyPi](https://pypi.org/project/stopit) (\ud83d\udce5 390K / month \u00b7 \ud83d\udce6 94 \u00b7 \u23f1\ufe0f 09.02.2018):     <pre><code>pip install stopit\n</code></pre> - [Conda](https://anaconda.org/conda-forge/stopit) (\ud83d\udce5 910K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge stopit\n</code></pre>"},{"location":"blog/2024/09/30/best-of-python/#configuration","title":"Configuration","text":"python-dotenv (\ud83e\udd4738 \u00b7  \u2b50 7.2K) - Reads key-value pairs from a .env file and can set them as.. <code>BSD-3</code>  - [GitHub](https://github.com/theskumar/python-dotenv) (\ud83d\udc68\u200d\ud83d\udcbb 95 \u00b7 \ud83d\udd00 410 \u00b7 \ud83d\udce6 810K \u00b7 \ud83d\udccb 290 - 19% open \u00b7 \u23f1\ufe0f 29.04.2024):      <pre><code>git clone https://github.com/theskumar/python-dotenv\n</code></pre> - [PyPi](https://pypi.org/project/python-dotenv) (\ud83d\udce5 70M / month \u00b7 \ud83d\udce6 9.2K \u00b7 \u23f1\ufe0f 23.01.2024):     <pre><code>pip install python-dotenv\n</code></pre> - [Conda](https://anaconda.org/conda-forge/python-dotenv) (\ud83d\udce5 3.5M \u00b7 \u23f1\ufe0f 23.01.2024):     <pre><code>conda install -c conda-forge python-dotenv\n</code></pre> traitlets (\ud83e\udd4738 \u00b7  \u2b50 600) - A lightweight Traits like module. <code>BSD-3</code>  - [GitHub](https://github.com/ipython/traitlets) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 200 \u00b7 \ud83d\udce5 350 \u00b7 \ud83d\udce6 440K \u00b7 \ud83d\udccb 300 - 33% open \u00b7 \u23f1\ufe0f 19.04.2024):      <pre><code>git clone https://github.com/ipython/traitlets\n</code></pre> - [PyPi](https://pypi.org/project/traitlets) (\ud83d\udce5 45M / month \u00b7 \ud83d\udce6 1.3K \u00b7 \u23f1\ufe0f 19.04.2024):     <pre><code>pip install traitlets\n</code></pre> - [Conda](https://anaconda.org/conda-forge/traitlets) (\ud83d\udce5 28M \u00b7 \u23f1\ufe0f 19.04.2024):     <pre><code>conda install -c conda-forge traitlets\n</code></pre> Dynaconf (\ud83e\udd4834 \u00b7  \u2b50 3.6K) - Configuration Management for Python. <code>MIT</code>  - [GitHub](https://github.com/dynaconf/dynaconf) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 290 \u00b7 \ud83d\udce6 8.6K \u00b7 \ud83d\udccb 510 - 23% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/rochacbruno/dynaconf\n</code></pre> - [PyPi](https://pypi.org/project/dynaconf) (\ud83d\udce5 2.9M / month \u00b7 \ud83d\udce6 420 \u00b7 \u23f1\ufe0f 18.03.2024):     <pre><code>pip install dynaconf\n</code></pre> - [Conda](https://anaconda.org/conda-forge/dynaconf) (\ud83d\udce5 78K \u00b7 \u23f1\ufe0f 26.03.2024):     <pre><code>conda install -c conda-forge dynaconf\n</code></pre> hydra (\ud83e\udd4833 \u00b7  \u2b50 8.3K) - Hydra is a framework for elegantly configuring complex applications. <code>MIT</code>  - [GitHub](https://github.com/facebookresearch/hydra) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 600 \u00b7 \ud83d\udce6 24K \u00b7 \ud83d\udccb 1.4K - 19% open \u00b7 \u23f1\ufe0f 03.04.2024):      <pre><code>git clone https://github.com/facebookresearch/hydra\n</code></pre> - [PyPi](https://pypi.org/project/hydra) (\ud83d\udce5 10K / month \u00b7 \ud83d\udce6 11 \u00b7 \u23f1\ufe0f 03.08.2016):     <pre><code>pip install hydra\n</code></pre> - [Conda](https://anaconda.org/conda-forge/hydra-core) (\ud83d\udce5 990K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge hydra-core\n</code></pre> python-decouple (\ud83e\udd4932 \u00b7  \u2b50 2.7K) - Strict separation of config from code. <code>MIT</code>  - [GitHub](https://github.com/HBNetwork/python-decouple) (\ud83d\udc68\u200d\ud83d\udcbb 36 \u00b7 \ud83d\udd00 190 \u00b7 \ud83d\udce5 12 \u00b7 \ud83d\udce6 130K \u00b7 \ud83d\udccb 94 - 4% open \u00b7 \u23f1\ufe0f 01.01.2024):      <pre><code>git clone https://github.com/henriquebastos/python-decouple\n</code></pre> - [PyPi](https://pypi.org/project/python-decouple) (\ud83d\udce5 3.9M / month \u00b7 \ud83d\udce6 650 \u00b7 \u23f1\ufe0f 01.03.2023):     <pre><code>pip install python-decouple\n</code></pre> - [Conda](https://anaconda.org/conda-forge/python-decouple) (\ud83d\udce5 85K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge python-decouple\n</code></pre> omegaconf (\ud83e\udd4931 \u00b7  \u2b50 1.8K) - Flexible Python configuration system. The last one you will ever need. <code>BSD-3</code>  - [GitHub](https://github.com/omry/omegaconf) (\ud83d\udc68\u200d\ud83d\udcbb 35 \u00b7 \ud83d\udd00 98 \u00b7 \ud83d\udce6 31K \u00b7 \ud83d\udccb 560 - 19% open \u00b7 \u23f1\ufe0f 30.05.2024):      <pre><code>git clone https://github.com/omry/omegaconf\n</code></pre> - [PyPi](https://pypi.org/project/omegaconf) (\ud83d\udce5 9.5M / month \u00b7 \ud83d\udce6 910 \u00b7 \u23f1\ufe0f 29.02.2024):     <pre><code>pip install omegaconf\n</code></pre> - [Conda](https://anaconda.org/conda-forge/omegaconf) (\ud83d\udce5 1.4M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge omegaconf\n</code></pre> gin-config (\ud83e\udd4929 \u00b7  \u2b50 2K) - Gin provides a lightweight configuration framework for Python. <code>Apache-2</code>  - [GitHub](https://github.com/google/gin-config) (\ud83d\udc68\u200d\ud83d\udcbb 24 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce6 8.7K \u00b7 \ud83d\udccb 95 - 55% open \u00b7 \u23f1\ufe0f 05.02.2024):      <pre><code>git clone https://github.com/google/gin-config\n</code></pre> - [PyPi](https://pypi.org/project/gin-config) (\ud83d\udce5 270K / month \u00b7 \ud83d\udce6 72 \u00b7 \u23f1\ufe0f 03.11.2021):     <pre><code>pip install gin-config\n</code></pre> - [Conda](https://anaconda.org/conda-forge/gin-config) (\ud83d\udce5 25K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge gin-config\n</code></pre> everett (\ud83e\udd4924 \u00b7  \u2b50 150) - configuration library for python projects. <code>MPL-2.0</code>  - [GitHub](https://github.com/willkg/everett) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 33 \u00b7 \ud83d\udce6 1.3K \u00b7 \ud83d\udccb 88 - 4% open \u00b7 \u23f1\ufe0f 02.06.2024):      <pre><code>git clone https://github.com/willkg/everett\n</code></pre> - [PyPi](https://pypi.org/project/everett) (\ud83d\udce5 220K / month \u00b7 \ud83d\udce6 22 \u00b7 \u23f1\ufe0f 06.11.2023):     <pre><code>pip install everett\n</code></pre> - [Conda](https://anaconda.org/conda-forge/everett) (\ud83d\udce5 63K \u00b7 \u23f1\ufe0f 06.11.2023):     <pre><code>conda install -c conda-forge everett\n</code></pre> Show 1 hidden projects...  - configobj (\ud83e\udd4928 \u00b7  \u2b50 310 \u00b7 \ud83d\udc80) - Python 3+ compatible port of the configobj library. <code>BSD-3</code>"},{"location":"blog/2024/09/30/best-of-python/#cli-development","title":"CLI Development","text":"click (\ud83e\udd4746 \u00b7  \u2b50 15K) - Python composable command line interface toolkit. <code>BSD-3</code>  - [GitHub](https://github.com/pallets/click) (\ud83d\udc68\u200d\ud83d\udcbb 370 \u00b7 \ud83d\udd00 1.4K \u00b7 \ud83d\udce5 370 \u00b7 \ud83d\udce6 1.7M \u00b7 \ud83d\udccb 1.6K - 7% open \u00b7 \u23f1\ufe0f 03.06.2024):      <pre><code>git clone https://github.com/pallets/click\n</code></pre> - [PyPi](https://pypi.org/project/click) (\ud83d\udce5 210M / month \u00b7 \ud83d\udce6 37K \u00b7 \u23f1\ufe0f 17.08.2023):     <pre><code>pip install click\n</code></pre> - [Conda](https://anaconda.org/conda-forge/click) (\ud83d\udce5 35M \u00b7 \u23f1\ufe0f 17.08.2023):     <pre><code>conda install -c conda-forge click\n</code></pre> rich (\ud83e\udd4743 \u00b7  \u2b50 48K) - Rich is a Python library for rich text and beautiful formatting in the terminal. <code>MIT</code>  - [GitHub](https://github.com/Textualize/rich) (\ud83d\udc68\u200d\ud83d\udcbb 240 \u00b7 \ud83d\udd00 1.7K \u00b7 \ud83d\udce6 220K \u00b7 \ud83d\udccb 1.4K - 20% open \u00b7 \u23f1\ufe0f 01.05.2024):      <pre><code>git clone https://github.com/Textualize/rich\n</code></pre> - [PyPi](https://pypi.org/project/rich) (\ud83d\udce5 67M / month \u00b7 \ud83d\udce6 11K \u00b7 \u23f1\ufe0f 28.02.2024):     <pre><code>pip install rich\n</code></pre> - [Conda](https://anaconda.org/conda-forge/rich) (\ud83d\udce5 7.1M \u00b7 \u23f1\ufe0f 28.02.2024):     <pre><code>conda install -c conda-forge rich\n</code></pre> Typer (\ud83e\udd4840 \u00b7  \u2b50 15K) - Typer, build great CLIs. Easy to code. Based on Python type hints. <code>MIT</code>  - [GitHub](https://github.com/tiangolo/typer) (\ud83d\udc68\u200d\ud83d\udcbb 55 \u00b7 \ud83d\udd00 620 \u00b7 \ud83d\udce6 98K \u00b7 \ud83d\udccb 390 - 53% open \u00b7 \u23f1\ufe0f 23.05.2024):      <pre><code>git clone https://github.com/tiangolo/typer\n</code></pre> - [PyPi](https://pypi.org/project/typer) (\ud83d\udce5 33M / month \u00b7 \ud83d\udce6 5.2K \u00b7 \u23f1\ufe0f 09.04.2024):     <pre><code>pip install typer\n</code></pre> - [Conda](https://anaconda.org/conda-forge/typer) (\ud83d\udce5 2.5M \u00b7 \u23f1\ufe0f 09.04.2024):     <pre><code>conda install -c conda-forge typer\n</code></pre> python-fire (\ud83e\udd4839 \u00b7  \u2b50 26K) - Python Fire is a library for automatically generating command.. <code>Apache-2</code>  - [GitHub](https://github.com/google/python-fire) (\ud83d\udc68\u200d\ud83d\udcbb 65 \u00b7 \ud83d\udd00 1.4K \u00b7 \ud83d\udce6 34K \u00b7 \ud83d\udccb 340 - 44% open \u00b7 \u23f1\ufe0f 05.04.2024):      <pre><code>git clone https://github.com/google/python-fire\n</code></pre> - [PyPi](https://pypi.org/project/fire) (\ud83d\udce5 6.9M / month \u00b7 \ud83d\udce6 2.3K \u00b7 \u23f1\ufe0f 11.03.2024):     <pre><code>pip install fire\n</code></pre> - [Conda](https://anaconda.org/conda-forge/fire) (\ud83d\udce5 950K \u00b7 \u23f1\ufe0f 12.03.2024):     <pre><code>conda install -c conda-forge fire\n</code></pre> python-prompt-toolkit (\ud83e\udd4839 \u00b7  \u2b50 9K) - Library for building powerful interactive command line.. <code>BSD-3</code>  - [GitHub](https://github.com/prompt-toolkit/python-prompt-toolkit) (\ud83d\udc68\u200d\ud83d\udcbb 230 \u00b7 \ud83d\udd00 710 \u00b7 \ud83d\udccb 1.2K - 52% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/prompt-toolkit/python-prompt-toolkit\n</code></pre> - [PyPi](https://pypi.org/project/prompt_toolkit) (\ud83d\udce5 51M / month \u00b7 \ud83d\udce6 2.6K \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>pip install prompt_toolkit\n</code></pre> - [Conda](https://anaconda.org/conda-forge/prompt-toolkit) (\ud83d\udce5 23M \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>conda install -c conda-forge prompt-toolkit\n</code></pre> colorama (\ud83e\udd4836 \u00b7  \u2b50 3.5K) - Simple cross-platform colored terminal text in Python. <code>BSD-3</code>  - [GitHub](https://github.com/tartley/colorama) (\ud83d\udc68\u200d\ud83d\udcbb 51 \u00b7 \ud83d\udd00 240 \u00b7 \ud83d\udce6 970K \u00b7 \ud83d\udccb 260 - 45% open \u00b7 \u23f1\ufe0f 01.12.2023):      <pre><code>git clone https://github.com/tartley/colorama\n</code></pre> - [PyPi](https://pypi.org/project/colorama) (\ud83d\udce5 170M / month \u00b7 \ud83d\udce6 11K \u00b7 \u23f1\ufe0f 25.10.2022):     <pre><code>pip install colorama\n</code></pre> - [Conda](https://anaconda.org/conda-forge/colorama) (\ud83d\udce5 31M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge colorama\n</code></pre> argcomplete (\ud83e\udd4835 \u00b7  \u2b50 1.4K) - Python and tab completion, better together. <code>Apache-2</code>  - [GitHub](https://github.com/kislyuk/argcomplete) (\ud83d\udc68\u200d\ud83d\udcbb 73 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce5 360 \u00b7 \ud83d\udce6 53K \u00b7 \ud83d\udccb 270 - 19% open \u00b7 \u23f1\ufe0f 12.05.2024):      <pre><code>git clone https://github.com/kislyuk/argcomplete\n</code></pre> - [PyPi](https://pypi.org/project/argcomplete) (\ud83d\udce5 29M / month \u00b7 \ud83d\udce6 1.3K \u00b7 \u23f1\ufe0f 14.04.2024):     <pre><code>pip install argcomplete\n</code></pre> - [Conda](https://anaconda.org/conda-forge/argcomplete) (\ud83d\udce5 1.6M \u00b7 \u23f1\ufe0f 15.04.2024):     <pre><code>conda install -c conda-forge argcomplete\n</code></pre> cleo (\ud83e\udd4933 \u00b7  \u2b50 1.2K) - Cleo allows you to create beautiful and testable command-line interfaces. <code>MIT</code>  - [GitHub](https://github.com/python-poetry/cleo) (\ud83d\udc68\u200d\ud83d\udcbb 36 \u00b7 \ud83d\udd00 85 \u00b7 \ud83d\udce6 22K \u00b7 \ud83d\udccb 110 - 29% open \u00b7 \u23f1\ufe0f 03.06.2024):      <pre><code>git clone https://github.com/sdispater/cleo\n</code></pre> - [PyPi](https://pypi.org/project/cleo) (\ud83d\udce5 33M / month \u00b7 \ud83d\udce6 310 \u00b7 \u23f1\ufe0f 30.10.2023):     <pre><code>pip install cleo\n</code></pre> - [Conda](https://anaconda.org/conda-forge/cleo) (\ud83d\udce5 730K \u00b7 \u23f1\ufe0f 30.10.2023):     <pre><code>conda install -c conda-forge cleo\n</code></pre> wcwidth (\ud83e\udd4933 \u00b7  \u2b50 380) - Python library that measures the width of unicode strings rendered to a.. <code>MIT</code>  - [GitHub](https://github.com/jquast/wcwidth) (\ud83d\udc68\u200d\ud83d\udcbb 19 \u00b7 \ud83d\udd00 56 \u00b7 \ud83d\udce6 560K \u00b7 \ud83d\udccb 59 - 32% open \u00b7 \u23f1\ufe0f 14.02.2024):      <pre><code>git clone https://github.com/jquast/wcwidth\n</code></pre> - [PyPi](https://pypi.org/project/wcwidth) (\ud83d\udce5 65M / month \u00b7 \ud83d\udce6 1.6K \u00b7 \u23f1\ufe0f 06.01.2024):     <pre><code>pip install wcwidth\n</code></pre> - [Conda](https://anaconda.org/conda-forge/wcwidth) (\ud83d\udce5 25M \u00b7 \u23f1\ufe0f 08.01.2024):     <pre><code>conda install -c conda-forge wcwidth\n</code></pre> questionary (\ud83e\udd4930 \u00b7  \u2b50 1.4K) - Python library to build pretty command line user prompts Easy to use.. <code>MIT</code>  - [GitHub](https://github.com/tmbo/questionary) (\ud83d\udc68\u200d\ud83d\udcbb 40 \u00b7 \ud83d\udd00 85 \u00b7 \ud83d\udce6 12K \u00b7 \ud83d\udccb 150 - 35% open \u00b7 \u23f1\ufe0f 12.01.2024):      <pre><code>git clone https://github.com/tmbo/questionary\n</code></pre> - [PyPi](https://pypi.org/project/questionary) (\ud83d\udce5 2M / month \u00b7 \ud83d\udce6 660 \u00b7 \u23f1\ufe0f 08.09.2023):     <pre><code>pip install questionary\n</code></pre> - [Conda](https://anaconda.org/conda-forge/questionary) (\ud83d\udce5 76K \u00b7 \u23f1\ufe0f 10.09.2023):     <pre><code>conda install -c conda-forge questionary\n</code></pre> asciimatics (\ud83e\udd4929 \u00b7  \u2b50 3.6K) - A cross platform package to do curses-like operations, plus.. <code>Apache-2</code>  - [GitHub](https://github.com/peterbrittain/asciimatics) (\ud83d\udc68\u200d\ud83d\udcbb 45 \u00b7 \ud83d\udd00 240 \u00b7 \ud83d\udce6 1K \u00b7 \ud83d\udccb 300 - 8% open \u00b7 \u23f1\ufe0f 24.04.2024):      <pre><code>git clone https://github.com/peterbrittain/asciimatics\n</code></pre> - [PyPi](https://pypi.org/project/asciimatics) (\ud83d\udce5 24K / month \u00b7 \ud83d\udce6 110 \u00b7 \u23f1\ufe0f 25.10.2023):     <pre><code>pip install asciimatics\n</code></pre> - [Conda](https://anaconda.org/conda-forge/asciimatics) (\ud83d\udce5 160K \u00b7 \u23f1\ufe0f 25.10.2023):     <pre><code>conda install -c conda-forge asciimatics\n</code></pre> ConfigArgParse (\ud83e\udd4928 \u00b7  \u2b50 700 \u00b7 \ud83d\udca4) - A drop-in replacement for argparse that allows options to.. <code>MIT</code>  - [GitHub](https://github.com/bw2/ConfigArgParse) (\ud83d\udc68\u200d\ud83d\udcbb 53 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce6 17K \u00b7 \ud83d\udccb 200 - 36% open \u00b7 \u23f1\ufe0f 23.07.2023):      <pre><code>git clone https://github.com/bw2/ConfigArgParse\n</code></pre> - [PyPi](https://pypi.org/project/configargparse) (\ud83d\udce5 4.6M / month \u00b7 \ud83d\udce6 570 \u00b7 \u23f1\ufe0f 23.07.2023):     <pre><code>pip install configargparse\n</code></pre> - [Conda](https://anaconda.org/conda-forge/configargparse) (\ud83d\udce5 860K \u00b7 \u23f1\ufe0f 23.07.2023):     <pre><code>conda install -c conda-forge configargparse\n</code></pre> docopt-ng (\ud83e\udd4923 \u00b7  \u2b50 180) - Humane command line arguments parser. Now with maintenance, typehints,.. <code>MIT</code>  - [GitHub](https://github.com/jazzband/docopt-ng) (\ud83d\udc68\u200d\ud83d\udcbb 49 \u00b7 \ud83d\udd00 20 \u00b7 \ud83d\udce6 320 \u00b7 \ud83d\udccb 35 - 54% open \u00b7 \u23f1\ufe0f 13.05.2024):      <pre><code>git clone https://github.com/jazzband/docopt-ng\n</code></pre> - [PyPi](https://pypi.org/project/docopt-ng) (\ud83d\udce5 210K / month \u00b7 \ud83d\udce6 84 \u00b7 \u23f1\ufe0f 30.05.2023):     <pre><code>pip install docopt-ng\n</code></pre> colout (\ud83e\udd4918 \u00b7  \u2b50 1.1K) - Color text streams with a polished command line interface. <code>\u2757\ufe0fGPL-3.0</code>  - [GitHub](https://github.com/nojhan/colout) (\ud83d\udc68\u200d\ud83d\udcbb 30 \u00b7 \ud83d\udd00 58 \u00b7 \ud83d\udce6 6 \u00b7 \ud83d\udccb 72 - 19% open \u00b7 \u23f1\ufe0f 29.01.2024):      <pre><code>git clone https://github.com/nojhan/colout\n</code></pre> - [PyPi](https://pypi.org/project/colout) (\ud83d\udce5 200 / month \u00b7 \u23f1\ufe0f 21.06.2020):     <pre><code>pip install colout\n</code></pre> Show 5 hidden projects...  - docopt (\ud83e\udd4836 \u00b7  \u2b50 7.9K \u00b7 \ud83d\udc80) - Create *beautiful* command-line interfaces with Python. <code>MIT</code> - blessings (\ud83e\udd4928 \u00b7  \u2b50 1.4K \u00b7 \ud83d\udc80) - A thin, practical wrapper around terminal capabilities in Python. <code>MIT</code> - clint (\ud83e\udd4924 \u00b7  \u2b50 95 \u00b7 \ud83d\udc80) - Python Command-line Application Tools. <code>ISC</code> - bashplotlib (\ud83e\udd4922 \u00b7  \u2b50 1.8K \u00b7 \ud83d\udc80) - plotting in the terminal. <code>MIT</code> - Click Extra (\ud83e\udd4922 \u00b7  \u2b50 54) - Extra colorization and configuration loading for Click. <code>\u2757\ufe0fGPL-2.0</code>"},{"location":"blog/2024/09/30/best-of-python/#development-tools","title":"Development Tools","text":"<p>\ud83d\udd17\u00a0best-of-python-dev ( \u2b50 930)  - A ranked list of awesome python developer tools and libraries. Updated..</p> <p></p>"},{"location":"blog/2024/09/30/best-of-python/#data-caching","title":"Data Caching","text":"cachetools (\ud83e\udd4734 \u00b7  \u2b50 2.2K) - Extensible memoizing collections and decorators. <code>MIT</code>  - [GitHub](https://github.com/tkem/cachetools) (\ud83d\udc68\u200d\ud83d\udcbb 13 \u00b7 \ud83d\udd00 160 \u00b7 \ud83d\udccb 240 - 4% open \u00b7 \u23f1\ufe0f 02.06.2024):      <pre><code>git clone https://github.com/tkem/cachetools\n</code></pre> - [PyPi](https://pypi.org/project/cachetools) (\ud83d\udce5 140M / month \u00b7 \ud83d\udce6 2.5K \u00b7 \u23f1\ufe0f 26.02.2024):     <pre><code>pip install cachetools\n</code></pre> - [Conda](https://anaconda.org/conda-forge/cachetools) (\ud83d\udce5 12M \u00b7 \u23f1\ufe0f 26.02.2024):     <pre><code>conda install -c conda-forge cachetools\n</code></pre> aiocache (\ud83e\udd4830 \u00b7  \u2b50 1K) - Asyncio cache manager for redis, memcached and memory. <code>BSD-3</code>  - [GitHub](https://github.com/aio-libs/aiocache) (\ud83d\udc68\u200d\ud83d\udcbb 45 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce5 16 \u00b7 \ud83d\udce6 2.2K \u00b7 \ud83d\udccb 300 - 13% open \u00b7 \u23f1\ufe0f 01.06.2024):      <pre><code>git clone https://github.com/aio-libs/aiocache\n</code></pre> - [PyPi](https://pypi.org/project/aiocache) (\ud83d\udce5 770K / month \u00b7 \ud83d\udce6 120 \u00b7 \u23f1\ufe0f 06.08.2023):     <pre><code>pip install aiocache\n</code></pre> beaker (\ud83e\udd4929 \u00b7  \u2b50 510) - WSGI middleware for sessions and caching. <code>BSD-3</code>  - [GitHub](https://github.com/bbangert/beaker) (\ud83d\udc68\u200d\ud83d\udcbb 91 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce6 5.4K \u00b7 \ud83d\udccb 140 - 55% open \u00b7 \u23f1\ufe0f 11.04.2024):      <pre><code>git clone https://github.com/bbangert/beaker\n</code></pre> - [PyPi](https://pypi.org/project/beaker) (\ud83d\udce5 220K / month \u00b7 \ud83d\udce6 78 \u00b7 \u23f1\ufe0f 11.04.2024):     <pre><code>pip install beaker\n</code></pre> - [Conda](https://anaconda.org/conda-forge/beaker) (\ud83d\udce5 75K \u00b7 \u23f1\ufe0f 12.04.2024):     <pre><code>conda install -c conda-forge beaker\n</code></pre> pylibmc (\ud83e\udd4927 \u00b7  \u2b50 480 \u00b7 \ud83d\udca4) - A Python wrapper around the libmemcached interface from TangentOrg. <code>BSD-3</code>  - [GitHub](https://github.com/lericson/pylibmc) (\ud83d\udc68\u200d\ud83d\udcbb 54 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce5 610 \u00b7 \ud83d\udce6 5.1K \u00b7 \ud83d\udccb 190 - 11% open \u00b7 \u23f1\ufe0f 11.10.2023):      <pre><code>git clone https://github.com/lericson/pylibmc\n</code></pre> - [PyPi](https://pypi.org/project/pylibmc) (\ud83d\udce5 250K / month \u00b7 \ud83d\udce6 79 \u00b7 \u23f1\ufe0f 30.08.2022):     <pre><code>pip install pylibmc\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pylibmc) (\ud83d\udce5 230K \u00b7 \u23f1\ufe0f 26.09.2023):     <pre><code>conda install -c conda-forge pylibmc\n</code></pre> cachier (\ud83e\udd4926 \u00b7  \u2b50 520) - Persistent, stale-free, local and cross-machine caching for Python.. <code>MIT</code>  - [GitHub](https://github.com/python-cachier/cachier) (\ud83d\udc68\u200d\ud83d\udcbb 20 \u00b7 \ud83d\udd00 59 \u00b7 \ud83d\udce5 17 \u00b7 \ud83d\udce6 460 \u00b7 \ud83d\udccb 82 - 26% open \u00b7 \u23f1\ufe0f 01.06.2024):      <pre><code>git clone https://github.com/shaypal5/cachier\n</code></pre> - [PyPi](https://pypi.org/project/cachier) (\ud83d\udce5 100K / month \u00b7 \ud83d\udce6 40 \u00b7 \u23f1\ufe0f 26.02.2024):     <pre><code>pip install cachier\n</code></pre> Show 1 hidden projects...  - cached-property (\ud83e\udd4830 \u00b7  \u2b50 680 \u00b7 \ud83d\udc80) - A decorator for caching properties in classes. <code>BSD-3</code>"},{"location":"blog/2024/09/30/best-of-python/#gui-development","title":"GUI Development","text":"<p>\ud83d\udd17\u00a0best-of-web-python - Web UI ( \u2b50 2.2K)  - Collection of libraries to implement web-based UIs.</p> kivy (\ud83e\udd4741 \u00b7  \u2b50 17K) - Open source UI framework written in Python, running on Windows, Linux, macOS,.. <code>MIT</code>  - [GitHub](https://github.com/kivy/kivy) (\ud83d\udc68\u200d\ud83d\udcbb 620 \u00b7 \ud83d\udd00 3K \u00b7 \ud83d\udce5 37K \u00b7 \ud83d\udce6 13K \u00b7 \ud83d\udccb 5.1K - 15% open \u00b7 \u23f1\ufe0f 27.05.2024):      <pre><code>git clone https://github.com/kivy/kivy\n</code></pre> - [PyPi](https://pypi.org/project/kivy) (\ud83d\udce5 180K / month \u00b7 \ud83d\udce6 310 \u00b7 \u23f1\ufe0f 05.01.2024):     <pre><code>pip install kivy\n</code></pre> - [Conda](https://anaconda.org/conda-forge/kivy) (\ud83d\udce5 360K \u00b7 \u23f1\ufe0f 08.04.2024):     <pre><code>conda install -c conda-forge kivy\n</code></pre> DearPyGui (\ud83e\udd4832 \u00b7  \u2b50 12K) - Dear PyGui: A fast and powerful Graphical User Interface Toolkit for.. <code>MIT</code>  - [GitHub](https://github.com/hoffstadt/DearPyGui) (\ud83d\udc68\u200d\ud83d\udcbb 65 \u00b7 \ud83d\udd00 650 \u00b7 \ud83d\udce6 3K \u00b7 \ud83d\udccb 1.3K - 21% open \u00b7 \u23f1\ufe0f 13.04.2024):      <pre><code>git clone https://github.com/hoffstadt/DearPyGui\n</code></pre> - [PyPi](https://pypi.org/project/dearpygui) (\ud83d\udce5 41K / month \u00b7 \ud83d\udce6 100 \u00b7 \u23f1\ufe0f 15.03.2024):     <pre><code>pip install dearpygui\n</code></pre> toga (\ud83e\udd4832 \u00b7  \u2b50 4.2K) - A Python native, OS native GUI toolkit. <code>BSD-3</code>  - [GitHub](https://github.com/beeware/toga) (\ud83d\udc68\u200d\ud83d\udcbb 270 \u00b7 \ud83d\udd00 650 \u00b7 \ud83d\udce5 3.4K \u00b7 \ud83d\udce6 3 \u00b7 \ud83d\udccb 910 - 20% open \u00b7 \u23f1\ufe0f 03.06.2024):      <pre><code>git clone https://github.com/beeware/toga\n</code></pre> - [PyPi](https://pypi.org/project/toga) (\ud83d\udce5 4.8K / month \u00b7 \ud83d\udce6 24 \u00b7 \u23f1\ufe0f 08.05.2024):     <pre><code>pip install toga\n</code></pre> - [npm](https://www.npmjs.com/package/@pybee/toga) (\ud83d\udce5 8 / month \u00b7 \ud83d\udce6 5 \u00b7 \u23f1\ufe0f 23.04.2017):     <pre><code>npm install @pybee/toga\n</code></pre> flexx (\ud83e\udd4926 \u00b7  \u2b50 3.2K) - Write desktop and web apps in pure Python. <code>BSD-2</code>  - [GitHub](https://github.com/flexxui/flexx) (\ud83d\udc68\u200d\ud83d\udcbb 37 \u00b7 \ud83d\udd00 260 \u00b7 \ud83d\udce6 140 \u00b7 \ud83d\udccb 460 - 19% open \u00b7 \u23f1\ufe0f 06.01.2024):      <pre><code>git clone https://github.com/flexxui/flexx\n</code></pre> - [PyPi](https://pypi.org/project/flexx) (\ud83d\udce5 810 / month \u00b7 \ud83d\udce6 7 \u00b7 \u23f1\ufe0f 12.04.2022):     <pre><code>pip install flexx\n</code></pre> - [Conda](https://anaconda.org/conda-forge/flexx) (\ud83d\udce5 110K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge flexx\n</code></pre> Show 5 hidden projects...  - PySimpleGUI (\ud83e\udd4835 \u00b7  \u2b50 13K) - PySimpleGUI is a Python package that enables Python.. <code>\u2757Unlicensed</code> - Eel (\ud83e\udd4931 \u00b7  \u2b50 6.2K \u00b7 \ud83d\udc80) - A little Python library for making simple Electron-like HTML/JS GUI apps. <code>MIT</code> - Gooey (\ud83e\udd4930 \u00b7  \u2b50 20K \u00b7 \ud83d\udc80) - Turn (almost) any Python command line program into a full GUI.. <code>MIT</code> - enaml (\ud83e\udd4925 \u00b7  \u2b50 1.5K) - Declarative User Interfaces for Python. <code>\u2757Unlicensed</code> - Phoenix (\ud83e\udd4924 \u00b7  \u2b50 2.2K) - wxPythons Project Phoenix. A new implementation of wxPython,.. <code>\u2757\ufe0fwxWindows</code> <p></p>"},{"location":"blog/2024/09/30/best-of-python/#computer-machine-vision","title":"Computer &amp; Machine Vision","text":"<p>\ud83d\udd17\u00a0best-of-ml-python - Computer Vision ( \u2b50 16K)  - Collection of computer vision and image processing..</p> Pipeless (\ud83e\udd4718 \u00b7  \u2b50 660) - An open-source framework to create and deploy computer vision.. <code>Apache-2</code>  - [GitHub](https://github.com/pipeless-ai/pipeless) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 31 \u00b7 \ud83d\udce5 990 \u00b7 \ud83d\udccb 26 - 26% open \u00b7 \u23f1\ufe0f 08.05.2024):      <pre><code>git clone https://github.com/pipeless-ai/pipeless\n</code></pre> - [PyPi](https://pypi.org/project/pipeless-ai) (\ud83d\udce5 80 / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 02.11.2023):     <pre><code>pip install pipeless-ai\n</code></pre> <p></p>"},{"location":"blog/2024/09/30/best-of-python/#machine-learning-data-engineering","title":"Machine Learning &amp; Data Engineering","text":"<p>\ud83d\udd17\u00a0best-of-ml-python ( \u2b50 16K)  - A ranked list of awesome machine learning Python libraries. Updated..</p> <p></p>"},{"location":"blog/2024/09/30/best-of-python/#text-data","title":"Text Data","text":"<p>\ud83d\udd17\u00a0best-of-ml-python - NLP ( \u2b50 16K)  - Collection of text processing and NLP libraries.</p> emoji (\ud83e\udd4737 \u00b7  \u2b50 1.8K) - emoji terminal output for Python. <code>BSD-3</code>  - [GitHub](https://github.com/carpedm20/emoji) (\ud83d\udc68\u200d\ud83d\udcbb 68 \u00b7 \ud83d\udd00 270 \u00b7 \ud83d\udce6 71K \u00b7 \ud83d\udccb 170 - 8% open \u00b7 \u23f1\ufe0f 20.05.2024):      <pre><code>git clone https://github.com/carpedm20/emoji\n</code></pre> - [PyPi](https://pypi.org/project/emoji) (\ud83d\udce5 4.1M / month \u00b7 \ud83d\udce6 980 \u00b7 \u23f1\ufe0f 20.05.2024):     <pre><code>pip install emoji\n</code></pre> - [Conda](https://anaconda.org/conda-forge/emoji) (\ud83d\udce5 75K \u00b7 \u23f1\ufe0f 20.05.2024):     <pre><code>conda install -c conda-forge emoji\n</code></pre> phonenumbers (\ud83e\udd4734 \u00b7  \u2b50 3.4K) - Python port of Googles libphonenumber. <code>Apache-2</code>  - [GitHub](https://github.com/daviddrysdale/python-phonenumbers) (\ud83d\udc68\u200d\ud83d\udcbb 31 \u00b7 \ud83d\udd00 410 \u00b7 \ud83d\udccb 180 - 5% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/daviddrysdale/python-phonenumbers\n</code></pre> - [PyPi](https://pypi.org/project/phonenumbers) (\ud83d\udce5 7M / month \u00b7 \ud83d\udce6 530 \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>pip install phonenumbers\n</code></pre> - [Conda](https://anaconda.org/conda-forge/phonenumbers) (\ud83d\udce5 920K \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>conda install -c conda-forge phonenumbers\n</code></pre> inflect (\ud83e\udd4734 \u00b7  \u2b50 930) - Correctly generate plurals, ordinals, indefinite articles; convert numbers.. <code>MIT</code>  - [GitHub](https://github.com/jaraco/inflect) (\ud83d\udc68\u200d\ud83d\udcbb 55 \u00b7 \ud83d\udd00 100 \u00b7 \ud83d\udce6 22K \u00b7 \ud83d\udccb 120 - 23% open \u00b7 \u23f1\ufe0f 24.04.2024):      <pre><code>git clone https://github.com/jaraco/inflect\n</code></pre> - [PyPi](https://pypi.org/project/inflect) (\ud83d\udce5 6M / month \u00b7 \ud83d\udce6 610 \u00b7 \u23f1\ufe0f 23.04.2024):     <pre><code>pip install inflect\n</code></pre> - [Conda](https://anaconda.org/conda-forge/inflect) (\ud83d\udce5 380K \u00b7 \u23f1\ufe0f 23.04.2024):     <pre><code>conda install -c conda-forge inflect\n</code></pre> python-slugify (\ud83e\udd4833 \u00b7  \u2b50 1.5K) - Returns unicode slugs. <code>MIT</code>  - [GitHub](https://github.com/un33k/python-slugify) (\ud83d\udc68\u200d\ud83d\udcbb 36 \u00b7 \ud83d\udd00 110 \u00b7 \ud83d\udce6 85K \u00b7 \ud83d\udccb 73 - 2% open \u00b7 \u23f1\ufe0f 01.03.2024):      <pre><code>git clone https://github.com/un33k/python-slugify\n</code></pre> - [PyPi](https://pypi.org/project/python-slugify) (\ud83d\udce5 20M / month \u00b7 \ud83d\udce6 1.4K \u00b7 \u23f1\ufe0f 08.02.2024):     <pre><code>pip install python-slugify\n</code></pre> - [Conda](https://anaconda.org/conda-forge/python-slugify) (\ud83d\udce5 2.1M \u00b7 \u23f1\ufe0f 08.02.2024):     <pre><code>conda install -c conda-forge python-slugify\n</code></pre> chardet (\ud83e\udd4831 \u00b7  \u2b50 2.1K \u00b7 \ud83d\udca4) - Python character encoding detector. <code>\u2757\ufe0fLGPL-2.1</code>  - [GitHub](https://github.com/chardet/chardet) (\ud83d\udc68\u200d\ud83d\udcbb 48 \u00b7 \ud83d\udd00 250 \u00b7 \ud83d\udce6 6 \u00b7 \ud83d\udccb 150 - 42% open \u00b7 \u23f1\ufe0f 01.08.2023):      <pre><code>git clone https://github.com/chardet/chardet\n</code></pre> - [PyPi](https://pypi.org/project/chardet) (\ud83d\udce5 68M / month \u00b7 \ud83d\udce6 5.4K \u00b7 \u23f1\ufe0f 01.08.2023):     <pre><code>pip install chardet\n</code></pre> - [Conda](https://anaconda.org/conda-forge/chardet) (\ud83d\udce5 23M \u00b7 \u23f1\ufe0f 23.09.2023):     <pre><code>conda install -c conda-forge chardet\n</code></pre> - [npm](https://www.npmjs.com/package/@pypi/chardet) (\ud83d\udce5 58 / month \u00b7 \ud83d\udce6 5 \u00b7 \u23f1\ufe0f 20.08.2017):     <pre><code>npm install @pypi/chardet\n</code></pre> pyahocorasick (\ud83e\udd4929 \u00b7  \u2b50 900) - Python module (C extension and plain python) implementing Aho-.. <code>BSD-3</code>  - [GitHub](https://github.com/WojciechMula/pyahocorasick) (\ud83d\udc68\u200d\ud83d\udcbb 30 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce5 50 \u00b7 \ud83d\udce6 2.8K \u00b7 \ud83d\udccb 130 - 18% open \u00b7 \u23f1\ufe0f 21.03.2024):      <pre><code>git clone https://github.com/WojciechMula/pyahocorasick\n</code></pre> - [PyPi](https://pypi.org/project/pyahocorasick) (\ud83d\udce5 830K / month \u00b7 \ud83d\udce6 140 \u00b7 \u23f1\ufe0f 21.03.2024):     <pre><code>pip install pyahocorasick\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pyahocorasick) (\ud83d\udce5 220K \u00b7 \u23f1\ufe0f 21.03.2024):     <pre><code>conda install -c conda-forge pyahocorasick\n</code></pre> price-parser (\ud83e\udd4921 \u00b7  \u2b50 300 \u00b7 \ud83d\udca4) - Extract price amount and currency symbol from a raw text.. <code>BSD-3</code>  - [GitHub](https://github.com/scrapinghub/price-parser) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 48 \u00b7 \ud83d\udce6 420 \u00b7 \ud83d\udccb 39 - 66% open \u00b7 \u23f1\ufe0f 17.10.2023):      <pre><code>git clone https://github.com/scrapinghub/price-parser\n</code></pre> - [PyPi](https://pypi.org/project/price-parser) (\ud83d\udce5 120K / month \u00b7 \ud83d\udce6 32 \u00b7 \u23f1\ufe0f 25.11.2020):     <pre><code>pip install price-parser\n</code></pre> Show 4 hidden projects...  - humanize (\ud83e\udd4930 \u00b7  \u2b50 1.7K \u00b7 \ud83d\udc80) - python humanize functions. <code>MIT</code> - coolname (\ud83e\udd4922 \u00b7  \u2b50 130 \u00b7 \ud83d\udc80) - Random Name and Slug Generator. <code>BSD-2</code> - awesome-slugify (\ud83e\udd4920 \u00b7  \u2b50 480 \u00b7 \ud83d\udc80) - Python flexible slugify function. <code>\u2757\ufe0fGPL-3.0</code> - millify (\ud83e\udd4916 \u00b7  \u2b50 83 \u00b7 \ud83d\udc80) - Convert long numbers into a human-readable format in Python. <code>MIT</code> <p></p>"},{"location":"blog/2024/09/30/best-of-python/#web-development","title":"Web Development","text":"<p>\ud83d\udd17\u00a0best-of-web-python ( \u2b50 2.2K)  - A ranked list of awesome python libraries for web development. Updated..</p> <p></p>"},{"location":"blog/2024/09/30/best-of-python/#database-clients","title":"Database Clients","text":"<p>Libraries for connecting to, operating, and querying databases.</p> boto3 (\ud83e\udd4748 \u00b7  \u2b50 8.8K \u00b7 \ud83d\udcc9) - AWS SDK for Python. <code>Apache-2</code>  - [GitHub](https://github.com/boto/boto3) (\ud83d\udc68\u200d\ud83d\udcbb 160 \u00b7 \ud83d\udd00 1.8K \u00b7 \ud83d\udce6 440K \u00b7 \ud83d\udccb 3.3K - 5% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/boto/boto3\n</code></pre> - [PyPi](https://pypi.org/project/boto3) (\ud83d\udce5 1.3B / month \u00b7 \ud83d\udce6 11K \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>pip install boto3\n</code></pre> - [Conda](https://anaconda.org/conda-forge/boto3) (\ud83d\udce5 20M \u00b7 \u23f1\ufe0f 06.06.2024):     <pre><code>conda install -c conda-forge boto3\n</code></pre> SQLAlchemy (\ud83e\udd4746 \u00b7  \u2b50 9K) - The Database Toolkit for Python. <code>MIT</code>  - [GitHub](https://github.com/sqlalchemy/sqlalchemy) (\ud83d\udc68\u200d\ud83d\udcbb 710 \u00b7 \ud83d\udd00 1.3K \u00b7 \ud83d\udce5 48K \u00b7 \ud83d\udce6 790K \u00b7 \ud83d\udccb 7.8K - 2% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/sqlalchemy/sqlalchemy\n</code></pre> - [PyPi](https://pypi.org/project/SQLAlchemy) (\ud83d\udce5 120M / month \u00b7 \ud83d\udce6 11K \u00b7 \u23f1\ufe0f 05.05.2024):     <pre><code>pip install SQLAlchemy\n</code></pre> - [Conda](https://anaconda.org/conda-forge/sqlalchemy) (\ud83d\udce5 15M \u00b7 \u23f1\ufe0f 06.05.2024):     <pre><code>conda install -c conda-forge sqlalchemy\n</code></pre> azure-storage-blob (\ud83e\udd4743 \u00b7  \u2b50 4.3K) - This repository is for active development of the Azure SDK.. <code>MIT</code>  - [GitHub](https://github.com/Azure/azure-sdk-for-python) (\ud83d\udc68\u200d\ud83d\udcbb 720 \u00b7 \ud83d\udd00 2.7K \u00b7 \ud83d\udce6 2.5K \u00b7 \ud83d\udccb 9.8K - 10% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/Azure/azure-sdk-for-python\n</code></pre> - [PyPi](https://pypi.org/project/azure-storage-blob) (\ud83d\udce5 52M / month \u00b7 \ud83d\udce6 880 \u00b7 \u23f1\ufe0f 08.05.2024):     <pre><code>pip install azure-storage-blob\n</code></pre> - [Conda](https://anaconda.org/conda-forge/azure-storage-blob) (\ud83d\udce5 1.1M \u00b7 \u23f1\ufe0f 09.05.2024):     <pre><code>conda install -c conda-forge azure-storage-blob\n</code></pre> redis (\ud83e\udd4742 \u00b7  \u2b50 12K) - Redis Python client. <code>MIT</code>  - [GitHub](https://github.com/redis/redis-py) (\ud83d\udc68\u200d\ud83d\udcbb 440 \u00b7 \ud83d\udd00 2.5K \u00b7 \ud83d\udccb 1.7K - 13% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/redis/redis-py\n</code></pre> - [PyPi](https://pypi.org/project/redis) (\ud83d\udce5 41M / month \u00b7 \ud83d\udce6 5.5K \u00b7 \u23f1\ufe0f 06.06.2024):     <pre><code>pip install redis\n</code></pre> - [Conda](https://anaconda.org/conda-forge/redis-py) (\ud83d\udce5 1.2M \u00b7 \u23f1\ufe0f 06.06.2024):     <pre><code>conda install -c conda-forge redis-py\n</code></pre> google-cloud-storage (\ud83e\udd4742 \u00b7  \u2b50 4.7K) - Google Cloud Client Library for Python. <code>Apache-2</code>  - [GitHub](https://github.com/googleapis/google-cloud-python) (\ud83d\udc68\u200d\ud83d\udcbb 520 \u00b7 \ud83d\udd00 1.5K \u00b7 \ud83d\udccb 3.8K - 2% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/googleapis/google-cloud-python\n</code></pre> - [PyPi](https://pypi.org/project/google-cloud-storage) (\ud83d\udce5 75M / month \u00b7 \ud83d\udce6 1.6K \u00b7 \u23f1\ufe0f 18.03.2024):     <pre><code>pip install google-cloud-storage\n</code></pre> - [Conda](https://anaconda.org/conda-forge/google-cloud-storage) (\ud83d\udce5 4.5M \u00b7 \u23f1\ufe0f 19.03.2024):     <pre><code>conda install -c conda-forge google-cloud-storage\n</code></pre> elasticsearch (\ud83e\udd4742 \u00b7  \u2b50 4.2K) - Official Python client for Elasticsearch. <code>Apache-2</code>  - [GitHub](https://github.com/elastic/elasticsearch-py) (\ud83d\udc68\u200d\ud83d\udcbb 200 \u00b7 \ud83d\udd00 1.2K \u00b7 \ud83d\udce5 3.9K \u00b7 \ud83d\udce6 49K \u00b7 \ud83d\udccb 1.1K - 5% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/elastic/elasticsearch-py\n</code></pre> - [PyPi](https://pypi.org/project/elasticsearch) (\ud83d\udce5 28M / month \u00b7 \ud83d\udce6 1.4K \u00b7 \u23f1\ufe0f 06.06.2024):     <pre><code>pip install elasticsearch\n</code></pre> - [Conda](https://anaconda.org/conda-forge/elasticsearch) (\ud83d\udce5 1M \u00b7 \u23f1\ufe0f 25.05.2024):     <pre><code>conda install -c conda-forge elasticsearch\n</code></pre> peewee (\ud83e\udd4741 \u00b7  \u2b50 11K) - a small, expressive orm -- supports postgresql, mysql, sqlite and.. <code>MIT</code>  - [GitHub](https://github.com/coleifer/peewee) (\ud83d\udc68\u200d\ud83d\udcbb 160 \u00b7 \ud83d\udd00 1.4K \u00b7 \ud83d\udce6 30K \u00b7 \ud83d\udccb 2.4K - 0% open \u00b7 \u23f1\ufe0f 22.05.2024):      <pre><code>git clone https://github.com/coleifer/peewee\n</code></pre> - [PyPi](https://pypi.org/project/peewee) (\ud83d\udce5 2.6M / month \u00b7 \ud83d\udce6 900 \u00b7 \u23f1\ufe0f 10.05.2024):     <pre><code>pip install peewee\n</code></pre> - [Conda](https://anaconda.org/conda-forge/peewee) (\ud83d\udce5 670K \u00b7 \u23f1\ufe0f 18.04.2024):     <pre><code>conda install -c conda-forge peewee\n</code></pre> PyMySQL (\ud83e\udd4840 \u00b7  \u2b50 7.6K) - MySQL client library for Python. <code>MIT</code>  - [GitHub](https://github.com/PyMySQL/PyMySQL) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 1.4K \u00b7 \ud83d\udce6 220K \u00b7 \ud83d\udccb 660 - 2% open \u00b7 \u23f1\ufe0f 21.05.2024):      <pre><code>git clone https://github.com/PyMySQL/PyMySQL\n</code></pre> - [PyPi](https://pypi.org/project/PyMySQL) (\ud83d\udce5 50M / month \u00b7 \ud83d\udce6 7 \u00b7 \u23f1\ufe0f 21.05.2024):     <pre><code>pip install PyMySQL\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pymysql) (\ud83d\udce5 1.4M \u00b7 \u23f1\ufe0f 26.06.2023):     <pre><code>conda install -c conda-forge pymysql\n</code></pre> python-bigquery (\ud83e\udd4839 \u00b7  \u2b50 720) - Google BigQuery API client library. <code>Apache-2</code>  - [GitHub](https://github.com/googleapis/python-bigquery) (\ud83d\udc68\u200d\ud83d\udcbb 160 \u00b7 \ud83d\udd00 280 \u00b7 \ud83d\udce6 30K \u00b7 \ud83d\udccb 660 - 7% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/googleapis/python-bigquery\n</code></pre> - [PyPi](https://pypi.org/project/google-cloud-bigquery) (\ud83d\udce5 48M / month \u00b7 \ud83d\udce6 880 \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>pip install google-cloud-bigquery\n</code></pre> - [Conda](https://anaconda.org/conda-forge/google-cloud-bigquery) (\ud83d\udce5 2.9M \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>conda install -c conda-forge google-cloud-bigquery\n</code></pre> Ibis (\ud83e\udd4838 \u00b7  \u2b50 4.4K) - the portable Python dataframe library. <code>Apache-2</code>  - [GitHub](https://github.com/ibis-project/ibis) (\ud83d\udc68\u200d\ud83d\udcbb 310 \u00b7 \ud83d\udd00 540 \u00b7 \ud83d\udce5 150 \u00b7 \ud83d\udce6 1.6K \u00b7 \ud83d\udccb 2.9K - 9% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/ibis-project/ibis\n</code></pre> - [PyPi](https://pypi.org/project/ibis-framework) (\ud83d\udce5 190K / month \u00b7 \ud83d\udce6 67 \u00b7 \u23f1\ufe0f 02.06.2024):     <pre><code>pip install ibis-framework\n</code></pre> - [Conda](https://anaconda.org/conda-forge/ibis-framework) (\ud83d\udce5 340K \u00b7 \u23f1\ufe0f 13.05.2024):     <pre><code>conda install -c conda-forge ibis-framework\n</code></pre> MongoEngine (\ud83e\udd4838 \u00b7  \u2b50 4.2K) - A Python Object-Document-Mapper for working with MongoDB. <code>MIT</code>  - [GitHub](https://github.com/MongoEngine/mongoengine) (\ud83d\udc68\u200d\ud83d\udcbb 390 \u00b7 \ud83d\udd00 1.2K \u00b7 \ud83d\udce6 24K \u00b7 \ud83d\udccb 1.7K - 22% open \u00b7 \u23f1\ufe0f 10.03.2024):      <pre><code>git clone https://github.com/MongoEngine/mongoengine\n</code></pre> - [PyPi](https://pypi.org/project/mongoengine) (\ud83d\udce5 1.1M / month \u00b7 \ud83d\udce6 390 \u00b7 \u23f1\ufe0f 07.03.2024):     <pre><code>pip install mongoengine\n</code></pre> - [Conda](https://anaconda.org/conda-forge/mongoengine) (\ud83d\udce5 250K \u00b7 \u23f1\ufe0f 28.09.2023):     <pre><code>conda install -c conda-forge mongoengine\n</code></pre> pymongo (\ud83e\udd4838 \u00b7  \u2b50 4.1K) - PyMongo - the Official MongoDB Python driver. <code>Apache-2</code>  - [GitHub](https://github.com/mongodb/mongo-python-driver) (\ud83d\udc68\u200d\ud83d\udcbb 210 \u00b7 \ud83d\udd00 1.1K \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/mongodb/mongo-python-driver\n</code></pre> - [PyPi](https://pypi.org/project/pymongo) (\ud83d\udce5 29M / month \u00b7 \ud83d\udce6 4K \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>pip install pymongo\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pymongo) (\ud83d\udce5 1.8M \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>conda install -c conda-forge pymongo\n</code></pre> AWS Data Wrangler (\ud83e\udd4838 \u00b7  \u2b50 3.8K) - pandas on AWS - Easy integration with Athena, Glue,.. <code>Apache-2</code> <code></code>  - [GitHub](https://github.com/aws/aws-sdk-pandas) (\ud83d\udc68\u200d\ud83d\udcbb 150 \u00b7 \ud83d\udd00 670 \u00b7 \ud83d\udce5 240K \u00b7 \ud83d\udce6 1.6K \u00b7 \ud83d\udccb 1.1K - 3% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/awslabs/aws-data-wrangler\n</code></pre> - [PyPi](https://pypi.org/project/awswrangler) (\ud83d\udce5 46M / month \u00b7 \ud83d\udce6 97 \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>pip install awswrangler\n</code></pre> - [Conda](https://anaconda.org/conda-forge/awswrangler) (\ud83d\udce5 500K \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>conda install -c conda-forge awswrangler\n</code></pre> sqlmodel (\ud83e\udd4837 \u00b7  \u2b50 13K \u00b7 \ud83d\udcc8) - SQL databases in Python, designed for simplicity, compatibility,.. <code>MIT</code> <code>pydantic</code>  - [GitHub](https://github.com/tiangolo/sqlmodel) (\ud83d\udc68\u200d\ud83d\udcbb 77 \u00b7 \ud83d\udd00 610 \u00b7 \ud83d\udce6 13K \u00b7 \ud83d\udccb 390 - 60% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/tiangolo/sqlmodel\n</code></pre> - [PyPi](https://pypi.org/project/sqlmodel) (\ud83d\udce5 1.4M / month \u00b7 \ud83d\udce6 360 \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>pip install sqlmodel\n</code></pre> - [Conda](https://anaconda.org/conda-forge/sqlmodel) (\ud83d\udce5 31K \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>conda install -c conda-forge sqlmodel\n</code></pre> kafka-python (\ud83e\udd4837 \u00b7  \u2b50 5.5K) - Python client for Apache Kafka. <code>Apache-2</code>  - [GitHub](https://github.com/dpkp/kafka-python) (\ud83d\udc68\u200d\ud83d\udcbb 220 \u00b7 \ud83d\udd00 1.4K \u00b7 \ud83d\udce5 1.8K \u00b7 \ud83d\udce6 26K \u00b7 \ud83d\udccb 1.5K - 20% open \u00b7 \u23f1\ufe0f 08.03.2024):      <pre><code>git clone https://github.com/dpkp/kafka-python\n</code></pre> - [PyPi](https://pypi.org/project/kafka-python) (\ud83d\udce5 13M / month \u00b7 \ud83d\udce6 690 \u00b7 \u23f1\ufe0f 30.09.2020):     <pre><code>pip install kafka-python\n</code></pre> - [Conda](https://anaconda.org/conda-forge/kafka-python) (\ud83d\udce5 440K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge kafka-python\n</code></pre> Elasticsearch DSL (\ud83e\udd4837 \u00b7  \u2b50 3.8K) - High level Python client for Elasticsearch. <code>Apache-2</code>  - [GitHub](https://github.com/elastic/elasticsearch-dsl-py) (\ud83d\udc68\u200d\ud83d\udcbb 140 \u00b7 \ud83d\udd00 800 \u00b7 \ud83d\udce5 200 \u00b7 \ud83d\udce6 10K \u00b7 \ud83d\udccb 1.3K - 3% open \u00b7 \u23f1\ufe0f 30.05.2024):      <pre><code>git clone https://github.com/elastic/elasticsearch-dsl-py\n</code></pre> - [PyPi](https://pypi.org/project/elasticsearch-dsl) (\ud83d\udce5 4.5M / month \u00b7 \ud83d\udce6 340 \u00b7 \u23f1\ufe0f 30.04.2024):     <pre><code>pip install elasticsearch-dsl\n</code></pre> - [Conda](https://anaconda.org/anaconda/elasticsearch-dsl):     <pre><code>conda install -c anaconda elasticsearch-dsl\n</code></pre> alembic (\ud83e\udd4836 \u00b7  \u2b50 2.5K \u00b7 \ud83d\udcc9) - A database migrations tool for SQLAlchemy. <code>MIT</code>  - [GitHub](https://github.com/sqlalchemy/alembic) (\ud83d\udc68\u200d\ud83d\udcbb 180 \u00b7 \ud83d\udd00 230 \u00b7 \ud83d\udce6 220K \u00b7 \ud83d\udccb 1.1K - 10% open \u00b7 \u23f1\ufe0f 24.04.2024):      <pre><code>git clone https://github.com/sqlalchemy/alembic\n</code></pre> - [PyPi](https://pypi.org/project/alembic) (\ud83d\udce5 41M / month \u00b7 \ud83d\udce6 1.5K \u00b7 \u23f1\ufe0f 20.12.2023):     <pre><code>pip install alembic\n</code></pre> - [Conda](https://anaconda.org/conda-forge/alembic) (\ud83d\udce5 4.7M \u00b7 \u23f1\ufe0f 13.01.2024):     <pre><code>conda install -c conda-forge alembic\n</code></pre> SQLAlchemy-Utils (\ud83e\udd4836 \u00b7  \u2b50 1.2K) - Various utility functions and datatypes for SQLAlchemy. <code>BSD-3</code>  - [GitHub](https://github.com/kvesteri/sqlalchemy-utils) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 320 \u00b7 \ud83d\udce6 30K \u00b7 \ud83d\udccb 440 - 45% open \u00b7 \u23f1\ufe0f 22.03.2024):      <pre><code>git clone https://github.com/kvesteri/sqlalchemy-utils\n</code></pre> - [PyPi](https://pypi.org/project/sqlalchemy-utils) (\ud83d\udce5 7.3M / month \u00b7 \ud83d\udce6 860 \u00b7 \u23f1\ufe0f 24.03.2024):     <pre><code>pip install sqlalchemy-utils\n</code></pre> - [Conda](https://anaconda.org/conda-forge/sqlalchemy-utils) (\ud83d\udce5 580K \u00b7 \u23f1\ufe0f 24.03.2024):     <pre><code>conda install -c conda-forge sqlalchemy-utils\n</code></pre> s3fs (\ud83e\udd4836 \u00b7  \u2b50 830) - S3 Filesystem. <code>BSD-3</code>  - [GitHub](https://github.com/fsspec/s3fs) (\ud83d\udc68\u200d\ud83d\udcbb 140 \u00b7 \ud83d\udd00 270 \u00b7 \ud83d\udce6 18K \u00b7 \ud83d\udccb 470 - 29% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/fsspec/s3fs\n</code></pre> - [PyPi](https://pypi.org/project/s3fs) (\ud83d\udce5 260M / month \u00b7 \ud83d\udce6 950 \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>pip install s3fs\n</code></pre> - [Conda](https://anaconda.org/conda-forge/s3fs) (\ud83d\udce5 6.9M \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>conda install -c conda-forge s3fs\n</code></pre> tortoise-orm (\ud83e\udd4835 \u00b7  \u2b50 4.3K) - Familiar asyncio ORM for python, built with relations in mind. <code>Apache-2</code>  - [GitHub](https://github.com/tortoise/tortoise-orm) (\ud83d\udc68\u200d\ud83d\udcbb 130 \u00b7 \ud83d\udd00 350 \u00b7 \ud83d\udce5 13 \u00b7 \ud83d\udce6 7.8K \u00b7 \ud83d\udccb 1.1K - 50% open \u00b7 \u23f1\ufe0f 03.06.2024):      <pre><code>git clone https://github.com/tortoise/tortoise-orm\n</code></pre> - [PyPi](https://pypi.org/project/tortoise-orm) (\ud83d\udce5 140K / month \u00b7 \ud83d\udce6 160 \u00b7 \u23f1\ufe0f 01.06.2024):     <pre><code>pip install tortoise-orm\n</code></pre> - [Conda](https://anaconda.org/conda-forge/tortoise-orm):     <pre><code>conda install -c conda-forge tortoise-orm\n</code></pre> Motor (\ud83e\udd4835 \u00b7  \u2b50 2.3K) - Motor - the async Python driver for MongoDB and Tornado or asyncio. <code>Apache-2</code>  - [GitHub](https://github.com/mongodb/motor) (\ud83d\udc68\u200d\ud83d\udcbb 52 \u00b7 \ud83d\udd00 210 \u00b7 \ud83d\udce6 91K \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/mongodb/motor\n</code></pre> - [PyPi](https://pypi.org/project/motor) (\ud83d\udce5 2M / month \u00b7 \ud83d\udce6 560 \u00b7 \u23f1\ufe0f 26.03.2024):     <pre><code>pip install motor\n</code></pre> - [Conda](https://anaconda.org/conda-forge/motor) (\ud83d\udce5 68K \u00b7 \u23f1\ufe0f 26.03.2024):     <pre><code>conda install -c conda-forge motor\n</code></pre> s3transfer (\ud83e\udd4835 \u00b7  \u2b50 200) - Amazon S3 Transfer Manager for Python. <code>Apache-2</code>  - [GitHub](https://github.com/boto/s3transfer) (\ud83d\udc68\u200d\ud83d\udcbb 39 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce6 290K \u00b7 \ud83d\udccb 87 - 58% open \u00b7 \u23f1\ufe0f 23.05.2024):      <pre><code>git clone https://github.com/boto/s3transfer\n</code></pre> - [PyPi](https://pypi.org/project/s3transfer) (\ud83d\udce5 340M / month \u00b7 \ud83d\udce6 670 \u00b7 \u23f1\ufe0f 14.03.2024):     <pre><code>pip install s3transfer\n</code></pre> - [Conda](https://anaconda.org/conda-forge/s3transfer):     <pre><code>conda install -c conda-forge s3transfer\n</code></pre> Prometheus Client (\ud83e\udd4834 \u00b7  \u2b50 3.8K) - Prometheus instrumentation library for Python.. <code>Apache-2</code>  - [GitHub](https://github.com/prometheus/client_python) (\ud83d\udc68\u200d\ud83d\udcbb 150 \u00b7 \ud83d\udd00 790 \u00b7 \ud83d\udccb 550 - 19% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/prometheus/client_python\n</code></pre> - [PyPi](https://pypi.org/project/prometheus_client) (\ud83d\udce5 36M / month \u00b7 \ud83d\udce6 1.5K \u00b7 \u23f1\ufe0f 14.02.2024):     <pre><code>pip install prometheus_client\n</code></pre> - [Conda](https://anaconda.org/conda-forge/prometheus_client) (\ud83d\udce5 17M \u00b7 \u23f1\ufe0f 14.02.2024):     <pre><code>conda install -c conda-forge prometheus_client\n</code></pre> Databases (\ud83e\udd4834 \u00b7  \u2b50 3.7K) - Async database support for Python. <code>BSD-3</code>  - [GitHub](https://github.com/encode/databases) (\ud83d\udc68\u200d\ud83d\udcbb 59 \u00b7 \ud83d\udd00 260 \u00b7 \ud83d\udce6 23K \u00b7 \ud83d\udccb 330 - 39% open \u00b7 \u23f1\ufe0f 01.03.2024):      <pre><code>git clone https://github.com/encode/databases\n</code></pre> - [PyPi](https://pypi.org/project/databases) (\ud83d\udce5 720K / month \u00b7 \ud83d\udce6 160 \u00b7 \u23f1\ufe0f 01.03.2024):     <pre><code>pip install databases\n</code></pre> - [Conda](https://anaconda.org/conda-forge/databases):     <pre><code>conda install -c conda-forge databases\n</code></pre> mysqlclient (\ud83e\udd4834 \u00b7  \u2b50 2.4K) - MySQL database connector for Python (with Python 3 support). <code>\u2757\ufe0fGPL-2.0</code>  - [GitHub](https://github.com/PyMySQL/mysqlclient) (\ud83d\udc68\u200d\ud83d\udcbb 84 \u00b7 \ud83d\udd00 430 \u00b7 \ud83d\udce5 5.3K \u00b7 \ud83d\udce6 170K \u00b7 \ud83d\udccb 340 - 3% open \u00b7 \u23f1\ufe0f 08.02.2024):      <pre><code>git clone https://github.com/PyMySQL/mysqlclient\n</code></pre> - [PyPi](https://pypi.org/project/mysqlclient) (\ud83d\udce5 8.3M / month \u00b7 \ud83d\udce6 800 \u00b7 \u23f1\ufe0f 08.02.2024):     <pre><code>pip install mysqlclient\n</code></pre> - [Conda](https://anaconda.org/conda-forge/mysqlclient) (\ud83d\udce5 370K \u00b7 \u23f1\ufe0f 10.03.2024):     <pre><code>conda install -c conda-forge mysqlclient\n</code></pre> Cassandra Driver (\ud83e\udd4834 \u00b7  \u2b50 1.4K) - DataStax Python Driver for Apache Cassandra. <code>Apache-2</code>  - [GitHub](https://github.com/datastax/python-driver) (\ud83d\udc68\u200d\ud83d\udcbb 200 \u00b7 \ud83d\udd00 540 \u00b7 \ud83d\udce6 7K \u00b7 \u23f1\ufe0f 31.05.2024):      <pre><code>git clone https://github.com/datastax/python-driver\n</code></pre> - [PyPi](https://pypi.org/project/cassandra-driver) (\ud83d\udce5 2.1M / month \u00b7 \ud83d\udce6 200 \u00b7 \u23f1\ufe0f 20.03.2024):     <pre><code>pip install cassandra-driver\n</code></pre> - [Conda](https://anaconda.org/conda-forge/cassandra-driver) (\ud83d\udce5 220K \u00b7 \u23f1\ufe0f 20.03.2024):     <pre><code>conda install -c conda-forge cassandra-driver\n</code></pre> PyPika (\ud83e\udd4933 \u00b7  \u2b50 2.4K) - PyPika is a python SQL query builder that exposes the full richness.. <code>Apache-2</code>  - [GitHub](https://github.com/kayak/pypika) (\ud83d\udc68\u200d\ud83d\udcbb 100 \u00b7 \ud83d\udd00 290 \u00b7 \ud83d\udce6 22K \u00b7 \ud83d\udccb 470 - 44% open \u00b7 \u23f1\ufe0f 26.04.2024):      <pre><code>git clone https://github.com/kayak/pypika\n</code></pre> - [PyPi](https://pypi.org/project/pypika) (\ud83d\udce5 3.1M / month \u00b7 \ud83d\udce6 160 \u00b7 \u23f1\ufe0f 15.03.2022):     <pre><code>pip install pypika\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pypika) (\ud83d\udce5 16K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge pypika\n</code></pre> neo4j-driver (\ud83e\udd4933 \u00b7  \u2b50 870) - Neo4j Bolt driver for Python. <code>Apache-2</code>  - [GitHub](https://github.com/neo4j/neo4j-python-driver) (\ud83d\udc68\u200d\ud83d\udcbb 43 \u00b7 \ud83d\udd00 190 \u00b7 \ud83d\udce6 9.5K \u00b7 \ud83d\udccb 240 - 1% open \u00b7 \u23f1\ufe0f 15.05.2024):      <pre><code>git clone https://github.com/neo4j/neo4j-python-driver\n</code></pre> - [PyPi](https://pypi.org/project/neo4j-driver) (\ud83d\udce5 130K / month \u00b7 \ud83d\udce6 61 \u00b7 \u23f1\ufe0f 26.04.2024):     <pre><code>pip install neo4j-driver\n</code></pre> - [Conda](https://anaconda.org/conda-forge/neo4j-python-driver):     <pre><code>conda install -c conda-forge neo4j-python-driver\n</code></pre> minio (\ud83e\udd4933 \u00b7  \u2b50 790) - MinIO Client SDK for Python. <code>Apache-2</code>  - [GitHub](https://github.com/minio/minio-py) (\ud83d\udc68\u200d\ud83d\udcbb 130 \u00b7 \ud83d\udd00 310 \u00b7 \ud83d\udce6 7.7K \u00b7 \ud83d\udccb 560 - 1% open \u00b7 \u23f1\ufe0f 30.04.2024):      <pre><code>git clone https://github.com/minio/minio-py\n</code></pre> - [PyPi](https://pypi.org/project/minio) (\ud83d\udce5 2.7M / month \u00b7 \ud83d\udce6 510 \u00b7 \u23f1\ufe0f 30.04.2024):     <pre><code>pip install minio\n</code></pre> - [Conda](https://anaconda.org/conda-forge/minio) (\ud83d\udce5 170K \u00b7 \u23f1\ufe0f 01.05.2024):     <pre><code>conda install -c conda-forge minio\n</code></pre> pandas-gbq (\ud83e\udd4933 \u00b7  \u2b50 420) - Google BigQuery connector for pandas. <code>BSD-3</code>  - [GitHub](https://github.com/googleapis/python-bigquery-pandas) (\ud83d\udc68\u200d\ud83d\udcbb 51 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce5 350 \u00b7 \ud83d\udce6 10K \u00b7 \ud83d\udccb 350 - 10% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/googleapis/python-bigquery-pandas\n</code></pre> - [PyPi](https://pypi.org/project/pandas-gbq) (\ud83d\udce5 16M / month \u00b7 \ud83d\udce6 180 \u00b7 \u23f1\ufe0f 20.05.2024):     <pre><code>pip install pandas-gbq\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pandas-gbq) (\ud83d\udce5 1.9M \u00b7 \u23f1\ufe0f 30.05.2024):     <pre><code>conda install -c conda-forge pandas-gbq\n</code></pre> Pony (\ud83e\udd4932 \u00b7  \u2b50 3.6K \u00b7 \ud83d\udca4) - Pony Object Relational Mapper. <code>Apache-2</code>  - [GitHub](https://github.com/ponyorm/pony) (\ud83d\udc68\u200d\ud83d\udcbb 30 \u00b7 \ud83d\udd00 240 \u00b7 \ud83d\udce5 110 \u00b7 \ud83d\udce6 4K \u00b7 \ud83d\udccb 650 - 48% open \u00b7 \u23f1\ufe0f 25.09.2023):      <pre><code>git clone https://github.com/ponyorm/pony\n</code></pre> - [PyPi](https://pypi.org/project/pony) (\ud83d\udce5 180K / month \u00b7 \ud83d\udce6 160 \u00b7 \u23f1\ufe0f 25.09.2023):     <pre><code>pip install pony\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pony) (\ud83d\udce5 100K \u00b7 \u23f1\ufe0f 25.09.2023):     <pre><code>conda install -c conda-forge pony\n</code></pre> PynamoDB (\ud83e\udd4932 \u00b7  \u2b50 2.4K) - A pythonic interface to Amazons DynamoDB. <code>MIT</code>  - [GitHub](https://github.com/pynamodb/PynamoDB) (\ud83d\udc68\u200d\ud83d\udcbb 110 \u00b7 \ud83d\udd00 430 \u00b7 \ud83d\udce6 1.7K \u00b7 \ud83d\udccb 660 - 42% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/pynamodb/PynamoDB\n</code></pre> - [PyPi](https://pypi.org/project/pynamodb) (\ud83d\udce5 2.3M / month \u00b7 \ud83d\udce6 80 \u00b7 \u23f1\ufe0f 29.05.2024):     <pre><code>pip install pynamodb\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pynamodb) (\ud83d\udce5 660K \u00b7 \u23f1\ufe0f 31.05.2024):     <pre><code>conda install -c conda-forge pynamodb\n</code></pre> libcloud (\ud83e\udd4932 \u00b7  \u2b50 2K) - Apache Libcloud is a Python library which hides differences between.. <code>Apache-2</code>  - [GitHub](https://github.com/apache/libcloud) (\ud83d\udc68\u200d\ud83d\udcbb 480 \u00b7 \ud83d\udd00 930 \u00b7 \ud83d\udccb 210 - 40% open \u00b7 \u23f1\ufe0f 27.04.2024):      <pre><code>git clone https://github.com/apache/libcloud\n</code></pre> - [PyPi](https://pypi.org/project/apache-libcloud) (\ud83d\udce5 180K / month \u00b7 \ud83d\udce6 160 \u00b7 \u23f1\ufe0f 10.08.2023):     <pre><code>pip install apache-libcloud\n</code></pre> pygsheets (\ud83e\udd4932 \u00b7  \u2b50 1.5K) - Google Sheets Python API v4. <code>MIT</code>  - [GitHub](https://github.com/nithinmurali/pygsheets) (\ud83d\udc68\u200d\ud83d\udcbb 91 \u00b7 \ud83d\udd00 220 \u00b7 \ud83d\udce6 2.5K \u00b7 \ud83d\udccb 400 - 15% open \u00b7 \u23f1\ufe0f 14.01.2024):      <pre><code>git clone https://github.com/nithinmurali/pygsheets\n</code></pre> - [PyPi](https://pypi.org/project/pygsheets) (\ud83d\udce5 1.8M / month \u00b7 \ud83d\udce6 76 \u00b7 \u23f1\ufe0f 30.11.2022):     <pre><code>pip install pygsheets\n</code></pre> Records (\ud83e\udd4931 \u00b7  \u2b50 7.1K) - SQL for Humans. <code>ISC</code>  - [GitHub](https://github.com/kennethreitz/records) (\ud83d\udc68\u200d\ud83d\udcbb 50 \u00b7 \ud83d\udd00 570 \u00b7 \ud83d\udce6 1.2K \u00b7 \ud83d\udccb 130 - 29% open \u00b7 \u23f1\ufe0f 30.03.2024):      <pre><code>git clone https://github.com/kennethreitz/records\n</code></pre> - [PyPi](https://pypi.org/project/records) (\ud83d\udce5 190K / month \u00b7 \ud83d\udce6 46 \u00b7 \u23f1\ufe0f 29.03.2024):     <pre><code>pip install records\n</code></pre> - [Conda](https://anaconda.org/conda-forge/records):     <pre><code>conda install -c conda-forge records\n</code></pre> influxdb (\ud83e\udd4931 \u00b7  \u2b50 1.7K) - Python client for InfluxDB. <code>MIT</code>  - [GitHub](https://github.com/influxdata/influxdb-python) (\ud83d\udc68\u200d\ud83d\udcbb 140 \u00b7 \ud83d\udd00 520 \u00b7 \ud83d\udccb 550 - 30% open \u00b7 \u23f1\ufe0f 17.04.2024):      <pre><code>git clone https://github.com/influxdata/influxdb-python\n</code></pre> - [PyPi](https://pypi.org/project/influxdb) (\ud83d\udce5 2.3M / month \u00b7 \ud83d\udce6 350 \u00b7 \u23f1\ufe0f 18.04.2024):     <pre><code>pip install influxdb\n</code></pre> - [Conda](https://anaconda.org/conda-forge/influxdb) (\ud83d\udce5 150K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge influxdb\n</code></pre> cx-Oracle (\ud83e\udd4931 \u00b7  \u2b50 880) - Python interface to Oracle Database now superseded by python-oracledb. <code>BSD-3</code>  - [GitHub](https://github.com/oracle/python-cx_Oracle) (\ud83d\udc68\u200d\ud83d\udcbb 17 \u00b7 \ud83d\udd00 360 \u00b7 \ud83d\udce6 8.3K \u00b7 \ud83d\udccb 650 - 4% open \u00b7 \u23f1\ufe0f 31.05.2024):      <pre><code>git clone https://github.com/oracle/python-cx_Oracle\n</code></pre> - [PyPi](https://pypi.org/project/cx-Oracle) (\ud83d\udce5 3.9M / month \u00b7 \ud83d\udce6 420 \u00b7 \u23f1\ufe0f 20.07.2023):     <pre><code>pip install cx-Oracle\n</code></pre> - [Conda](https://anaconda.org/conda-forge/cx_oracle):     <pre><code>conda install -c conda-forge cx_oracle\n</code></pre> dataset (\ud83e\udd4930 \u00b7  \u2b50 4.7K \u00b7 \ud83d\udca4) - Easy-to-use data handling for SQL data stores with support for.. <code>MIT</code>  - [GitHub](https://github.com/pudo/dataset) (\ud83d\udc68\u200d\ud83d\udcbb 78 \u00b7 \ud83d\udd00 300 \u00b7 \ud83d\udce6 3.9K \u00b7 \ud83d\udccb 300 - 12% open \u00b7 \u23f1\ufe0f 12.07.2023):      <pre><code>git clone https://github.com/pudo/dataset\n</code></pre> - [PyPi](https://pypi.org/project/dataset) (\ud83d\udce5 120K / month \u00b7 \ud83d\udce6 130 \u00b7 \u23f1\ufe0f 12.07.2023):     <pre><code>pip install dataset\n</code></pre> - [Conda](https://anaconda.org/conda-forge/dataset) (\ud83d\udce5 8.9K \u00b7 \u23f1\ufe0f 12.07.2023):     <pre><code>conda install -c conda-forge dataset\n</code></pre> confluent-kafka-python (\ud83e\udd4929 \u00b7  \u2b50 3.6K) - Confluents Kafka Python Client. <code>Apache-2</code>  - [GitHub](https://github.com/confluentinc/confluent-kafka-python) (\ud83d\udc68\u200d\ud83d\udcbb 100 \u00b7 \ud83d\udd00 880 \u00b7 \ud83d\udce6 10K):      <pre><code>git clone https://github.com/confluentinc/confluent-kafka-python\n</code></pre> - [PyPi](https://pypi.org/project/confluent-kafka) (\ud83d\udce5 15M / month \u00b7 \ud83d\udce6 530 \u00b7 \u23f1\ufe0f 07.05.2024):     <pre><code>pip install confluent-kafka\n</code></pre> - [Conda](https://anaconda.org/conda-forge/python-confluent-kafka) (\ud83d\udce5 890K \u00b7 \u23f1\ufe0f 21.05.2024):     <pre><code>conda install -c conda-forge python-confluent-kafka\n</code></pre> piccolos (\ud83e\udd4929 \u00b7  \u2b50 1.3K) - A fast, user friendly ORM and query builder which supports asyncio. <code>MIT</code>  - [GitHub](https://github.com/piccolo-orm/piccolo) (\ud83d\udc68\u200d\ud83d\udcbb 43 \u00b7 \ud83d\udd00 85 \u00b7 \ud83d\udce6 360 \u00b7 \ud83d\udccb 390 - 32% open \u00b7 \u23f1\ufe0f 03.06.2024):      <pre><code>git clone https://github.com/piccolo-orm/piccolo\n</code></pre> - [PyPi](https://pypi.org/project/piccolo) (\ud83d\udce5 19K / month \u00b7 \ud83d\udce6 16 \u00b7 \u23f1\ufe0f 31.05.2024):     <pre><code>pip install piccolo\n</code></pre> pysolr (\ud83e\udd4929 \u00b7  \u2b50 660) - Pysolr Python Solr client. <code>BSD-3</code>  - [GitHub](https://github.com/django-haystack/pysolr) (\ud83d\udc68\u200d\ud83d\udcbb 72 \u00b7 \ud83d\udd00 340 \u00b7 \ud83d\udce6 3.4K \u00b7 \ud83d\udccb 160 - 18% open \u00b7 \u23f1\ufe0f 21.05.2024):      <pre><code>git clone https://github.com/django-haystack/pysolr\n</code></pre> - [PyPi](https://pypi.org/project/pysolr) (\ud83d\udce5 290K / month \u00b7 \ud83d\udce6 54 \u00b7 \u23f1\ufe0f 13.10.2023):     <pre><code>pip install pysolr\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pysolr) (\ud83d\udce5 34K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge pysolr\n</code></pre> prisma (\ud83e\udd4927 \u00b7  \u2b50 1.7K) - Prisma Client Python is an auto-generated and fully type-safe.. <code>Apache-2</code>  - [GitHub](https://github.com/RobertCraigie/prisma-client-py) (\ud83d\udc68\u200d\ud83d\udcbb 28 \u00b7 \ud83d\udd00 69 \u00b7 \ud83d\udccb 390 - 52% open \u00b7 \u23f1\ufe0f 30.05.2024):      <pre><code>git clone https://github.com/RobertCraigie/prisma-client-py\n</code></pre> - [PyPi](https://pypi.org/project/prisma) (\ud83d\udce5 92K / month \u00b7 \ud83d\udce6 16 \u00b7 \u23f1\ufe0f 24.03.2024):     <pre><code>pip install prisma\n</code></pre> HappyBase (\ud83e\udd4927 \u00b7  \u2b50 610) - A developer-friendly Python library to interact with Apache HBase. <code>MIT</code>  - [GitHub](https://github.com/python-happybase/happybase) (\ud83d\udc68\u200d\ud83d\udcbb 21 \u00b7 \ud83d\udd00 160 \u00b7 \ud83d\udce6 860 \u00b7 \ud83d\udccb 220 - 15% open \u00b7 \u23f1\ufe0f 04.12.2023):      <pre><code>git clone https://github.com/python-happybase/happybase\n</code></pre> - [PyPi](https://pypi.org/project/happybase) (\ud83d\udce5 38K / month \u00b7 \ud83d\udce6 35 \u00b7 \u23f1\ufe0f 14.05.2019):     <pre><code>pip install happybase\n</code></pre> - [Conda](https://anaconda.org/conda-forge/happybase) (\ud83d\udce5 160K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge happybase\n</code></pre> ODMantic (\ud83e\udd4926 \u00b7  \u2b50 1K) - Sync and Async ODM (Object Document Mapper) for MongoDB based on python.. <code>ISC</code>  - [GitHub](https://github.com/art049/odmantic) (\ud83d\udc68\u200d\ud83d\udcbb 19 \u00b7 \ud83d\udd00 92 \u00b7 \ud83d\udce6 3.3K \u00b7 \ud83d\udccb 180 - 50% open \u00b7 \u23f1\ufe0f 26.04.2024):      <pre><code>git clone https://github.com/art049/odmantic\n</code></pre> - [PyPi](https://pypi.org/project/odmantic) (\ud83d\udce5 30K / month \u00b7 \ud83d\udce6 8 \u00b7 \u23f1\ufe0f 26.04.2024):     <pre><code>pip install odmantic\n</code></pre> filedepot (\ud83e\udd4925 \u00b7  \u2b50 160) - Toolkit for storing files and attachments in web applications. <code>MIT</code>  - [GitHub](https://github.com/amol-/depot) (\ud83d\udc68\u200d\ud83d\udcbb 21 \u00b7 \ud83d\udd00 43 \u00b7 \ud83d\udce6 1.1K \u00b7 \ud83d\udccb 46 - 15% open \u00b7 \u23f1\ufe0f 22.02.2024):      <pre><code>git clone https://github.com/amol-/depot\n</code></pre> - [PyPi](https://pypi.org/project/filedepot) (\ud83d\udce5 13K / month \u00b7 \ud83d\udce6 9 \u00b7 \u23f1\ufe0f 22.02.2024):     <pre><code>pip install filedepot\n</code></pre> aioprometheus (\ud83e\udd4921 \u00b7  \u2b50 170) - A Prometheus Python client library for asyncio-based applications. <code>MIT</code>  - [GitHub](https://github.com/claws/aioprometheus) (\ud83d\udc68\u200d\ud83d\udcbb 12 \u00b7 \ud83d\udd00 19 \u00b7 \ud83d\udce6 330 \u00b7 \ud83d\udccb 36 - 33% open \u00b7 \u23f1\ufe0f 27.12.2023):      <pre><code>git clone https://github.com/claws/aioprometheus\n</code></pre> - [PyPi](https://pypi.org/project/aioprometheus) (\ud83d\udce5 140K / month \u00b7 \ud83d\udce6 15 \u00b7 \u23f1\ufe0f 27.12.2023):     <pre><code>pip install aioprometheus\n</code></pre> psycopg3 (\ud83e\udd4919 \u00b7  \u2b50 1.5K) - New generation PostgreSQL database adapter for the Python.. <code>\u2757\ufe0fLGPL-3.0</code>  - [GitHub](https://github.com/psycopg/psycopg) (\ud83d\udc68\u200d\ud83d\udcbb 56 \u00b7 \ud83d\udd00 150 \u00b7 \ud83d\udccb 460 - 7% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/psycopg/psycopg\n</code></pre> Show 17 hidden projects...  - psycopg2 (\ud83e\udd4838 \u00b7  \u2b50 3.2K) - PostgreSQL database adapter for the Python.. <code>\u2757\ufe0fBSD-3-Clause-Attribution</code> - pyodbc (\ud83e\udd4835 \u00b7  \u2b50 2.9K) - Python ODBC bridge. <code>\u2757\ufe0fMIT-0</code> - google-cloud-bigtable (\ud83e\udd4931 \u00b7  \u2b50 63) - Google Cloud Bigtable API client library. <code>Apache-2</code> - gino (\ud83e\udd4929 \u00b7  \u2b50 2.7K \u00b7 \ud83d\udc80) - GINO Is Not ORM - a Python asyncio ORM on SQLAlchemy core. <code>BSD-3</code> - redis-py-cluster (\ud83e\udd4929 \u00b7  \u2b50 1.1K \u00b7 \ud83d\udc80) - Python cluster client for the official redis cluster... <code>MIT</code> - umongo (\ud83e\udd4928 \u00b7  \u2b50 440 \u00b7 \ud83d\udc80) - sync/async MongoDB ODM, yes. <code>MIT</code> - cloudant (\ud83e\udd4928 \u00b7  \u2b50 160 \u00b7 \ud83d\udc80) - A Python library for Cloudant and CouchDB. <code>Apache-2</code> - mongo-connector (\ud83e\udd4927 \u00b7  \u2b50 1.9K \u00b7 \ud83d\udc80) - MongoDB data stream pipeline tools by YouGov (adopted.. <code>Apache-2</code> - pyhdb (\ud83e\udd4924 \u00b7  \u2b50 320 \u00b7 \ud83d\udc80) - SAP HANA Connector in pure Python. <code>Apache-2</code> - PyMODM (\ud83e\udd4921 \u00b7  \u2b50 350 \u00b7 \ud83d\udc80) - A Pythonic, object-oriented interface for working with MongoDB. <code>Apache-2</code> - gsheets-db-api (\ud83e\udd4921 \u00b7  \u2b50 210 \u00b7 \ud83d\udc80) - A Python DB-API and SQLAlchemy dialect to Google Spreasheets. <code>MIT</code> - py2neo (\ud83e\udd4921 \u00b7  \u2b50 14 \u00b7 \ud83d\udca4) - EOL! Py2neo is a comprehensive Neo4j driver library and toolkit for.. <code>Apache-2</code> - PugSQL (\ud83e\udd4920 \u00b7  \u2b50 670 \u00b7 \ud83d\udc80) - A HugSQL-inspired database library for Python. <code>Apache-2</code> - db.py (\ud83e\udd4919 \u00b7  \u2b50 1.2K \u00b7 \ud83d\udc80) - db.py is an easier way to interact with your databases. <code>BSD-2</code> - Queries (\ud83e\udd4919 \u00b7  \u2b50 260 \u00b7 \ud83d\udc80) - PostgreSQL database access simplified. <code>BSD-3</code> - SuperSQLite (\ud83e\udd4915 \u00b7  \u2b50 720 \u00b7 \ud83d\udc80) - A supercharged SQLite library for Python. <code>MIT</code> - lazydata (\ud83e\udd4915 \u00b7  \u2b50 630 \u00b7 \ud83d\udc80) - Lazydata: Scalable data dependencies for Python projects. <code>Apache-2</code> <p></p>"},{"location":"blog/2024/09/30/best-of-python/#data-loading-extraction","title":"Data Loading &amp; Extraction","text":"<p>Libraries for loading, collecting, and extracting data from a variety of data sources and formats.</p> Datasets (\ud83e\udd4743 \u00b7  \u2b50 19K) - The largest hub of ready-to-use datasets for ML models with fast,.. <code>Apache-2</code>  - [GitHub](https://github.com/huggingface/datasets) (\ud83d\udc68\u200d\ud83d\udcbb 560 \u00b7 \ud83d\udd00 2.5K \u00b7 \ud83d\udce6 51K \u00b7 \ud83d\udccb 2.9K - 24% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/huggingface/datasets\n</code></pre> - [PyPi](https://pypi.org/project/datasets) (\ud83d\udce5 10M / month \u00b7 \ud83d\udce6 1.7K \u00b7 \u23f1\ufe0f 03.06.2024):     <pre><code>pip install datasets\n</code></pre> - [Conda](https://anaconda.org/conda-forge/datasets) (\ud83d\udce5 790K \u00b7 \u23f1\ufe0f 03.06.2024):     <pre><code>conda install -c conda-forge datasets\n</code></pre> Faker (\ud83e\udd4743 \u00b7  \u2b50 17K) - Faker is a Python package that generates fake data for you. <code>MIT</code>  - [GitHub](https://github.com/joke2k/faker) (\ud83d\udc68\u200d\ud83d\udcbb 580 \u00b7 \ud83d\udd00 1.9K \u00b7 \ud83d\udce6 220K \u00b7 \ud83d\udccb 720 - 2% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/joke2k/faker\n</code></pre> - [PyPi](https://pypi.org/project/Faker) (\ud83d\udce5 16M / month \u00b7 \ud83d\udce6 1.8K \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>pip install Faker\n</code></pre> - [Conda](https://anaconda.org/conda-forge/faker) (\ud83d\udce5 950K \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>conda install -c conda-forge faker\n</code></pre> Tablib (\ud83e\udd4736 \u00b7  \u2b50 4.5K) - Python Module for Tabular Datasets in XLS, CSV, JSON, YAML, &amp;c. <code>MIT</code>  - [GitHub](https://github.com/jazzband/tablib) (\ud83d\udc68\u200d\ud83d\udcbb 130 \u00b7 \ud83d\udd00 590 \u00b7 \ud83d\udce6 98K \u00b7 \ud83d\udccb 260 - 12% open \u00b7 \u23f1\ufe0f 05.04.2024):      <pre><code>git clone https://github.com/jazzband/tablib\n</code></pre> - [PyPi](https://pypi.org/project/tablib) (\ud83d\udce5 1.9M / month \u00b7 \ud83d\udce6 170 \u00b7 \u23f1\ufe0f 04.04.2024):     <pre><code>pip install tablib\n</code></pre> - [Conda](https://anaconda.org/conda-forge/tablib) (\ud83d\udce5 98K \u00b7 \u23f1\ufe0f 04.04.2024):     <pre><code>conda install -c conda-forge tablib\n</code></pre> xlwings (\ud83e\udd4736 \u00b7  \u2b50 2.9K) - xlwings is a Python library that makes it easy to call Python from.. <code>BSD-3</code>  - [GitHub](https://github.com/xlwings/xlwings) (\ud83d\udc68\u200d\ud83d\udcbb 65 \u00b7 \ud83d\udd00 480 \u00b7 \ud83d\udce5 17K \u00b7 \ud83d\udce6 31K \u00b7 \ud83d\udccb 1.9K - 18% open \u00b7 \u23f1\ufe0f 03.06.2024):      <pre><code>git clone https://github.com/xlwings/xlwings\n</code></pre> - [PyPi](https://pypi.org/project/xlwings) (\ud83d\udce5 160K / month \u00b7 \ud83d\udce6 150 \u00b7 \u23f1\ufe0f 03.06.2024):     <pre><code>pip install xlwings\n</code></pre> - [Conda](https://anaconda.org/conda-forge/xlwings) (\ud83d\udce5 770K \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>conda install -c conda-forge xlwings\n</code></pre> xmltodict (\ud83e\udd4835 \u00b7  \u2b50 5.4K) - Python module that makes working with XML feel like you are working.. <code>MIT</code>  - [GitHub](https://github.com/martinblech/xmltodict) (\ud83d\udc68\u200d\ud83d\udcbb 51 \u00b7 \ud83d\udd00 460 \u00b7 \ud83d\udce6 67K \u00b7 \ud83d\udccb 260 - 36% open \u00b7 \u23f1\ufe0f 03.05.2024):      <pre><code>git clone https://github.com/martinblech/xmltodict\n</code></pre> - [PyPi](https://pypi.org/project/xmltodict) (\ud83d\udce5 48M / month \u00b7 \ud83d\udce6 2.9K \u00b7 \u23f1\ufe0f 08.05.2022):     <pre><code>pip install xmltodict\n</code></pre> - [Conda](https://anaconda.org/conda-forge/xmltodict) (\ud83d\udce5 4M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge xmltodict\n</code></pre> python-magic (\ud83e\udd4835 \u00b7  \u2b50 2.6K) - A python wrapper for libmagic. <code>MIT</code>  - [GitHub](https://github.com/ahupp/python-magic) (\ud83d\udc68\u200d\ud83d\udcbb 63 \u00b7 \ud83d\udd00 270 \u00b7 \ud83d\udce6 58K \u00b7 \ud83d\udccb 210 - 8% open \u00b7 \u23f1\ufe0f 26.05.2024):      <pre><code>git clone https://github.com/ahupp/python-magic\n</code></pre> - [PyPi](https://pypi.org/project/python-magic) (\ud83d\udce5 9.2M / month \u00b7 \ud83d\udce6 1.4K \u00b7 \u23f1\ufe0f 07.06.2022):     <pre><code>pip install python-magic\n</code></pre> - [Conda](https://anaconda.org/conda-forge/python-magic) (\ud83d\udce5 260K \u00b7 \u23f1\ufe0f 25.09.2023):     <pre><code>conda install -c conda-forge python-magic\n</code></pre> gdown (\ud83e\udd4834 \u00b7  \u2b50 4K) - Google Drive Public File Downloader when Curl/Wget Fails. <code>MIT</code>  - [GitHub](https://github.com/wkentaro/gdown) (\ud83d\udc68\u200d\ud83d\udcbb 24 \u00b7 \ud83d\udd00 330 \u00b7 \ud83d\udce6 32K \u00b7 \ud83d\udccb 170 - 19% open \u00b7 \u23f1\ufe0f 12.05.2024):      <pre><code>git clone https://github.com/wkentaro/gdown\n</code></pre> - [PyPi](https://pypi.org/project/gdown) (\ud83d\udce5 1.5M / month \u00b7 \ud83d\udce6 800 \u00b7 \u23f1\ufe0f 12.05.2024):     <pre><code>pip install gdown\n</code></pre> - [Conda](https://anaconda.org/conda-forge/gdown) (\ud83d\udce5 280K \u00b7 \u23f1\ufe0f 12.05.2024):     <pre><code>conda install -c conda-forge gdown\n</code></pre> smart-open (\ud83e\udd4834 \u00b7  \u2b50 3.1K) - Utils for streaming large files (S3, HDFS, gzip, bz2...). <code>MIT</code>  - [GitHub](https://github.com/piskvorky/smart_open) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 380 \u00b7 \ud83d\udccb 390 - 16% open \u00b7 \u23f1\ufe0f 08.05.2024):      <pre><code>git clone https://github.com/RaRe-Technologies/smart_open\n</code></pre> - [PyPi](https://pypi.org/project/smart-open) (\ud83d\udce5 25M / month \u00b7 \ud83d\udce6 510 \u00b7 \u23f1\ufe0f 26.03.2024):     <pre><code>pip install smart-open\n</code></pre> - [Conda](https://anaconda.org/conda-forge/smart_open) (\ud83d\udce5 2.5M \u00b7 \u23f1\ufe0f 26.03.2024):     <pre><code>conda install -c conda-forge smart_open\n</code></pre> csvkit (\ud83e\udd4833 \u00b7  \u2b50 5.9K) - A suite of utilities for converting to and working with CSV, the king of.. <code>MIT</code>  - [GitHub](https://github.com/wireservice/csvkit) (\ud83d\udc68\u200d\ud83d\udcbb 110 \u00b7 \ud83d\udd00 600 \u00b7 \ud83d\udce6 1.6K \u00b7 \ud83d\udccb 910 - 3% open \u00b7 \u23f1\ufe0f 22.05.2024):      <pre><code>git clone https://github.com/wireservice/csvkit\n</code></pre> - [PyPi](https://pypi.org/project/csvkit) (\ud83d\udce5 140K / month \u00b7 \ud83d\udce6 39 \u00b7 \u23f1\ufe0f 01.05.2024):     <pre><code>pip install csvkit\n</code></pre> - [Conda](https://anaconda.org/conda-forge/csvkit) (\ud83d\udce5 110K \u00b7 \u23f1\ufe0f 02.05.2024):     <pre><code>conda install -c conda-forge csvkit\n</code></pre> pandas-datareader (\ud83e\udd4832 \u00b7  \u2b50 2.8K \u00b7 \ud83d\udca4) - Extract data from a wide range of Internet sources.. <code>BSD-3</code>  - [GitHub](https://github.com/pydata/pandas-datareader) (\ud83d\udc68\u200d\ud83d\udcbb 92 \u00b7 \ud83d\udd00 670 \u00b7 \ud83d\udce6 24K \u00b7 \ud83d\udccb 540 - 26% open \u00b7 \u23f1\ufe0f 24.10.2023):      <pre><code>git clone https://github.com/pydata/pandas-datareader\n</code></pre> - [PyPi](https://pypi.org/project/pandas-datareader) (\ud83d\udce5 500K / month \u00b7 \ud83d\udce6 260 \u00b7 \u23f1\ufe0f 13.07.2021):     <pre><code>pip install pandas-datareader\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pandas-datareader) (\ud83d\udce5 360K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge pandas-datareader\n</code></pre> Intake (\ud83e\udd4832 \u00b7  \u2b50 990) - Intake is a lightweight package for finding, investigating, loading and.. <code>BSD-2</code>  - [GitHub](https://github.com/intake/intake) (\ud83d\udc68\u200d\ud83d\udcbb 89 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce6 2.4K \u00b7 \ud83d\udccb 380 - 28% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/intake/intake\n</code></pre> - [PyPi](https://pypi.org/project/intake) (\ud83d\udce5 67K / month \u00b7 \ud83d\udce6 170 \u00b7 \u23f1\ufe0f 24.04.2024):     <pre><code>pip install intake\n</code></pre> - [Conda](https://anaconda.org/conda-forge/intake) (\ud83d\udce5 590K \u00b7 \u23f1\ufe0f 24.04.2024):     <pre><code>conda install -c conda-forge intake\n</code></pre> snorkel (\ud83e\udd4931 \u00b7  \u2b50 5.7K) - A system for quickly generating training data with weak supervision. <code>Apache-2</code>  - [GitHub](https://github.com/snorkel-team/snorkel) (\ud83d\udc68\u200d\ud83d\udcbb 81 \u00b7 \ud83d\udd00 860 \u00b7 \ud83d\udce5 1.1K \u00b7 \ud83d\udce6 520 \u00b7 \ud83d\udccb 980 - 1% open \u00b7 \u23f1\ufe0f 27.02.2024):      <pre><code>git clone https://github.com/snorkel-team/snorkel\n</code></pre> - [PyPi](https://pypi.org/project/snorkel) (\ud83d\udce5 35K / month \u00b7 \ud83d\udce6 18 \u00b7 \u23f1\ufe0f 27.02.2024):     <pre><code>pip install snorkel\n</code></pre> - [Conda](https://anaconda.org/conda-forge/snorkel) (\ud83d\udce5 50K \u00b7 \u23f1\ufe0f 28.02.2024):     <pre><code>conda install -c conda-forge snorkel\n</code></pre> textract (\ud83e\udd4927 \u00b7  \u2b50 3.8K) - extract text from any document. no muss. no fuss. <code>MIT</code>  - [GitHub](https://github.com/deanmalmgren/textract) (\ud83d\udc68\u200d\ud83d\udcbb 41 \u00b7 \ud83d\udd00 580 \u00b7 \ud83d\udccb 260 - 50% open \u00b7 \u23f1\ufe0f 10.03.2024):      <pre><code>git clone https://github.com/deanmalmgren/textract\n</code></pre> - [PyPi](https://pypi.org/project/textract) (\ud83d\udce5 290K / month \u00b7 \ud83d\udce6 58 \u00b7 \u23f1\ufe0f 10.03.2022):     <pre><code>pip install textract\n</code></pre> - [Conda](https://anaconda.org/conda-forge/textract) (\ud83d\udce5 24K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge textract\n</code></pre> img2dataset (\ud83e\udd4927 \u00b7  \u2b50 3.4K) - Easily turn large sets of image urls to an image dataset. Can.. <code>MIT</code>  - [GitHub](https://github.com/rom1504/img2dataset) (\ud83d\udc68\u200d\ud83d\udcbb 34 \u00b7 \ud83d\udd00 310 \u00b7 \ud83d\udce5 1.7K \u00b7 \ud83d\udce6 150 \u00b7 \ud83d\udccb 250 - 43% open \u00b7 \u23f1\ufe0f 22.02.2024):      <pre><code>git clone https://github.com/rom1504/img2dataset\n</code></pre> - [PyPi](https://pypi.org/project/img2dataset) (\ud83d\udce5 22K / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 22.01.2024):     <pre><code>pip install img2dataset\n</code></pre> deepdish (\ud83e\udd4924 \u00b7  \u2b50 270) - Flexible HDF5 saving/loading and other data science tools from the.. <code>BSD-3</code>  - [GitHub](https://github.com/uchicago-cs/deepdish) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 58 \u00b7 \ud83d\udce6 880 \u00b7 \ud83d\udccb 42 - 42% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/uchicago-cs/deepdish\n</code></pre> - [PyPi](https://pypi.org/project/deepdish) (\ud83d\udce5 18K / month \u00b7 \ud83d\udce6 64 \u00b7 \u23f1\ufe0f 24.09.2021):     <pre><code>pip install deepdish\n</code></pre> - [Conda](https://anaconda.org/conda-forge/deepdish) (\ud83d\udce5 96K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge deepdish\n</code></pre> camelot (\ud83e\udd4923 \u00b7  \u2b50 2.7K \u00b7 \ud83d\udca4) - A Python library to extract tabular data from PDFs. <code>MIT</code>  - [GitHub](https://github.com/camelot-dev/camelot) (\ud83d\udc68\u200d\ud83d\udcbb 46 \u00b7 \ud83d\udd00 430 \u00b7 \ud83d\udccb 380 - 70% open \u00b7 \u23f1\ufe0f 02.10.2023):      <pre><code>git clone https://github.com/camelot-dev/camelot\n</code></pre> - [PyPi](https://pypi.org/project/camelot) (\ud83d\udce5 6.4K / month \u00b7 \ud83d\udce6 6 \u00b7 \u23f1\ufe0f 15.12.2021):     <pre><code>pip install camelot\n</code></pre> rows (\ud83e\udd4923 \u00b7  \u2b50 860) - A common, beautiful interface to tabular data, no matter the format. <code>\u2757\ufe0fLGPL-3.0</code>  - [GitHub](https://github.com/turicas/rows) (\ud83d\udc68\u200d\ud83d\udcbb 31 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce5 38 \u00b7 \ud83d\udce6 170 \u00b7 \ud83d\udccb 320 - 52% open \u00b7 \u23f1\ufe0f 16.05.2024):      <pre><code>git clone https://github.com/turicas/rows\n</code></pre> - [PyPi](https://pypi.org/project/rows) (\ud83d\udce5 1.4K / month \u00b7 \ud83d\udce6 6 \u00b7 \u23f1\ufe0f 15.12.2021):     <pre><code>pip install rows\n</code></pre> excalibur (\ud83e\udd4921 \u00b7  \u2b50 1.5K \u00b7 \ud83d\udca4) - A web interface to extract tabular data from PDFs. <code>MIT</code>  - [GitHub](https://github.com/camelot-dev/excalibur) (\ud83d\udc68\u200d\ud83d\udcbb 13 \u00b7 \ud83d\udd00 220 \u00b7 \ud83d\udce5 12K \u00b7 \ud83d\udccb 130 - 68% open \u00b7 \u23f1\ufe0f 15.07.2023):      <pre><code>git clone https://github.com/camelot-dev/excalibur\n</code></pre> - [PyPi](https://pypi.org/project/excalibur-py) (\ud83d\udce5 1.5K / month \u00b7 \u23f1\ufe0f 21.03.2020):     <pre><code>pip install excalibur-py\n</code></pre> Upgini (\ud83e\udd4921 \u00b7  \u2b50 300) - Data search &amp; enrichment library for Machine Learning Easily find and add.. <code>BSD-3</code>  - [GitHub](https://github.com/upgini/upgini) (\ud83d\udc68\u200d\ud83d\udcbb 12 \u00b7 \ud83d\udd00 25 \u00b7 \ud83d\udce6 6 \u00b7 \u23f1\ufe0f 01.06.2024):      <pre><code>git clone https://github.com/upgini/upgini\n</code></pre> - [PyPi](https://pypi.org/project/upgini) (\ud83d\udce5 8.5K / month \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>pip install upgini\n</code></pre> Squirrel (\ud83e\udd4917 \u00b7  \u2b50 280) - A Python library that enables ML teams to share, load, and transform.. <code>Apache-2</code>  - [GitHub](https://github.com/merantix-momentum/squirrel-core) (\ud83d\udc68\u200d\ud83d\udcbb 19 \u00b7 \ud83d\udd00 8 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 14 - 21% open \u00b7 \u23f1\ufe0f 08.05.2024):      <pre><code>git clone https://github.com/merantix-momentum/squirrel-core\n</code></pre> - [PyPi](https://pypi.org/project/squirrel-core) (\ud83d\udce5 1.3K / month \u00b7 \u23f1\ufe0f 08.05.2024):     <pre><code>pip install squirrel-core\n</code></pre> - [Conda](https://anaconda.org/anaconda/squirrel-core) (\ud83d\udce6 1 \u00b7 \u23f1\ufe0f 18.11.2022):     <pre><code>conda install -c anaconda squirrel-core\n</code></pre> Show 10 hidden projects...  - xlrd (\ud83e\udd4833 \u00b7  \u2b50 2.1K \u00b7 \ud83d\udc80) - Please use openpyxl where you can... <code>BSD-3</code> - SDV (\ud83e\udd4931 \u00b7  \u2b50 2.2K) - Synthetic data generation for tabular data. <code>\u2757\ufe0fSSPL-1.0</code> - PDFMiner (\ud83e\udd4927 \u00b7  \u2b50 5.2K \u00b7 \ud83d\udc80) - Python PDF Parser (Not actively maintained). Check out pdfminer.six. <code>MIT</code> - tabulator-py (\ud83e\udd4927 \u00b7  \u2b50 240 \u00b7 \ud83d\udc80) - Python library for reading and writing tabular data via streams. <code>MIT</code> - Singer (\ud83e\udd4926 \u00b7  \u2b50 1.2K \u00b7 \ud83d\udc80) - Standard for moving data between databases, web APIs, files,.. <code>\u2757\ufe0fAGPL-3.0</code> - messytables (\ud83e\udd4924 \u00b7  \u2b50 390 \u00b7 \ud83d\udc80) - Tools for parsing messy tabular data. This is now superseded by.. <code>MIT</code> - pyexcel-xlsx (\ud83e\udd4923 \u00b7  \u2b50 110 \u00b7 \ud83d\udc80) - A wrapper library to read, manipulate and write data in xlsx.. <code>BSD-3</code> - borb (\ud83e\udd4922 \u00b7  \u2b50 3.3K) - borb is a library for reading, creating and manipulating PDF files.. <code>\u2757Unlicensed</code> - datatest (\ud83e\udd4921 \u00b7  \u2b50 290 \u00b7 \ud83d\udc80) - Tools for test driven data-wrangling and data validation. <code>Apache-2</code> - csvs-to-sqlite (\ud83e\udd4915 \u00b7  \u2b50 860 \u00b7 \ud83d\udc80) - Convert CSV files into a SQLite database. <code>Apache-2</code> <p></p>"},{"location":"blog/2024/09/30/best-of-python/#data-pipelines-streaming","title":"Data Pipelines &amp; Streaming","text":"<p>Libraries for data batch- and stream-processing, workflow automation, job scheduling, and other data pipeline tasks.</p> Airflow (\ud83e\udd4749 \u00b7  \u2b50 35K) - Platform to programmatically author, schedule, and monitor workflows. <code>Apache-2</code>  - [GitHub](https://github.com/apache/airflow) (\ud83d\udc68\u200d\ud83d\udcbb 3.3K \u00b7 \ud83d\udd00 14K \u00b7 \ud83d\udce5 620K \u00b7 \ud83d\udce6 11K \u00b7 \ud83d\udccb 9.3K - 10% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/apache/airflow\n</code></pre> - [PyPi](https://pypi.org/project/apache-airflow) (\ud83d\udce5 24M / month \u00b7 \ud83d\udce6 470 \u00b7 \u23f1\ufe0f 06.06.2024):     <pre><code>pip install apache-airflow\n</code></pre> - [Conda](https://anaconda.org/conda-forge/airflow) (\ud83d\udce5 1.1M \u00b7 \u23f1\ufe0f 07.05.2024):     <pre><code>conda install -c conda-forge airflow\n</code></pre> - [Docker Hub](https://hub.docker.com/r/apache/airflow) (\ud83d\udce5 1.3B \u00b7 \u2b50 520 \u00b7 \u23f1\ufe0f 06.06.2024):     <pre><code>docker pull apache/airflow\n</code></pre> Celery (\ud83e\udd4746 \u00b7  \u2b50 24K) - Asynchronous task queue/job queue based on distributed message passing. <code>BSD-3</code>  - [GitHub](https://github.com/celery/celery) (\ud83d\udc68\u200d\ud83d\udcbb 1.4K \u00b7 \ud83d\udd00 4.6K \u00b7 \ud83d\udce6 130K \u00b7 \ud83d\udccb 5.1K - 14% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/celery/celery\n</code></pre> - [PyPi](https://pypi.org/project/celery) (\ud83d\udce5 11M / month \u00b7 \ud83d\udce6 1.7K \u00b7 \u23f1\ufe0f 17.04.2024):     <pre><code>pip install celery\n</code></pre> - [Conda](https://anaconda.org/conda-forge/celery) (\ud83d\udce5 1.7M \u00b7 \u23f1\ufe0f 30.12.2023):     <pre><code>conda install -c conda-forge celery\n</code></pre> Beam (\ud83e\udd4744 \u00b7  \u2b50 7.6K) - Unified programming model to define and execute data processing.. <code>Apache-2</code>  - [GitHub](https://github.com/apache/beam) (\ud83d\udc68\u200d\ud83d\udcbb 1.6K \u00b7 \ud83d\udd00 4.1K \u00b7 \ud83d\udce6 7.1K \u00b7 \ud83d\udccb 6.8K - 64% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/apache/beam\n</code></pre> - [PyPi](https://pypi.org/project/apache-beam) (\ud83d\udce5 8.6M / month \u00b7 \ud83d\udce6 150 \u00b7 \u23f1\ufe0f 02.05.2024):     <pre><code>pip install apache-beam\n</code></pre> - [Conda](https://anaconda.org/conda-forge/apache-beam-with-aws) (\ud83d\udce5 77K \u00b7 \u23f1\ufe0f 08.05.2024):     <pre><code>conda install -c conda-forge apache-beam-with-aws\n</code></pre> Prefect (\ud83e\udd4743 \u00b7  \u2b50 15K) - Prefect is a workflow orchestration tool empowering developers to.. <code>Apache-2</code>  - [GitHub](https://github.com/PrefectHQ/prefect) (\ud83d\udc68\u200d\ud83d\udcbb 470 \u00b7 \ud83d\udd00 1.5K \u00b7 \ud83d\udce6 4.9K \u00b7 \ud83d\udccb 5K - 17% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/PrefectHQ/prefect\n</code></pre> - [PyPi](https://pypi.org/project/prefect) (\ud83d\udce5 1.7M / month \u00b7 \ud83d\udce6 250 \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>pip install prefect\n</code></pre> - [Conda](https://anaconda.org/conda-forge/prefect) (\ud83d\udce5 660K \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>conda install -c conda-forge prefect\n</code></pre> Dagster (\ud83e\udd4742 \u00b7  \u2b50 10K) - An orchestration platform for the development, production, and.. <code>Apache-2</code>  - [GitHub](https://github.com/dagster-io/dagster) (\ud83d\udc68\u200d\ud83d\udcbb 430 \u00b7 \ud83d\udd00 1.3K \u00b7 \ud83d\udce6 2.4K \u00b7 \ud83d\udccb 7.4K - 33% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/dagster-io/dagster\n</code></pre> - [PyPi](https://pypi.org/project/dagster) (\ud83d\udce5 980K / month \u00b7 \ud83d\udce6 170 \u00b7 \u23f1\ufe0f 30.05.2024):     <pre><code>pip install dagster\n</code></pre> - [Conda](https://anaconda.org/conda-forge/dagster) (\ud83d\udce5 1.2M \u00b7 \u23f1\ufe0f 31.05.2024):     <pre><code>conda install -c conda-forge dagster\n</code></pre> Great Expectations (\ud83e\udd4840 \u00b7  \u2b50 9.6K) - Always know what to expect from your data. <code>Apache-2</code>  - [GitHub](https://github.com/great-expectations/great_expectations) (\ud83d\udc68\u200d\ud83d\udcbb 430 \u00b7 \ud83d\udd00 1.5K \u00b7 \ud83d\udccb 1.9K - 11% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/great-expectations/great_expectations\n</code></pre> - [PyPi](https://pypi.org/project/great_expectations) (\ud83d\udce5 21M / month \u00b7 \ud83d\udce6 92 \u00b7 \u23f1\ufe0f 28.05.2024):     <pre><code>pip install great_expectations\n</code></pre> - [Conda](https://anaconda.org/conda-forge/great-expectations) (\ud83d\udce5 810K \u00b7 \u23f1\ufe0f 29.05.2024):     <pre><code>conda install -c conda-forge great-expectations\n</code></pre> joblib (\ud83e\udd4840 \u00b7  \u2b50 3.7K) - Computing with Python functions. <code>BSD-3</code>  - [GitHub](https://github.com/joblib/joblib) (\ud83d\udc68\u200d\ud83d\udcbb 130 \u00b7 \ud83d\udd00 410 \u00b7 \ud83d\udce6 450K \u00b7 \ud83d\udccb 900 - 45% open \u00b7 \u23f1\ufe0f 02.05.2024):      <pre><code>git clone https://github.com/joblib/joblib\n</code></pre> - [PyPi](https://pypi.org/project/joblib) (\ud83d\udce5 54M / month \u00b7 \ud83d\udce6 6K \u00b7 \u23f1\ufe0f 02.05.2024):     <pre><code>pip install joblib\n</code></pre> - [Conda](https://anaconda.org/conda-forge/joblib) (\ud83d\udce5 26M \u00b7 \u23f1\ufe0f 02.05.2024):     <pre><code>conda install -c conda-forge joblib\n</code></pre> rq (\ud83e\udd4839 \u00b7  \u2b50 9.6K) - Simple job queues for Python. <code>BSD-3</code>  - [GitHub](https://github.com/rq/rq) (\ud83d\udc68\u200d\ud83d\udcbb 320 \u00b7 \ud83d\udd00 1.4K \u00b7 \ud83d\udce6 17K \u00b7 \ud83d\udccb 1.2K - 17% open \u00b7 \u23f1\ufe0f 26.05.2024):      <pre><code>git clone https://github.com/rq/rq\n</code></pre> - [PyPi](https://pypi.org/project/rq) (\ud83d\udce5 1.4M / month \u00b7 \ud83d\udce6 220 \u00b7 \u23f1\ufe0f 01.05.2024):     <pre><code>pip install rq\n</code></pre> - [Conda](https://anaconda.org/conda-forge/rq) (\ud83d\udce5 110K \u00b7 \u23f1\ufe0f 26.03.2024):     <pre><code>conda install -c conda-forge rq\n</code></pre> luigi (\ud83e\udd4838 \u00b7  \u2b50 17K \u00b7 \ud83d\udcc8) - Luigi is a Python module that helps you build complex pipelines of.. <code>Apache-2</code>  - [GitHub](https://github.com/spotify/luigi) (\ud83d\udc68\u200d\ud83d\udcbb 620 \u00b7 \ud83d\udd00 2.4K \u00b7 \ud83d\udce6 2.4K \u00b7 \ud83d\udccb 1K - 12% open \u00b7 \u23f1\ufe0f 20.05.2024):      <pre><code>git clone https://github.com/spotify/luigi\n</code></pre> - [PyPi](https://pypi.org/project/luigi) (\ud83d\udce5 480K / month \u00b7 \ud83d\udce6 140 \u00b7 \u23f1\ufe0f 20.05.2024):     <pre><code>pip install luigi\n</code></pre> - [Conda](https://anaconda.org/anaconda/luigi) (\ud83d\udce5 14K \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c anaconda luigi\n</code></pre> Kedro (\ud83e\udd4838 \u00b7  \u2b50 9.4K) - Kedro is a toolbox for production-ready data science. It uses software.. <code>Apache-2</code>  - [GitHub](https://github.com/kedro-org/kedro) (\ud83d\udc68\u200d\ud83d\udcbb 230 \u00b7 \ud83d\udd00 870 \u00b7 \ud83d\udce6 2.4K \u00b7 \ud83d\udccb 1.8K - 14% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/kedro-org/kedro\n</code></pre> - [PyPi](https://pypi.org/project/kedro) (\ud83d\udce5 560K / month \u00b7 \ud83d\udce6 110 \u00b7 \u23f1\ufe0f 27.05.2024):     <pre><code>pip install kedro\n</code></pre> dbt (\ud83e\udd4838 \u00b7  \u2b50 9.1K) - dbt enables data analysts and engineers to transform their data using the.. <code>Apache-2</code>  - [GitHub](https://github.com/dbt-labs/dbt-core) (\ud83d\udc68\u200d\ud83d\udcbb 320 \u00b7 \ud83d\udd00 1.5K \u00b7 \ud83d\udce5 4.1K \u00b7 \ud83d\udce6 5.1K \u00b7 \ud83d\udccb 5.2K - 10% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/dbt-labs/dbt-core\n</code></pre> - [PyPi](https://pypi.org/project/dbt) (\ud83d\udce5 47K / month \u00b7 \ud83d\udce6 35 \u00b7 \u23f1\ufe0f 04.06.2024):     <pre><code>pip install dbt\n</code></pre> - [Conda](https://anaconda.org/conda-forge/dbt) (\ud83d\udce5 260K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge dbt\n</code></pre> petl (\ud83e\udd4835 \u00b7  \u2b50 1.2K) - Python Extract Transform and Load Tables of Data. <code>MIT</code>  - [GitHub](https://github.com/petl-developers/petl) (\ud83d\udc68\u200d\ud83d\udcbb 64 \u00b7 \ud83d\udd00 190 \u00b7 \ud83d\udce6 3.7K \u00b7 \ud83d\udccb 460 - 18% open \u00b7 \u23f1\ufe0f 17.04.2024):      <pre><code>git clone https://github.com/petl-developers/petl\n</code></pre> - [PyPi](https://pypi.org/project/petl) (\ud83d\udce5 1.6M / month \u00b7 \ud83d\udce6 44 \u00b7 \u23f1\ufe0f 12.03.2024):     <pre><code>pip install petl\n</code></pre> - [Conda](https://anaconda.org/conda-forge/petl) (\ud83d\udce5 230K \u00b7 \u23f1\ufe0f 13.03.2024):     <pre><code>conda install -c conda-forge petl\n</code></pre> Activeloop (\ud83e\udd4833 \u00b7  \u2b50 7.8K) - Database for AI. Store Vectors, Images, Texts, Videos, etc. Use.. <code>MPL-2.0</code>  - [GitHub](https://github.com/activeloopai/deeplake) (\ud83d\udc68\u200d\ud83d\udcbb 130 \u00b7 \ud83d\udd00 600 \u00b7 \ud83d\udce6 2.8K \u00b7 \ud83d\udccb 450 - 11% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/activeloopai/Hub\n</code></pre> - [PyPi](https://pypi.org/project/hub) (\ud83d\udce5 4.7K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 02.02.2023):     <pre><code>pip install hub\n</code></pre> zenml (\ud83e\udd4832 \u00b7  \u2b50 3.7K) - ZenML : Build portable, production-ready MLOps pipelines... <code>Apache-2</code>  - [GitHub](https://github.com/zenml-io/zenml) (\ud83d\udc68\u200d\ud83d\udcbb 93 \u00b7 \ud83d\udd00 400 \u00b7 \ud83d\udce5 1 \u00b7 \ud83d\udce6 540 \u00b7 \ud83d\udccb 320 - 23% open \u00b7 \u23f1\ufe0f 27.05.2024):      <pre><code>git clone https://github.com/zenml-io/zenml\n</code></pre> - [PyPi](https://pypi.org/project/zenml) (\ud83d\udce5 42K / month \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 27.05.2024):     <pre><code>pip install zenml\n</code></pre> whylogs (\ud83e\udd4831 \u00b7  \u2b50 2.6K) - Open standard for end-to-end data and ML monitoring for any scale in.. <code>Apache-2</code>  - [GitHub](https://github.com/whylabs/whylogs) (\ud83d\udc68\u200d\ud83d\udcbb 34 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce5 27 \u00b7 \ud83d\udce6 260 \u00b7 \ud83d\udccb 430 - 2% open \u00b7 \u23f1\ufe0f 29.05.2024):      <pre><code>git clone https://github.com/whylabs/whylogs\n</code></pre> - [PyPi](https://pypi.org/project/whylogs) (\ud83d\udce5 530K / month \u00b7 \ud83d\udce6 7 \u00b7 \u23f1\ufe0f 22.05.2024):     <pre><code>pip install whylogs\n</code></pre> arq (\ud83e\udd4831 \u00b7  \u2b50 2K) - Fast job queuing and RPC in python with asyncio and redis. <code>MIT</code>  - [GitHub](https://github.com/samuelcolvin/arq) (\ud83d\udc68\u200d\ud83d\udcbb 61 \u00b7 \ud83d\udd00 160 \u00b7 \ud83d\udce6 620 \u00b7 \ud83d\udccb 220 - 30% open \u00b7 \u23f1\ufe0f 01.05.2024):      <pre><code>git clone https://github.com/samuelcolvin/arq\n</code></pre> - [PyPi](https://pypi.org/project/arq) (\ud83d\udce5 97K / month \u00b7 \ud83d\udce6 31 \u00b7 \u23f1\ufe0f 01.05.2024):     <pre><code>pip install arq\n</code></pre> - [Conda](https://anaconda.org/conda-forge/arq) (\ud83d\udce5 10K \u00b7 \u23f1\ufe0f 02.05.2024):     <pre><code>conda install -c conda-forge arq\n</code></pre> huey (\ud83e\udd4930 \u00b7  \u2b50 4.9K) - a little task queue for python. <code>MIT</code>  - [GitHub](https://github.com/coleifer/huey) (\ud83d\udc68\u200d\ud83d\udcbb 67 \u00b7 \ud83d\udd00 360 \u00b7 \ud83d\udce6 1.5K \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/coleifer/huey\n</code></pre> - [PyPi](https://pypi.org/project/huey) (\ud83d\udce5 100K / month \u00b7 \ud83d\udce6 70 \u00b7 \u23f1\ufe0f 20.09.2023):     <pre><code>pip install huey\n</code></pre> - [Conda](https://anaconda.org/conda-forge/huey) (\ud83d\udce5 34K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge huey\n</code></pre> ploomber (\ud83e\udd4929 \u00b7  \u2b50 3.4K) - The fastest way to build data pipelines. Develop iteratively,.. <code>Apache-2</code>  - [GitHub](https://github.com/ploomber/ploomber) (\ud83d\udc68\u200d\ud83d\udcbb 80 \u00b7 \ud83d\udd00 230 \u00b7 \ud83d\udce6 130 \u00b7 \ud83d\udccb 860 - 11% open \u00b7 \u23f1\ufe0f 20.02.2024):      <pre><code>git clone https://github.com/ploomber/ploomber\n</code></pre> - [PyPi](https://pypi.org/project/ploomber) (\ud83d\udce5 6.9K / month \u00b7 \ud83d\udce6 11 \u00b7 \u23f1\ufe0f 08.02.2024):     <pre><code>pip install ploomber\n</code></pre> - [Conda](https://anaconda.org/conda-forge/ploomber) (\ud83d\udce5 91K \u00b7 \u23f1\ufe0f 09.02.2024):     <pre><code>conda install -c conda-forge ploomber\n</code></pre> mleap (\ud83e\udd4928 \u00b7  \u2b50 1.5K \u00b7 \ud83d\udca4) - MLeap: Deploy ML Pipelines to Production. <code>Apache-2</code>  - [GitHub](https://github.com/combust/mleap) (\ud83d\udc68\u200d\ud83d\udcbb 85 \u00b7 \ud83d\udd00 310 \u00b7 \ud83d\udce6 230 \u00b7 \ud83d\udccb 480 - 23% open \u00b7 \u23f1\ufe0f 14.11.2023):      <pre><code>git clone https://github.com/combust/mleap\n</code></pre> - [PyPi](https://pypi.org/project/mleap) (\ud83d\udce5 170K / month \u00b7 \ud83d\udce6 11 \u00b7 \u23f1\ufe0f 14.11.2023):     <pre><code>pip install mleap\n</code></pre> - [Conda](https://anaconda.org/conda-forge/mleap) (\ud83d\udce5 81K \u00b7 \u23f1\ufe0f 15.11.2023):     <pre><code>conda install -c conda-forge mleap\n</code></pre> PyFunctional (\ud83e\udd4927 \u00b7  \u2b50 2.4K) - Python library for creating data pipelines with chain functional.. <code>MIT</code>  - [GitHub](https://github.com/EntilZha/PyFunctional) (\ud83d\udc68\u200d\ud83d\udcbb 31 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce6 800 \u00b7 \ud83d\udccb 140 - 10% open \u00b7 \u23f1\ufe0f 13.03.2024):      <pre><code>git clone https://github.com/EntilZha/PyFunctional\n</code></pre> - [PyPi](https://pypi.org/project/pyfunctional) (\ud83d\udce5 170K / month \u00b7 \ud83d\udce6 27 \u00b7 \u23f1\ufe0f 13.03.2024):     <pre><code>pip install pyfunctional\n</code></pre> streamparse (\ud83e\udd4925 \u00b7  \u2b50 1.5K) - Run Python in Apache Storm topologies. Pythonic API, CLI.. <code>Apache-2</code>  - [GitHub](https://github.com/pystorm/streamparse) (\ud83d\udc68\u200d\ud83d\udcbb 45 \u00b7 \ud83d\udd00 220 \u00b7 \ud83d\udce6 65 \u00b7 \ud83d\udccb 340 - 21% open \u00b7 \u23f1\ufe0f 21.04.2024):      <pre><code>git clone https://github.com/Parsely/streamparse\n</code></pre> - [PyPi](https://pypi.org/project/streamparse) (\ud83d\udce5 1.7K / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 10.01.2022):     <pre><code>pip install streamparse\n</code></pre> TaskTiger (\ud83e\udd4925 \u00b7  \u2b50 1.4K) - Python task queue using Redis. <code>MIT</code>  - [GitHub](https://github.com/closeio/tasktiger) (\ud83d\udc68\u200d\ud83d\udcbb 30 \u00b7 \ud83d\udd00 81 \u00b7 \ud83d\udce6 30 \u00b7 \ud83d\udccb 84 - 51% open \u00b7 \u23f1\ufe0f 25.04.2024):      <pre><code>git clone https://github.com/closeio/tasktiger\n</code></pre> - [PyPi](https://pypi.org/project/tasktiger) (\ud83d\udce5 4.4K / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 25.04.2024):     <pre><code>pip install tasktiger\n</code></pre> dbnd (\ud83e\udd4925 \u00b7  \u2b50 250) - DBND is an agile pipeline framework that helps data engineering teams.. <code>Apache-2</code>  - [GitHub](https://github.com/databand-ai/dbnd) (\ud83d\udc68\u200d\ud83d\udcbb 82 \u00b7 \ud83d\udd00 34 \u00b7 \ud83d\udce6 36 \u00b7 \ud83d\udccb 30 - 86% open \u00b7 \u23f1\ufe0f 19.05.2024):      <pre><code>git clone https://github.com/databand-ai/dbnd\n</code></pre> - [PyPi](https://pypi.org/project/dbnd) (\ud83d\udce5 270K / month \u00b7 \ud83d\udce6 26 \u00b7 \u23f1\ufe0f 19.05.2024):     <pre><code>pip install dbnd\n</code></pre> Databolt Flow (\ud83e\udd4919 \u00b7  \u2b50 950 \u00b7 \ud83d\udca4) - Python library for building highly effective data science.. <code>MIT</code>  - [GitHub](https://github.com/d6t/d6tflow) (\ud83d\udc68\u200d\ud83d\udcbb 13 \u00b7 \ud83d\udd00 77 \u00b7 \ud83d\udce6 28 \u00b7 \ud83d\udccb 24 - 45% open \u00b7 \u23f1\ufe0f 20.07.2023):      <pre><code>git clone https://github.com/d6t/d6tflow\n</code></pre> - [PyPi](https://pypi.org/project/d6tflow) (\ud83d\udce5 270 / month \u00b7 \u23f1\ufe0f 20.02.2024):     <pre><code>pip install d6tflow\n</code></pre> BatchFlow (\ud83e\udd4919 \u00b7  \u2b50 200) - BatchFlow helps you conveniently work with random or sequential.. <code>Apache-2</code>  - [GitHub](https://github.com/analysiscenter/batchflow) (\ud83d\udc68\u200d\ud83d\udcbb 37 \u00b7 \ud83d\udd00 44 \u00b7 \ud83d\udce6 9 \u00b7 \ud83d\udccb 110 - 29% open \u00b7 \u23f1\ufe0f 18.05.2024):      <pre><code>git clone https://github.com/analysiscenter/batchflow\n</code></pre> - [PyPi](https://pypi.org/project/batchflow) (\ud83d\udce5 210 / month \u00b7 \u23f1\ufe0f 01.08.2023):     <pre><code>pip install batchflow\n</code></pre> flupy (\ud83e\udd4918 \u00b7  \u2b50 190) - Fluent data pipelines for python and your shell. <code>MIT</code>  - [GitHub](https://github.com/olirice/flupy) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 15 \u00b7 \ud83d\udccb 14 - 14% open \u00b7 \u23f1\ufe0f 27.02.2024):      <pre><code>git clone https://github.com/olirice/flupy\n</code></pre> - [PyPi](https://pypi.org/project/flupy) (\ud83d\udce5 230K / month \u00b7 \u23f1\ufe0f 21.10.2022):     <pre><code>pip install flupy\n</code></pre> Mara Pipelines (\ud83e\udd4916 \u00b7  \u2b50 2.1K) - A lightweight opinionated ETL framework, halfway between plain.. <code>MIT</code>  - [GitHub](https://github.com/mara/mara-pipelines) (\ud83d\udc68\u200d\ud83d\udcbb 17 \u00b7 \ud83d\udd00 100 \u00b7 \ud83d\udccb 42 - 61% open \u00b7 \u23f1\ufe0f 07.12.2023):      <pre><code>git clone https://github.com/mara/mara-pipelines\n</code></pre> - [PyPi](https://pypi.org/project/mara-pipelines) (\ud83d\udce5 59 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 06.12.2023):     <pre><code>pip install mara-pipelines\n</code></pre> Show 16 hidden projects...  - mrjob (\ud83e\udd4831 \u00b7  \u2b50 2.6K \u00b7 \ud83d\udc80) - Run MapReduce jobs on Hadoop or Amazon Web Services. <code>Apache-2</code> - faust (\ud83e\udd4929 \u00b7  \u2b50 6.7K \u00b7 \ud83d\udc80) - Python Stream Processing. <code>BSD-3</code> - Optimus (\ud83e\udd4925 \u00b7  \u2b50 1.4K \u00b7 \ud83d\udc80) - Agile Data Preparation Workflows madeeasy with Pandas,.. <code>Apache-2</code> <code>spark</code> - bonobo (\ud83e\udd4924 \u00b7  \u2b50 1.6K \u00b7 \ud83d\udc80) - Extract Transform Load for Python 3.5+. <code>Apache-2</code> - Pypeline (\ud83e\udd4924 \u00b7  \u2b50 1.5K \u00b7 \ud83d\udc80) - Concurrent data pipelines in Python . <code>MIT</code> - pysparkling (\ud83e\udd4923 \u00b7  \u2b50 260 \u00b7 \ud83d\udc80) - A pure Python implementation of Apache Sparks RDD and DStream.. <code>MIT</code> - dpark (\ud83e\udd4922 \u00b7  \u2b50 2.7K \u00b7 \ud83d\udc80) - Python clone of Spark, a MapReduce alike framework in Python. <code>BSD-3</code> <code>spark</code> - pdpipe (\ud83e\udd4920 \u00b7  \u2b50 720 \u00b7 \ud83d\udc80) - Easy pipelines for pandas DataFrames. <code>MIT</code> <code></code> - spark-deep-learning (\ud83e\udd4919 \u00b7  \u2b50 2K \u00b7 \ud83d\udc80) - Deep Learning Pipelines for Apache Spark. <code>Apache-2</code> <code>spark</code> - mrq (\ud83e\udd4919 \u00b7  \u2b50 880 \u00b7 \ud83d\udc80) - Mr. Queue - A distributed worker task queue in Python using Redis &amp; gevent. <code>MIT</code> - riko (\ud83e\udd4918 \u00b7  \u2b50 1.6K \u00b7 \ud83d\udc80) - A Python stream processing engine modeled after Yahoo! Pipes. <code>MIT</code> - bodywork-core (\ud83e\udd4917 \u00b7  \u2b50 430 \u00b7 \ud83d\udc80) - ML pipeline orchestration and model deployments on.. <code>\u2757\ufe0fAGPL-3.0</code> - kale (\ud83e\udd4916 \u00b7  \u2b50 630 \u00b7 \ud83d\udc80) - Kubeflows superfood for Data Scientists. <code>Apache-2</code> <code>jupyter</code> - Botflow (\ud83e\udd4915 \u00b7  \u2b50 1.2K \u00b7 \ud83d\udc80) - Python Fast Dataflow programming framework for Data pipeline work(.. <code>BSD-3</code> - RasgoQL (\ud83e\udd4913 \u00b7  \u2b50 270 \u00b7 \ud83d\udc80) - Write python locally, execute SQL in your data warehouse. <code>\u2757\ufe0fAGPL-3.0</code> - datajob (\ud83e\udd4913 \u00b7  \u2b50 110 \u00b7 \ud83d\udc80) - Build and deploy a serverless data pipeline on AWS with no effort. <code>Apache-2</code> <p></p>"},{"location":"blog/2024/09/30/best-of-python/#file-formats","title":"File Formats","text":"PyYAML (\ud83e\udd4738 \u00b7  \u2b50 2.4K \u00b7 \ud83d\udca4) - Canonical source repository for PyYAML. <code>MIT</code>  - [GitHub](https://github.com/yaml/pyyaml) (\ud83d\udc68\u200d\ud83d\udcbb 40 \u00b7 \ud83d\udd00 500 \u00b7 \ud83d\udce6 1.2M \u00b7 \ud83d\udccb 610 - 46% open \u00b7 \u23f1\ufe0f 14.11.2023):      <pre><code>git clone https://github.com/yaml/pyyaml\n</code></pre> - [PyPi](https://pypi.org/project/pyyaml) (\ud83d\udce5 320M / month \u00b7 \ud83d\udce6 37K \u00b7 \u23f1\ufe0f 18.07.2023):     <pre><code>pip install pyyaml\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pyyaml) (\ud83d\udce5 45M \u00b7 \u23f1\ufe0f 22.09.2023):     <pre><code>conda install -c conda-forge pyyaml\n</code></pre> XlsxWriter (\ud83e\udd4936 \u00b7  \u2b50 3.5K) - A Python module for creating Excel XLSX files. <code>BSD-2</code>  - [GitHub](https://github.com/jmcnamara/XlsxWriter) (\ud83d\udc68\u200d\ud83d\udcbb 52 \u00b7 \ud83d\udd00 620 \u00b7 \ud83d\udce6 78K \u00b7 \ud83d\udccb 940 - 1% open \u00b7 \u23f1\ufe0f 06.04.2024):      <pre><code>git clone https://github.com/jmcnamara/XlsxWriter\n</code></pre> - [PyPi](https://pypi.org/project/xlsxwriter) (\ud83d\udce5 22M / month \u00b7 \ud83d\udce6 1.6K \u00b7 \u23f1\ufe0f 18.02.2024):     <pre><code>pip install xlsxwriter\n</code></pre> - [Conda](https://anaconda.org/conda-forge/xlsxwriter) (\ud83d\udce5 3.3M \u00b7 \u23f1\ufe0f 05.11.2023):     <pre><code>conda install -c conda-forge xlsxwriter\n</code></pre> Show 1 hidden projects...  - jmespath (\ud83e\udd4932 \u00b7  \u2b50 2.1K \u00b7 \ud83d\udc80) - JMESPath is a query language for JSON. <code>MIT</code>"},{"location":"blog/2024/09/30/best-of-python/#code-inspection","title":"Code Inspection","text":"deepdiff (\ud83e\udd4736 \u00b7  \u2b50 1.9K) - DeepDiff: Deep Difference and search of any Python object/data... <code>MIT</code>  - [GitHub](https://github.com/seperman/deepdiff) (\ud83d\udc68\u200d\ud83d\udcbb 81 \u00b7 \ud83d\udd00 210 \u00b7 \ud83d\udce6 11K \u00b7 \ud83d\udccb 290 - 20% open \u00b7 \u23f1\ufe0f 08.04.2024):      <pre><code>git clone https://github.com/seperman/deepdiff\n</code></pre> - [PyPi](https://pypi.org/project/deepdiff) (\ud83d\udce5 12M / month \u00b7 \ud83d\udce6 830 \u00b7 \u23f1\ufe0f 08.04.2024):     <pre><code>pip install deepdiff\n</code></pre> - [Conda](https://anaconda.org/conda-forge/deepdiff) (\ud83d\udce5 440K \u00b7 \u23f1\ufe0f 09.04.2024):     <pre><code>conda install -c conda-forge deepdiff\n</code></pre> Show 3 hidden projects...  - importlib-resources (\ud83e\udd4831 \u00b7  \u2b50 58) - Backport of the importlib.resources module. <code>Apache-2</code> - typing_inspect (\ud83e\udd4925 \u00b7  \u2b50 330 \u00b7 \ud83d\udc80) - Runtime inspection utilities for Python typing module. <code>MIT</code> - entrypoints (\ud83e\udd4923 \u00b7  \u2b50 74 \u00b7 \ud83d\udc80) - Discover and load entry points from installed packages. <code>MIT</code>"},{"location":"blog/2024/09/30/best-of-python/#general-utilities","title":"General Utilities","text":"attrs (\ud83e\udd4742 \u00b7  \u2b50 5.1K \u00b7 \ud83d\udcc9) - Python Classes Without Boilerplate. <code>MIT</code>  - [GitHub](https://github.com/python-attrs/attrs) (\ud83d\udc68\u200d\ud83d\udcbb 160 \u00b7 \ud83d\udd00 360 \u00b7 \ud83d\udce6 1M \u00b7 \ud83d\udccb 710 - 18% open \u00b7 \u23f1\ufe0f 03.06.2024):      <pre><code>git clone https://github.com/python-attrs/attrs\n</code></pre> - [PyPi](https://pypi.org/project/attrs) (\ud83d\udce5 210M / month \u00b7 \ud83d\udce6 7.9K \u00b7 \u23f1\ufe0f 31.12.2023):     <pre><code>pip install attrs\n</code></pre> - [Conda](https://anaconda.org/conda-forge/attrs) (\ud83d\udce5 37M \u00b7 \u23f1\ufe0f 31.12.2023):     <pre><code>conda install -c conda-forge attrs\n</code></pre> more-itertools (\ud83e\udd4739 \u00b7  \u2b50 3.5K) - More routines for operating on iterables, beyond itertools. <code>MIT</code>  - [GitHub](https://github.com/more-itertools/more-itertools) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 270 \u00b7 \ud83d\udce5 3K \u00b7 \ud83d\udce6 220K \u00b7 \ud83d\udccb 310 - 7% open \u00b7 \u23f1\ufe0f 02.06.2024):      <pre><code>git clone https://github.com/more-itertools/more-itertools\n</code></pre> - [PyPi](https://pypi.org/project/more-itertools) (\ud83d\udce5 82M / month \u00b7 \ud83d\udce6 3.4K \u00b7 \u23f1\ufe0f 08.01.2024):     <pre><code>pip install more-itertools\n</code></pre> - [Conda](https://anaconda.org/conda-forge/more-itertools) (\ud83d\udce5 15M \u00b7 \u23f1\ufe0f 08.01.2024):     <pre><code>conda install -c conda-forge more-itertools\n</code></pre> toolz (\ud83e\udd4837 \u00b7  \u2b50 4.5K) - A functional standard library for Python. <code>BSD-3</code>  - [GitHub](https://github.com/pytoolz/toolz) (\ud83d\udc68\u200d\ud83d\udcbb 77 \u00b7 \ud83d\udd00 260 \u00b7 \ud83d\udce6 160K \u00b7 \ud83d\udccb 270 - 46% open \u00b7 \u23f1\ufe0f 24.01.2024):      <pre><code>git clone https://github.com/pytoolz/toolz\n</code></pre> - [PyPi](https://pypi.org/project/toolz) (\ud83d\udce5 34M / month \u00b7 \ud83d\udce6 1.4K \u00b7 \u23f1\ufe0f 24.01.2024):     <pre><code>pip install toolz\n</code></pre> - [Conda](https://anaconda.org/conda-forge/toolz) (\ud83d\udce5 21M \u00b7 \u23f1\ufe0f 24.01.2024):     <pre><code>conda install -c conda-forge toolz\n</code></pre> boltons (\ud83e\udd4835 \u00b7  \u2b50 6.4K) - Like builtins, but boltons. 250+ constructs, recipes, and snippets.. <code>BSD-3</code>  - [GitHub](https://github.com/mahmoud/boltons) (\ud83d\udc68\u200d\ud83d\udcbb 90 \u00b7 \ud83d\udd00 350 \u00b7 \ud83d\udce5 30 \u00b7 \ud83d\udce6 7.3K \u00b7 \ud83d\udccb 180 - 39% open \u00b7 \u23f1\ufe0f 28.04.2024):      <pre><code>git clone https://github.com/mahmoud/boltons\n</code></pre> - [PyPi](https://pypi.org/project/boltons) (\ud83d\udce5 4.4M / month \u00b7 \ud83d\udce6 350 \u00b7 \u23f1\ufe0f 31.03.2024):     <pre><code>pip install boltons\n</code></pre> - [Conda](https://anaconda.org/conda-forge/boltons) (\ud83d\udce5 5M \u00b7 \u23f1\ufe0f 01.04.2024):     <pre><code>conda install -c conda-forge boltons\n</code></pre> tenacity (\ud83e\udd4833 \u00b7  \u2b50 6.1K) - Retrying library for Python. <code>Apache-2</code>  - [GitHub](https://github.com/jd/tenacity) (\ud83d\udc68\u200d\ud83d\udcbb 92 \u00b7 \ud83d\udd00 260 \u00b7 \ud83d\udccb 260 - 39% open \u00b7 \u23f1\ufe0f 14.03.2024):      <pre><code>git clone https://github.com/jd/tenacity\n</code></pre> - [PyPi](https://pypi.org/project/tenacity) (\ud83d\udce5 67M / month \u00b7 \ud83d\udce6 2.4K \u00b7 \u23f1\ufe0f 07.05.2024):     <pre><code>pip install tenacity\n</code></pre> - [Conda](https://anaconda.org/conda-forge/tenacity) (\ud83d\udce5 6.8M \u00b7 \u23f1\ufe0f 09.05.2024):     <pre><code>conda install -c conda-forge tenacity\n</code></pre> returns (\ud83e\udd4931 \u00b7  \u2b50 3.3K) - Make your functions return something meaningful, typed, and safe!. <code>BSD-2</code>  - [GitHub](https://github.com/dry-python/returns) (\ud83d\udc68\u200d\ud83d\udcbb 49 \u00b7 \ud83d\udd00 110 \u00b7 \ud83d\udce6 560 \u00b7 \ud83d\udccb 420 - 15% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/dry-python/returns\n</code></pre> - [PyPi](https://pypi.org/project/returns) (\ud83d\udce5 180K / month \u00b7 \ud83d\udce6 59 \u00b7 \u23f1\ufe0f 26.08.2023):     <pre><code>pip install returns\n</code></pre> - [Conda](https://anaconda.org/conda-forge/returns) (\ud83d\udce5 9.6K \u00b7 \u23f1\ufe0f 28.08.2023):     <pre><code>conda install -c conda-forge returns\n</code></pre> funcy (\ud83e\udd4930 \u00b7  \u2b50 3.3K) - A fancy and practical functional tools. <code>BSD-3</code>  - [GitHub](https://github.com/Suor/funcy) (\ud83d\udc68\u200d\ud83d\udcbb 33 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce6 11K \u00b7 \ud83d\udccb 81 - 11% open \u00b7 \u23f1\ufe0f 01.05.2024):      <pre><code>git clone https://github.com/Suor/funcy\n</code></pre> - [PyPi](https://pypi.org/project/funcy) (\ud83d\udce5 1.5M / month \u00b7 \ud83d\udce6 370 \u00b7 \u23f1\ufe0f 28.03.2023):     <pre><code>pip install funcy\n</code></pre> - [Conda](https://anaconda.org/conda-forge/funcy) (\ud83d\udce5 430K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge funcy\n</code></pre> natsort (\ud83e\udd4929 \u00b7  \u2b50 860) - Simple yet flexible natural sorting in Python. <code>MIT</code>  - [GitHub](https://github.com/SethMMorton/natsort) (\ud83d\udc68\u200d\ud83d\udcbb 22 \u00b7 \ud83d\udd00 50 \u00b7 \ud83d\udce6 29K \u00b7 \ud83d\udccb 94 - 2% open \u00b7 \u23f1\ufe0f 04.03.2024):      <pre><code>git clone https://github.com/SethMMorton/natsort\n</code></pre> - [PyPi](https://pypi.org/project/natsort) (\ud83d\udce5 4.9M / month \u00b7 \ud83d\udce6 1.3K \u00b7 \u23f1\ufe0f 20.06.2023):     <pre><code>pip install natsort\n</code></pre> - [Conda](https://anaconda.org/conda-forge/natsort) (\ud83d\udce5 1.6M \u00b7 \u23f1\ufe0f 20.06.2023):     <pre><code>conda install -c conda-forge natsort\n</code></pre> ubelt (\ud83e\udd4924 \u00b7  \u2b50 710) - A Python utility library with a stdlib like feel and extra batteries... <code>Apache-2</code>  - [GitHub](https://github.com/Erotemic/ubelt) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 42 \u00b7 \ud83d\udce5 13 \u00b7 \ud83d\udccb 15 - 13% open \u00b7 \u23f1\ufe0f 26.04.2024):      <pre><code>git clone https://github.com/Erotemic/ubelt\n</code></pre> - [PyPi](https://pypi.org/project/ubelt) (\ud83d\udce5 22K / month \u00b7 \ud83d\udce6 100 \u00b7 \u23f1\ufe0f 20.03.2024):     <pre><code>pip install ubelt\n</code></pre> - [Conda](https://anaconda.org/conda-forge/ubelt) (\ud83d\udce5 91K \u00b7 \u23f1\ufe0f 20.03.2024):     <pre><code>conda install -c conda-forge ubelt\n</code></pre> Show 6 hidden projects...  - python-dependency-injector (\ud83e\udd4832 \u00b7  \u2b50 3.6K \u00b7 \ud83d\udc80) - Dependency injection framework for Python. <code>BSD-3</code> - retrying (\ud83e\udd4927 \u00b7  \u2b50 1.9K \u00b7 \ud83d\udc80) - Retrying is an Apache 2.0 licensed general-purpose retrying.. <code>Apache-2</code> - ratelimit (\ud83e\udd4925 \u00b7  \u2b50 720 \u00b7 \ud83d\udc80) - API Rate Limit Decorator. <code>MIT</code> - pinject (\ud83e\udd4924 \u00b7  \u2b50 1.3K \u00b7 \ud83d\udc80) - A pythonic dependency injection library. <code>Apache-2</code> - CommonRegex (\ud83e\udd4923 \u00b7  \u2b50 1.6K \u00b7 \ud83d\udc80) - A collection of common regular expressions bundled with an easy.. <code>MIT</code> - pampy (\ud83e\udd4922 \u00b7  \u2b50 3.5K \u00b7 \ud83d\udc80) - Pampy: The Pattern Matching for Python you always dreamed of. <code>MIT</code>"},{"location":"blog/2024/09/30/best-of-python/#python-implementations","title":"Python Implementations","text":"cpython (\ud83e\udd4752 \u00b7  \u2b50 60K) - The Python programming language. <code>MIT</code>  - [GitHub](https://github.com/python/cpython) (\ud83d\udc68\u200d\ud83d\udcbb 2.9K \u00b7 \ud83d\udd00 29K \u00b7 \ud83d\udce6 610K \u00b7 \ud83d\udccb 69K - 12% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/python/cpython\n</code></pre> - [PyPi](https://pypi.org/project/cpython) (\ud83d\udce5 54 / month \u00b7 \ud83d\udce6 20 \u00b7 \u23f1\ufe0f 22.07.2020):     <pre><code>pip install cpython\n</code></pre> - [Conda](https://anaconda.org/conda-forge/typing) (\ud83d\udce5 3M \u00b7 \u23f1\ufe0f 17.05.2024):     <pre><code>conda install -c conda-forge typing\n</code></pre> - [npm](https://www.npmjs.com/package/@buckpkg/python) (\ud83d\udce6 6 \u00b7 \u23f1\ufe0f 03.08.2017):     <pre><code>npm install @buckpkg/python\n</code></pre> micropython (\ud83e\udd4833 \u00b7  \u2b50 19K) - MicroPython - a lean and efficient Python implementation for.. <code>Python-2.0</code>  - [GitHub](https://github.com/micropython/micropython) (\ud83d\udc68\u200d\ud83d\udcbb 630 \u00b7 \ud83d\udd00 7.4K \u00b7 \ud83d\udce5 79K \u00b7 \ud83d\udccb 5.6K - 32% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/micropython/micropython\n</code></pre> - [PyPi](https://pypi.org/project/micropython-_markupbase) (\u23f1\ufe0f 10.10.2016):     <pre><code>pip install micropython-_markupbase\n</code></pre> Show 4 hidden projects...  - grumpy (\ud83e\udd4823 \u00b7  \u2b50 11K \u00b7 \ud83d\udc80) - Grumpy is a Python to Go source code transcompiler and runtime. <code>Apache-2</code> - pyston (\ud83e\udd4922 \u00b7  \u2b50 2.5K \u00b7 \ud83d\udc80) - A faster and highly-compatible implementation of the Python.. <code>Apache-2</code> - stackless (\ud83e\udd4917 \u00b7  \u2b50 1K \u00b7 \ud83d\udc80) - The Stackless Python programming language. <code>\u2757Unlicensed</code> - cl-python (\ud83e\udd4911 \u00b7  \u2b50 360 \u00b7 \ud83d\udca4) - An implementation of Python in Common Lisp. <code>\u2757Unlicensed</code>"},{"location":"blog/2024/09/30/best-of-python/#others","title":"Others","text":"Pygments (\ud83e\udd4743 \u00b7  \u2b50 1.7K) - Pygments is a generic syntax highlighter written in Python. <code>BSD-2</code>  - [GitHub](https://github.com/pygments/pygments) (\ud83d\udc68\u200d\ud83d\udcbb 840 \u00b7 \ud83d\udd00 620 \u00b7 \ud83d\udce6 740K \u00b7 \ud83d\udccb 1.8K - 23% open \u00b7 \u23f1\ufe0f 20.05.2024):      <pre><code>git clone https://github.com/pygments/pygments\n</code></pre> - [PyPi](https://pypi.org/project/pygments) (\ud83d\udce5 110M / month \u00b7 \ud83d\udce6 6.9K \u00b7 \u23f1\ufe0f 04.05.2024):     <pre><code>pip install pygments\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pygments) (\ud83d\udce5 30M \u00b7 \u23f1\ufe0f 04.05.2024):     <pre><code>conda install -c conda-forge pygments\n</code></pre> cookiecutter (\ud83e\udd4741 \u00b7  \u2b50 22K) - A cross-platform command-line utility that creates projects from.. <code>BSD-3</code>  - [GitHub](https://github.com/cookiecutter/cookiecutter) (\ud83d\udc68\u200d\ud83d\udcbb 320 \u00b7 \ud83d\udd00 2K \u00b7 \ud83d\udce6 28K \u00b7 \ud83d\udccb 880 - 26% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/cookiecutter/cookiecutter\n</code></pre> - [PyPi](https://pypi.org/project/cookiecutter) (\ud83d\udce5 4.1M / month \u00b7 \ud83d\udce6 830 \u00b7 \u23f1\ufe0f 21.02.2024):     <pre><code>pip install cookiecutter\n</code></pre> - [Conda](https://anaconda.org/conda-forge/cookiecutter) (\ud83d\udce5 1M \u00b7 \u23f1\ufe0f 22.02.2024):     <pre><code>conda install -c conda-forge cookiecutter\n</code></pre> pyparsing (\ud83e\udd4740 \u00b7  \u2b50 2.1K) - Python library for creating PEG parsers. <code>MIT</code>  - [GitHub](https://github.com/pyparsing/pyparsing) (\ud83d\udc68\u200d\ud83d\udcbb 66 \u00b7 \ud83d\udd00 280 \u00b7 \ud83d\udce5 11K \u00b7 \ud83d\udce6 1M \u00b7 \ud83d\udccb 350 - 13% open \u00b7 \u23f1\ufe0f 03.06.2024):      <pre><code>git clone https://github.com/pyparsing/pyparsing\n</code></pre> - [PyPi](https://pypi.org/project/pyparsing) (\ud83d\udce5 120M / month \u00b7 \ud83d\udce6 4.8K \u00b7 \u23f1\ufe0f 06.03.2024):     <pre><code>pip install pyparsing\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pyparsing) (\ud83d\udce5 44M \u00b7 \u23f1\ufe0f 06.03.2024):     <pre><code>conda install -c conda-forge pyparsing\n</code></pre> pycparser (\ud83e\udd4838 \u00b7  \u2b50 3.2K) - Complete C99 parser in pure Python. <code>BSD-3</code>  - [GitHub](https://github.com/eliben/pycparser) (\ud83d\udc68\u200d\ud83d\udcbb 84 \u00b7 \ud83d\udd00 600 \u00b7 \ud83d\udce6 820K \u00b7 \ud83d\udccb 360 - 9% open \u00b7 \u23f1\ufe0f 15.04.2024):      <pre><code>git clone https://github.com/eliben/pycparser\n</code></pre> - [PyPi](https://pypi.org/project/pycparser) (\ud83d\udce5 240M / month \u00b7 \ud83d\udce6 2.1K \u00b7 \u23f1\ufe0f 30.03.2024):     <pre><code>pip install pycparser\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pycparser) (\ud83d\udce5 39M \u00b7 \u23f1\ufe0f 30.03.2024):     <pre><code>conda install -c conda-forge pycparser\n</code></pre> py4j (\ud83e\udd4835 \u00b7  \u2b50 1.2K) - Py4J enables Python programs to dynamically access arbitrary Java objects. <code>BSD-3</code>  - [GitHub](https://github.com/py4j/py4j) (\ud83d\udc68\u200d\ud83d\udcbb 41 \u00b7 \ud83d\udd00 210 \u00b7 \ud83d\udce6 40K \u00b7 \ud83d\udccb 420 - 35% open \u00b7 \u23f1\ufe0f 16.04.2024):      <pre><code>git clone https://github.com/bartdag/py4j\n</code></pre> - [PyPi](https://pypi.org/project/py4j) (\ud83d\udce5 51M / month \u00b7 \ud83d\udce6 290 \u00b7 \u23f1\ufe0f 12.08.2022):     <pre><code>pip install py4j\n</code></pre> - [Conda](https://anaconda.org/conda-forge/py4j) (\ud83d\udce5 5.8M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge py4j\n</code></pre> fastcore (\ud83e\udd4834 \u00b7  \u2b50 900) - Python supercharged for the fastai library. <code>Apache-2</code>  - [GitHub](https://github.com/fastai/fastcore) (\ud83d\udc68\u200d\ud83d\udcbb 61 \u00b7 \ud83d\udd00 260 \u00b7 \ud83d\udce6 6.6K \u00b7 \ud83d\udccb 360 - 8% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/fastai/fastcore\n</code></pre> - [PyPi](https://pypi.org/project/fastcore) (\ud83d\udce5 1.5M / month \u00b7 \ud83d\udce6 640 \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>pip install fastcore\n</code></pre> - [Conda](https://anaconda.org/conda-forge/fastcore) (\ud83d\udce5 78K \u00b7 \u23f1\ufe0f 05.06.2024):     <pre><code>conda install -c conda-forge fastcore\n</code></pre> diagrams (\ud83e\udd4833 \u00b7  \u2b50 35K) - Diagram as Code for prototyping cloud system architectures. <code>MIT</code>  - [GitHub](https://github.com/mingrammer/diagrams) (\ud83d\udc68\u200d\ud83d\udcbb 140 \u00b7 \ud83d\udd00 2.2K \u00b7 \ud83d\udce6 1.5K \u00b7 \ud83d\udccb 560 - 66% open \u00b7 \u23f1\ufe0f 13.04.2024):      <pre><code>git clone https://github.com/mingrammer/diagrams\n</code></pre> - [PyPi](https://pypi.org/project/diagrams) (\ud83d\udce5 1.2M / month \u00b7 \ud83d\udce6 67 \u00b7 \u23f1\ufe0f 30.10.2023):     <pre><code>pip install diagrams\n</code></pre> - [Conda](https://anaconda.org/conda-forge/diagrams) (\ud83d\udce5 190K \u00b7 \u23f1\ufe0f 30.10.2023):     <pre><code>conda install -c conda-forge diagrams\n</code></pre> Copier (\ud83e\udd4833 \u00b7  \u2b50 1.7K) - Library and command-line utility for rendering projects templates. <code>MIT</code>  - [GitHub](https://github.com/copier-org/copier) (\ud83d\udc68\u200d\ud83d\udcbb 76 \u00b7 \ud83d\udd00 170 \u00b7 \ud83d\udce6 990 \u00b7 \ud83d\udccb 470 - 15% open \u00b7 \u23f1\ufe0f 06.06.2024):      <pre><code>git clone https://github.com/copier-org/copier\n</code></pre> - [PyPi](https://pypi.org/project/copier) (\ud83d\udce5 370K / month \u00b7 \ud83d\udce6 110 \u00b7 \u23f1\ufe0f 04.04.2024):     <pre><code>pip install copier\n</code></pre> pluggy (\ud83e\udd4833 \u00b7  \u2b50 1.2K) - A minimalist production ready plugin system. <code>MIT</code>  - [GitHub](https://github.com/pytest-dev/pluggy) (\ud83d\udc68\u200d\ud83d\udcbb 54 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udccb 190 - 27% open \u00b7 \u23f1\ufe0f 04.06.2024):      <pre><code>git clone https://github.com/pytest-dev/pluggy\n</code></pre> - [PyPi](https://pypi.org/project/pluggy) (\ud83d\udce5 140M / month \u00b7 \ud83d\udce6 2K \u00b7 \u23f1\ufe0f 20.04.2024):     <pre><code>pip install pluggy\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pluggy) (\ud83d\udce5 27M \u00b7 \u23f1\ufe0f 21.04.2024):     <pre><code>conda install -c conda-forge pluggy\n</code></pre> decorator (\ud83e\udd4833 \u00b7  \u2b50 820 \u00b7 \ud83d\udca4) - Decorators for Humans. <code>BSD-2</code>  - [GitHub](https://github.com/micheles/decorator) (\ud83d\udc68\u200d\ud83d\udcbb 27 \u00b7 \ud83d\udd00 110 \u00b7 \ud83d\udce6 580K \u00b7 \ud83d\udccb 110 - 14% open \u00b7 \u23f1\ufe0f 23.08.2023):      <pre><code>git clone https://github.com/micheles/decorator\n</code></pre> - [PyPi](https://pypi.org/project/decorator) (\ud83d\udce5 110M / month \u00b7 \ud83d\udce6 2.1K \u00b7 \u23f1\ufe0f 07.01.2022):     <pre><code>pip install decorator\n</code></pre> - [Conda](https://anaconda.org/conda-forge/decorator) (\ud83d\udce5 28M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge decorator\n</code></pre> wrapt (\ud83e\udd4932 \u00b7  \u2b50 2K \u00b7 \ud83d\udca4) - A Python module for decorators, wrappers and monkey patching. <code>BSD-2</code>  - [GitHub](https://github.com/GrahamDumpleton/wrapt) (\ud83d\udc68\u200d\ud83d\udcbb 27 \u00b7 \ud83d\udd00 220 \u00b7 \ud83d\udccb 190 - 26% open \u00b7 \u23f1\ufe0f 10.11.2023):      <pre><code>git clone https://github.com/GrahamDumpleton/wrapt\n</code></pre> - [PyPi](https://pypi.org/project/wrapt) (\ud83d\udce5 150M / month \u00b7 \ud83d\udce6 2.1K \u00b7 \u23f1\ufe0f 09.11.2023):     <pre><code>pip install wrapt\n</code></pre> - [Conda](https://anaconda.org/conda-forge/wrapt) (\ud83d\udce5 15M \u00b7 \u23f1\ufe0f 09.11.2023):     <pre><code>conda install -c conda-forge wrapt\n</code></pre> pyscaffold (\ud83e\udd4929 \u00b7  \u2b50 2K \u00b7 \ud83d\udca4) - Python project template generator with batteries included. <code>MIT</code>  - [GitHub](https://github.com/pyscaffold/pyscaffold) (\ud83d\udc68\u200d\ud83d\udcbb 58 \u00b7 \ud83d\udd00 180 \u00b7 \ud83d\udccb 300 - 12% open \u00b7 \u23f1\ufe0f 20.06.2023):      <pre><code>git clone https://github.com/pyscaffold/pyscaffold\n</code></pre> - [PyPi](https://pypi.org/project/pyscaffold) (\ud83d\udce5 880K / month \u00b7 \ud83d\udce6 43 \u00b7 \u23f1\ufe0f 20.06.2023):     <pre><code>pip install pyscaffold\n</code></pre> - [Conda](https://anaconda.org/conda-forge/pyscaffold) (\ud83d\udce5 190K \u00b7 \u23f1\ufe0f 26.06.2023):     <pre><code>conda install -c conda-forge pyscaffold\n</code></pre> Send2Trash (\ud83e\udd4927 \u00b7  \u2b50 260) - Python library to natively send files to Trash (or Recycle bin) on.. <code>BSD-3</code>  - [GitHub](https://github.com/arsenetar/send2trash) (\ud83d\udc68\u200d\ud83d\udcbb 17 \u00b7 \ud83d\udd00 41 \u00b7 \ud83d\udccb 60 - 48% open \u00b7 \u23f1\ufe0f 06.04.2024):      <pre><code>git clone https://github.com/arsenetar/send2trash\n</code></pre> - [PyPi](https://pypi.org/project/send2trash) (\ud83d\udce5 21M / month \u00b7 \ud83d\udce6 490 \u00b7 \u23f1\ufe0f 07.04.2024):     <pre><code>pip install send2trash\n</code></pre> - [Conda](https://anaconda.org/conda-forge/send2trash) (\ud83d\udce5 14M \u00b7 \u23f1\ufe0f 08.04.2024):     <pre><code>conda install -c conda-forge send2trash\n</code></pre> catalogue (\ud83e\udd4926 \u00b7  \u2b50 170) - Super lightweight function registries for your library. <code>MIT</code>  - [GitHub](https://github.com/explosion/catalogue) (\ud83d\udc68\u200d\ud83d\udcbb 12 \u00b7 \ud83d\udd00 20 \u00b7 \ud83d\udce6 41K \u00b7 \ud83d\udccb 13 - 46% open \u00b7 \u23f1\ufe0f 31.05.2024):      <pre><code>git clone https://github.com/explosion/catalogue\n</code></pre> - [PyPi](https://pypi.org/project/catalogue) (\ud83d\udce5 11M / month \u00b7 \ud83d\udce6 130 \u00b7 \u23f1\ufe0f 25.09.2023):     <pre><code>pip install catalogue\n</code></pre> - [Conda](https://anaconda.org/conda-forge/catalogue) (\ud83d\udce5 1.3M \u00b7 \u23f1\ufe0f 25.09.2023):     <pre><code>conda install -c conda-forge catalogue\n</code></pre> python-mss (\ud83e\udd4925 \u00b7  \u2b50 970) - An ultra fast cross-platform multiple screenshots module in pure.. <code>MIT</code>  - [GitHub](https://github.com/BoboTiG/python-mss) (\ud83d\udc68\u200d\ud83d\udcbb 23 \u00b7 \ud83d\udd00 83 \u00b7 \ud83d\udccb 140 - 26% open \u00b7 \u23f1\ufe0f 27.02.2024):      <pre><code>git clone https://github.com/BoboTiG/python-mss\n</code></pre> - [PyPi](https://pypi.org/project/mss) (\ud83d\udce5 850K / month \u00b7 \ud83d\udce6 220 \u00b7 \u23f1\ufe0f 20.04.2023):     <pre><code>pip install mss\n</code></pre> - [Conda](https://anaconda.org/conda-forge/python-mss) (\ud83d\udce5 50K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge python-mss\n</code></pre> Show 6 hidden projects...  - keyboard (\ud83e\udd4932 \u00b7  \u2b50 3.7K \u00b7 \ud83d\udc80) - Hook and simulate global keyboard events on Windows and Linux. <code>MIT</code> - pyscreenshot (\ud83e\udd4926 \u00b7  \u2b50 500 \u00b7 \ud83d\udc80) - Python screenshot library, replacement for the Pillow.. <code>BSD-2</code> - openpyxl (\ud83e\udd4926 \u00b7  \u2b50 78) - A Python library to read/write Excel 2010 xlsx/xlsm files. <code>MIT</code> - powerline-shell (\ud83e\udd4925 \u00b7  \u2b50 6.2K \u00b7 \ud83d\udc80) - A beautiful and useful prompt for your shell. <code>MIT</code> - pluginbase (\ud83e\udd4924 \u00b7  \u2b50 1.1K \u00b7 \ud83d\udc80) - A simple but flexible plugin system for Python. <code>BSD-3</code> - macropy (\ud83e\udd4922 \u00b7  \u2b50 3.3K \u00b7 \ud83d\udc80) - Macros in Python: quasiquotes, case classes, LINQ and more!. <code>MIT</code>"},{"location":"blog/2024/09/30/best-of-python/#related-resources","title":"Related Resources","text":"<ul> <li>Best-of lists: Discover other best-of lists with awesome open-source projects on all kinds of topics.</li> <li>best-of-ml-python: A ranked list of awesome machine learning Python libraries.</li> <li>best-of-web-python: A ranked list of awesome Python libraries for web development.</li> <li>best-of-python-dev: A ranked list of awesome Python developer tools and libraries.</li> <li>awesome-python: A curated list of awesome Python frameworks, libraries, software and resources.</li> </ul>"},{"location":"blog/2024/09/30/best-of-python/#contribution","title":"Contribution","text":"<p>Contributions are encouraged and always welcome! If you like to add or update projects, choose one of the following ways:</p> <ul> <li>Open an issue by selecting one of the provided categories from the issue page and fill in the requested information.</li> <li>Modify the projects.yaml with your additions or changes, and submit a pull request. This can also be done directly via the Github UI.</li> </ul> <p>If you like to contribute to or share suggestions regarding the project metadata collection or markdown generation, please refer to the best-of-generator repository. If you like to create your own best-of list, we recommend to follow this guide.</p> <p>For more information on how to add or update projects, please read the contribution guidelines. By participating in this project, you agree to abide by its Code of Conduct.</p>"},{"location":"blog/2024/09/30/best-of-python/#license","title":"License","text":""},{"location":"blog/2024/01/25/bibtex_generator/","title":"BibTeX Generator","text":"<p>Have you ever found yourself weary and uninspired from the tedious task of manually creating BibTeX entries for your paper?</p> <p>There are, indeed, support tools and plugins that are bundled with reference managers such as Zotero, Mendeley, etc. These tools can automate the generation of a <code>.bib</code> file. To use them, you need to install a reference manager, its associated plugins, and a library of papers on your computer. However, these tools are not flawless. The BibTeX entries they generate often contain incomplete information, are poorly formatted, and include numerous unnecessary fields. You then still need to manually check and correct the entries.</p> <p>There are the times you just need to cite a paper or two, and you don't want to go through the hassle of the aforementioned complex process. In such situations, a simple tool that allows you to quickly copy and paste a BibTeX entry into your <code>.bib</code> file would be ideal. Think of such a simple tool, I have looked around the Chrome extension store to see if there is any that can pick up the Bibtex while you are browsing the paper. I found some, but they do not really work.</p> <p>Therefore, I decided to create my own tool to address this dilemma. I developed a Chrome extension that can generate the BibTeX entry for any browsing URL with just one click. I named it the 1click BibTeX. It delivers exactly what it is expected and has proven to be quite helpful. This extension, along with the Latex tools, will ensure that the manuscript's citations are properly formatted before they are delivered to the journal.</p>"},{"location":"blog/2024/01/25/bibtex_generator/#usage","title":"Usage","text":"<p>Install the 1click BibTeX extension on your Chrome browser. Then, whenever you're browsing a paper or any URL, just click on the extension icon, and the BibTeX entry will be instantly generated and copied to your clipboard. The remaining thing is just paste it to your <code>.bib</code> file.</p> <p> </p> <p>I've tested the extension on numerous publishers and websites with varying structures and it works consistently as it was designed. The tested publishers include Elsevier, Wiley, ACS, IOP, AIP, APS, arXiv,...</p> <p>Below are some examples of BibTeX entries generated by the extension 1click BibTeX:</p> <ul> <li>Article on Elsevier: 10.1016/j.commatsci.2018.10.023</li> </ul> <pre><code>@article{nguyen2019pattern,\n    title = {Pattern transformation induced by elastic instability of metallic porous structures},\n    author = {Cao Thang Nguyen and Duc Tam Ho and Seung Tae Choi and Doo-Man Chun and Sung Youb Kim },\n    year = {2019},\n    month = {2},\n    journal = {Computational Materials Science},\n    publisher = {Elsevier},\n    volume = {157},\n    pages = {17-24},\n    doi = {10.1016/j.commatsci.2018.10.023},\n    url = {https://www.sciencedirect.com/science/article/abs/pii/S0927025618306955?via%3Dihub},\n    accessDate = {Jan 25, 2024}\n}\n</code></pre> <ul> <li>Article on Wiley: 10.1002/adts.202300538</li> </ul> <pre><code>@article{nguyen2024an,\n    title = {An Enhanced Sampling Approach for Computing the Free Energy of Solid Surface and Solid\u2013Liquid Interface},\n    author = {Cao Thang Nguyen and Duc Tam Ho and Sung Youb Kim},\n    year = {2024},\n    month = {1},\n    journal = {Advanced Theory and Simulations},\n    publisher = {John Wiley &amp; Sons, Ltd},\n    volume = {7},\n    number = {1},\n    pages = {2300538},\n    doi = {10.1002/adts.202300538},\n    url = {https://onlinelibrary.wiley.com/doi/10.1002/adts.202300538},\n    accessDate = {Jan 25, 2024}\n}\n</code></pre> <ul> <li>Google Book New: America, the Vietnam War, and the World</li> </ul> <pre><code>@book{daum2003america,,\n    title = {America, the Vietnam War, and the World},\n    author = {Andreas W. Daum and Lloyd C. Gardner and Wilfried Mausbach},\n    year = {2003},\n    month = {7},\n    publisher = {Cambridge University Press},\n    isbn = {052100876X},\n    url = {https://www.google.co.kr/books/edition/America_the_Vietnam_War_and_the_World/9kn6qYwsGs4C?hl=en&amp;gbpv=0},\n    accessDate = {Jan 25, 2024}\n}\n</code></pre> <ul> <li>Google Book Classic: Currency Wars</li> </ul> <pre><code>@book{rickards2011currency,\n    title = {Currency Wars},\n    author = {James Rickards},\n    year = {2011},\n    month = {11},\n    publisher = {Penguin},\n    isbn = {110155889X},\n    url = {https://books.google.co.kr/books?id=-GDwL2s5sJoC&amp;source=gbs_book_other_versions},\n    accessDate = {Jan 25, 2024}\n}\n</code></pre> <ul> <li>Blog post: https://deci.ai/blog/decicoder-6b-the-best-multi-language-code-generation-llm-in-its-class/</li> </ul> <pre><code>@misc{deci2024introducing,\n    title = {Introducing DeciCoder-6B: The Best Multi-Language Code LLM in Its Class},\n    author = {Deci},\n    year = {2024},\n    month = {1},\n    publisher = {Deci},\n    url = {https://deci.ai/blog/decicoder-6b-the-best-multi-language-code-generation-llm-in-its-class/},\n    accessDate = {Jan 25, 2024}\n}\n</code></pre> <ul> <li>Packages on Zenodo: https://zenodo.org/records/7751762</li> </ul> <pre><code>@misc{kai2023forcefield,\n    title = {Force-field files for \"Noble gas (He, Ne and Ar) solubilities in high-pressure silicate melts calculated based on deep potential modeling\"},\n    author = {Wang, Kai and Lu, Xiancai and Liu, Xiandong and Yin, Kun},\n    year = {2023},\n    month = {3},\n    publisher = {Zenodo},\n    doi = {10.5281/zenodo.7751762},\n    url = {https://zenodo.org/records/7751762},\n    accessDate = {Jan 25, 2024}\n}\n</code></pre> <ul> <li>Bibtex this page</li> </ul> <pre><code>@misc{nguyen2024bibtex,\n    title = {BibTeX Generator},\n    author = {Cao Thang Nguyen},\n    year = {2024},\n    month = {1},\n    url = {https://thang.eu.org/blog/2024/01/25/bibtex_generator},\n    accessDate = {Jan 25, 2024}\n}\n</code></pre> <p>In summary, the new extension 1click BibTeX works well for most websites with varying data structures.</p>"},{"location":"hpc/","title":"cluster","text":""},{"location":"hpc/compile/","title":"Index","text":""},{"location":"hpc/compile/BLACS/","title":"BLACS","text":""},{"location":"hpc/compile/BLACS/#blacs-fail","title":"BLACS (fail)","text":"<p>https://thelinuxcluster.com/2011/03/27/compiling-blacs-on-centos-5/</p> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\n# wget --no-check-certificate https://www.netlib.org/blacs/mpiblacs.tgz\n# wget --no-check-certificate https://www.netlib.org/blacs/mpiblacs-patch03.tgz\ntar -xvf mpiblacs.tgz\ntar -xvf mpiblacs-patch03.tgz\ncd BLACS\ncp ./BMAKES/Bmake.MPI-LINUX Bmake.inc\n</code></pre> <pre><code>module load mpi/ompi4.1.x-gcc9\n</code></pre> <ol> <li>Edit file <code>Bmake.in</code> see this</li> </ol> <pre><code>#=============================================================================\n#====================== SECTION 1: PATHS AND LIBRARIES =======================\n#=============================================================================\nBTOPdir = /home1/p001cao/0SourceCode/tooldev/BLACS\n#  -------------------------------------\n#  Name and location of the MPI library.\n#  -------------------------------------\n   MPIdir = /home1/p001cao/app/openmpi/4.1.x-gcc9\n   MPILIBdir =\n   MPIINCdir = $(MPIdir)/include\n   MPILIB =\n\n#=============================================================================\n#========================= SECTION 2: BLACS INTERNALS ========================\n#=============================================================================\n   SYSINC =\n   INTFACE = -Df77IsF2C\n   SENDIS =\n   BUFF =\n   TRANSCOMM = -DUseMpi2\n   WHATMPI =\n   SYSERRORS =\n\n#=============================================================================\n#=========================== SECTION 3: COMPILERS ============================\n#=============================================================================\n   F77            = $(MPIdir)/mpif77\n   CC             = $(MPIdir)/mpicc\n</code></pre> <ol> <li> <p>Edit <code>TESTING/Makefile</code> <pre><code>blacstest.o : blacstest.f\n    $(F77) $(F77NO_OPTFLAGS) -c $*.f\n</code></pre> to: <pre><code>blacstest.o : blacstest.f\n    $(F77) $(F77NO_OPTFLAGS) -fno-globals -fno-f90 -fugly-complex -w -c $*.f\n</code></pre></p> </li> <li> <p>Compile the Blacs tests <pre><code>cd TESTING\nmake clean &amp;&amp; make\n</code></pre> You should see <code>xCbtest_MPI-LINUX-1</code> and <code>xFbtest_MPI-LINUX-1</code></p> </li> </ol> <p>May error</p>"},{"location":"hpc/compile/CMake/","title":"CMake","text":"<ul> <li>need C++ compiler to install CMAKE, so need to load C++ compiler before install</li> <li>Source code repo: https://github.com/Kitware/CMake</li> <li>or download CMake from: https://cmake.org/download</li> </ul> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\nwget https://cmake.org/files/v3.27/cmake-3.27.0.tar.gz\ntar zxvf cmake-3.27.0.tar.gz\ncd cmake-3.27.0\n</code></pre>"},{"location":"hpc/compile/CMake/#usc-1-eagle","title":"USC 1 (Eagle)","text":"<pre><code>module load compiler/gcc-10.3\n\n./configure --prefix=/uhome/p001cao/app/tooldev/cmake-3.27\n\nmake -j 20 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/CMake/#usc-2-tacheon","title":"USC 2 (Tacheon)","text":"<pre><code>cd /home1/p001cao/0SourceCode/tooldev\ntar zxvf cmake-3.27.0.tar.gz\ncd cmake-3.27.0\n\n# export PATH=/home1/p001cao/app/compiler/gcc-13/bin:$PATH\nmodule load compiler/gcc-13\n\n./configure --prefix=/home1/p001cao/app/tooldev/cmake-3.27\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/CMake/#create-module-file","title":"create module file","text":"<p>cd /uhome/p001cao/local/Imodfiles  \u2192  create file \"cmake-3.27\"</p> <pre><code># for Tcl script use only\nset         topdir              /uhome/p001cao/app/tooldev/cmake-3.27\n\nsetenv          cmake           $topdir\nprepend-path    PATH            $topdir/bin\nprepend-path    INCLUDE           $topdir/share/cmake-3.27/include\n</code></pre> <p>Validate installation: <pre><code>module load cmake-3.27\ncmake --version\n</code></pre></p> <p>Ref: - https://pachterlab.github.io/kallisto/local_build.html - https://github.com/Kitware/CMake</p>"},{"location":"hpc/compile/CP2K/","title":"CP2K","text":"<p>CP2K is a quantum chemistry and solid state physics software package that can perform atomistic simulations of solid state, liquid, molecular, periodic, material, crystal, and biological systems. CP2K provides a general framework for different modeling methods such as DFT using the mixed Gaussian and plane waves approaches GPW and GAPW. Supported theory levels include DFTB, LDA, GGA, MP2, RPA, semi-empirical methods (AM1, PM3, PM6, RM1, MNDO, \u2026), and classical force fields (AMBER, CHARMM, \u2026). CP2K can do simulations of molecular dynamics, metadynamics, Monte Carlo, Ehrenfest dynamics, vibrational analysis, core level spectroscopy, energy minimization, and transition state optimization using NEB or dimer method.</p> <p>\\</p>"},{"location":"hpc/compile/CP2K/#compile-cp2k","title":"Compile CP2K","text":""},{"location":"hpc/compile/CP2K/#usc2_tachyon-centos-69","title":"USC2_Tachyon - Centos 6.9","text":"Note <p>Error not found package <code>DBCSR</code> (lack of file <code>findDBCSR.cmake</code>)</p> See also <p>Build cp2k with cmake</p> <pre><code>cd /home1/p001cao/local/wSourceCode\ngit clone --recursive -b support/v2023.1 https://github.com/cp2k/cp2k.git cp2k-2023\ncd cp2k-2023\n# git pull origin master\nmkdir build_LLVM &amp;&amp; cd build_LLVM\n</code></pre> <pre><code>module load tooldev/cmake-3.24\nmodule load tooldev/binutils-2.37\nmodule load tooldev/gsl-2.7\nmodule load mpi/ompi4.1.x-clang14\nmodule load fftw/fftw3.3.10-ompi4.1.4-clang14\nmodule load tooldev/ScaLAPACK-2.2\n\nexport myCOMPILER=/home1/p001cao/local/app/openmpi/4.1.x-clang14\nexport PATH=${myCOMPILER}/bin:$PATH\nexport CC=mpicc  export CXX=mpic++  export FC=mpifort\nexport myLAPACK=/home1/p001cao/local/app/tooldev/ScaLAPACK-2.2/lib/libscalapack.a\nexport myPREFIX=/home1/p001cao/local/app/cp2k/llvmOMPI4-cp2k-2023\n\ncmake ../ -DCP2K_SCALAPACK_LINK_LIBRARIES=${myLAPACK} \\\n -DCP2K_USE_LIBXSMM=OFF -DCP2K_USE_DBCSR=OFF \\\n -DCMAKE_INSTALL_PREFIX=${myPREFIX}\n</code></pre> <pre><code>make -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/Dependencies/","title":"Some Dependencies","text":""},{"location":"hpc/compile/Dependencies/#lapack-blas","title":"LAPACK &amp; BLAS","text":"<p>Two of the most commonly used computational libraries are LAPACK and BLAS.  They are super fast in doing linear algebra operations involving matrices and vectors.</p> <ul> <li>BLAS (Basic Linear Algebra Subprograms) are routines that provide standard building blocks for performing basic vector and matrix operations.</li> <li>LAPACK (Linear Algebra PACKage) is written in Fortran 90 and provides routines for solving systems of simultaneous linear equations, least-squares solutions of linear systems of equations, eigenvalue problems, and singular value problems.</li> <li>BLAS is needed in LAPACK. BLAS &amp; LAPACK can be installed separately. First, you have to install BLAS before LAPACK, because LAPACK needs it. Download the packages from the following websites. (see here and here)</li> <li>BLAS, see [http://www.netlib.org/blas/]</li> <li>LAPACK, see [http://www.netlib.org/lapack/]</li> <li>Or can install LAPACK by cmake, where soureCode LAPACK also includes BLAS</li> </ul>"},{"location":"hpc/compile/Dependencies/#install-lapack-with-cmake","title":"install LAPACK with cmake","text":"<ul> <li>see CMAKE options in file CMakeLists.txt,</li> <li>This way also install BLAS, CBLAS, LAPACKE, set <code>-DCBLAS=on -DLAPACKE=on</code></li> </ul> <pre><code>tar -xvf lapack-3.10.0.tar.gz\ncd lapack-3.10.0\nmkdir build &amp;&amp; cd build\n</code></pre> <pre><code>module load tool_dev/cmake-3.21\nmodule load compiler/gcc-11.2\nexport PATH=/uhome/p001cao/local/app/compiler/gcc-11.2/bin:$PATH\nexport CC=gcc  export CXX=g++  export FC=gfortran\nexport LD_LIBRARY_PATH=/uhome/p001cao/local/app/compiler/gcc-11.2/lib64:$LD_LIBRARY_PATH\n\nexport myInstallDIR=/uhome/p001cao/local/app/lapack-3.10\n\ncmake .. -DCBLAS=on -DLAPACKE=on \\\n-DCMAKE_INSTALL_LIBDIR=${myInstallDIR} \\\n-DCMAKE_INSTALL_INCLUDEDIR=${myInstallDIR}\n\nmake -j 8\nmake install\n</code></pre>"},{"location":"hpc/compile/Dependencies/#usage","title":"usage","text":"<pre><code>export myLAPACK=/uhome/p001cao/local/app/lapack-3.10/liblapack.a\nexport myLAPACKE=/uhome/p001cao/local/app/lapack-3.10/liblapacke.a\nexport myBLAS=/uhome/p001cao/local/app/lapack-3.10/libblas.a\nexport myCBLAS=/uhome/p001cao/local/app/lapack-3.10/libcblas.a\n</code></pre>"},{"location":"hpc/compile/Dependencies/#scalapack","title":"ScaLAPACK","text":"<p>ScaLAPACK (Scalable LAPACK) is a library of high-performance linear algebra routines for parallel distributed memory machines. ScaLAPACK can be used as a replacement for both LAPACK and BLAS</p> <ul> <li>Installing ScaLAPACK needs BLAS, LAPACK and BLACS libraries. (BLACS now included inside ScaLAPACK)</li> <li>ScaLAPACK now only supports MPI.</li> <li>Installation docs of ScaLAPACK here</li> <li>Some guide here</li> <li>SouceCode</li> <li>see CMAKE options in file CMakeLists.txt</li> </ul> Note <p>ScaLAPACK just be compiled by MPI compilers</p>"},{"location":"hpc/compile/Dependencies/#download","title":"Download","text":"<pre><code>cd /home1/p001cao/local/wSourceCode/tooldev\ngit clone -b tags/v2.2.1 https://github.com/Reference-ScaLAPACK/scalapack.git ScaLAPACK-2.2.1\ncd ScaLAPACK-2.2.1\nmkdir build &amp;&amp; cd build\n</code></pre> <ul> <li>Or download release</li> </ul> <pre><code>tar -xvf scalapack-2.1.0.tar.gz\ncd scalapack-2.1.0\nmkdir build &amp;&amp; cd build\n</code></pre>"},{"location":"hpc/compile/Dependencies/#self-build-blas-and-lapack","title":"self-build BLAS and LAPACK","text":"<pre><code>module load tooldev/cmake-3.24\nmodule load mpi/ompi4.1.x-clang14\n\nexport PATH=/home1/p001cao/local/app/openmpi/4.1.x-clang14/bin:$PATH\nexport CC=mpicc  export CXX=mpic++  export F90=mpif90 export F77=mpif77\n</code></pre> <pre><code>cmake .. -DUSE_OPTIMIZED_LAPACK_BLAS=on \\\n-DCMAKE_C_COMPILER=mpicc -DCMAKE_Fortran_COMPILER=mpifort \\\n-DCMAKE_INSTALL_PREFIX=/home1/p001cao/local/app/tooldev/ScaLAPACK-2.2\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/Dependencies/#preinstall-blas-and-lapack","title":"preinstall BLAS and LAPACK","text":"<pre><code>export myLAPACK=/uhome/p001cao/local/app/lapack-3.10/liblapack.a\nexport myBLAS=/uhome/p001cao/local/app/lapack-3.10/libblas.a\n\ncmake .. -DBLAS_LIBRARIES=${myBLAS} -DLAPACK_LIBRARIES=${myLAPACK} \\\n-DCMAKE_C_COMPILER=mpicc -DCMAKE_Fortran_COMPILER=mpifort \\\n-DCMAKE_INSTALL_PREFIX=/home1/p001cao/local/app/tooldev/ScaLAPACK-2.2\n</code></pre> <p>Some options if errors</p> <pre><code>export CFLAGS=\"-Ofast -march=x86-64\"\nexport FFLAGS=\"-Ofast -march=x86-64 -fallow-argument-mismatch\"\nexport FFLAGS=\"-std=legacy\"\n</code></pre> <p>Module file</p> <pre><code>set     topdir          /home1/p001cao/local/app/tooldev/ScaLAPACK-2.2\n\nprepend-path    LD_LIBRARY_PATH     $topdir/lib\nprepend-path    PKG_CONFIG_PATH     $topdir/lib/pkgconfig\n</code></pre>"},{"location":"hpc/compile/Dependencies/#openblas","title":"OpenBLAS","text":"<p>OpenBLAS is an open source optimized BLAS (Basic Linear Algebra Subprograms) library based on GotoBLAS2 1.13 BSD version.</p> <ul> <li>Installation  here</li> <li>SouceCode</li> <li>see CMAKE options in file CMakeLists.txt</li> </ul> <pre><code>- to create dynamic link (file *.so), use: -DBUILD_SHARED_LIBS=yes\n</code></pre> <pre><code>git clone https://github.com/xianyi/OpenBLAS.git\ncd OpenBLAS\nmkdir build &amp;&amp; cd build\n</code></pre> <ul> <li>Or download release</li> </ul> <pre><code>tar -xvf OpenBLAS-0.3.19.tar.gz\ncd OpenBLAS-0.3.19\nmkdir build &amp;&amp; cd build\n</code></pre>"},{"location":"hpc/compile/Dependencies/#ucs-2","title":"UCS 2","text":"<pre><code>module load tool_dev/cmake-3.20.3\nmodule load mpi/ompi5.0.0-gcc11.2\n\ncmake .. -DCMAKE_INSTALL_PREFIX=/home1/p001cao/local/app/tool_dev/openBLAS-0.3.19\n\nmake -j 16 &amp;&amp; make install\n</code></pre> <pre><code>## Usage\nexport myBLAS=/home1/p001cao/local/app/tool_dev/openBLAS-0.3.19/lib64/libopenblas.a\ncmake .. -DBLAS_LIBRARIES=${myBLAS} -DLAPACK_LIBRARIES=${myBLAS} \\\n</code></pre>"},{"location":"hpc/compile/FFTW/","title":"FFTW","text":"<ul> <li>FFTW</li> <li>Download FFTW</li> <li>Compile with OMPI + GCC<ul> <li>USC1</li> <li>USC2</li> <li>CAN-GPU</li> </ul> </li> <li>4. Make module file</li> <li>Compile with OMPI + LLVM<ul> <li>USC2</li> </ul> </li> </ul>"},{"location":"hpc/compile/FFTW/#fftw","title":"FFTW","text":"<ul> <li>NOTE: To compile with mpi-enable, need to use openMPI-compiler: MPICC=mpicc</li> <li>Installation guide</li> </ul>"},{"location":"hpc/compile/FFTW/#download-fftw","title":"Download FFTW","text":"<p>Download FFTW-3.3.10</p> <pre><code>tar -xvzf fftw-3.3.10.tar.gz\ncd fftw-3.3.10\nmkdir build &amp;&amp; cd build\n</code></pre>"},{"location":"hpc/compile/FFTW/#compile-with-ompi-gcc","title":"Compile with OMPI + GCC","text":"<p>Compiling FFTW 3.3.10 (Single,Double)</p> <pre><code>--enable-sse2: Single, Double\n--enable-long-double : Long-Double Precision\n--enable-float : Single\n--enable-shared: fBIC\n</code></pre>"},{"location":"hpc/compile/FFTW/#usc1","title":"USC1","text":"<pre><code>module load mpi/ompi5.0.0-gcc11.2\nexport PATH=/uhome/p001cao/app/openmpi/5.0.0-gcc11.2-eagle/bin:$PATH\nexport CC=mpicc  export CXX=mpic++  export FORTRAN=mpifort  export F90=mpif90\n\n../configure --enable-sse2 \\\n--enable-threads --enable-openmp --enable-mpi --enable-shared \\\n--prefix=/uhome/p001cao/app/fftw/3.3.10-ompi5.0-gcc11.2\n</code></pre>"},{"location":"hpc/compile/FFTW/#can-gpu","title":"CAN-GPU","text":"<pre><code>module load mpi/ompi4.1-gcc7.4-cuda\nexport PATH=$PATH:/home/thang/app/openmpi/4.1.1-gcc7.4-cuda/bin\nexport CC=mpicc  export CXX=mpic++  export FORTRAN=mpifort  export F90=mpif90\n\n../configure --enable-sse2 \\\n--enable-threads --enable-openmp --enable-mpi \\\n--prefix=/home/thang/app/fftw/3.3.8-ompi4.1-gcc7.4\n</code></pre> <p>make -j 12 make install</p> <p>validate: Inside \"/uhome/p001cao/app/fftw/3.3.8-ompi4.1-gcc10.3/lib\" you should see at least the files below libfftw3.a libfftw3_mpi.a libfftw3_omp.a libfftw3_threads.a .... ....</p>"},{"location":"hpc/compile/FFTW/#4-make-module-file","title":"4. Make module file","text":"<p>at directory: /uhome/p001cao/local/share/lmodfiles/mpi\u2192 create file \"ompi4.1.1-gcc11.2-noUCX\"</p> <pre><code># for Tcl script use only\n# for Tcl script use only\nset     topdir          /uhome/p001cao/app/fftw/3.3.10-ompi5.0-gcc11.2\n\nprepend-path    PATH                $topdir/bin\nprepend-path    INCLUDE             $topdir/include\nprepend-path    LD_LIBRARY_PATH     $topdir/lib\nprepend-path    PKG_CONFIG_PATH     $topdir/lib/pkgconfig\n</code></pre>"},{"location":"hpc/compile/FFTW/#usc2","title":"USC2","text":""},{"location":"hpc/compile/FFTW/#with-ompi-llvm","title":"With OMPI + LLVM","text":"<pre><code>cd /home1/p001cao/0SourceCode/tooldev\n# tar -xvzf fftw-3.3.10.tar.gz\ncd fftw-3.3.10\nrm -rf build_LLVM &amp;&amp; mkdir build_LLVM &amp;&amp; cd build_LLVM\n\nmodule load mpi/ompi4.1.x-clang17\n\nexport PATH=/home1/p001cao/app/openmpi/4.1.x-clang17/bin:$PATH\nexport CC=mpicc  export CXX=mpic++  export FC=mpifort\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\nexport myPREFIX=/home1/p001cao/app/mpi/fftw3.3.10-ompi4.1.x-clang17\n\n../configure --enable-sse2 --enable-threads --enable-openmp --enable-mpi --enable-shared --prefix=${myPREFIX}\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/FFTW/#with-ompi-gcc","title":"With OMPI + GCC","text":"<pre><code>cd fftw-3.3.10\nrm -rf build_ase &amp;&amp; mkdir build_ase &amp;&amp; cd build_ase\n\nmodule load mpi/ompi4.1.5-gcc9\n\nOPENMPI=/home1/p001cao/app/openmpi/4.1.5-gcc9\nexport PATH=$OPENMPI/bin:$PATH\nexport CC=mpicc  export CXX=mpic++  export FC=mpifort  export F90=mpif90\nexport myPREFIX=/home1/p001cao/app/mpi/fftw3.3.10-ompi4.1.5-gcc9\n\n../configure --enable-sse2 --enable-threads --enable-openmp --enable-mpi --enable-shared --prefix=${myPREFIX}\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/GCC/","title":"GCC","text":"<ul> <li>Compile GCC</li> <li>GCC-11<ul> <li>1. Download:</li> <li>2. Install</li> <li>USC1: (eagle)</li> <li>USC 2</li> <li>CAN</li> <li>CAN_GPU</li> <li>3. Make module file</li> </ul> </li> <li>GCC-13<ul> <li>USC 2</li> </ul> </li> </ul>"},{"location":"hpc/compile/GCC/#compile-gcc","title":"Compile GCC","text":"<p>The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, Go, and D, as well as libraries for these languages (libstdc++,...).</p> <pre><code>- Some applications require C++11, this is only supported on GCC 4.8 or newer\n- [intel 2018 support gcc versions 4.3 - 6.3](https://software.intel.com/en-us/articles/intel-c-compiler-180-for-linux-release-notes-for-intel-parallel-studio-xe-2018)\n- compile GCC outside source-dir, to avoid modifying source code when compiling get fail\n- cuda does not support gcc &gt; 8\n</code></pre>"},{"location":"hpc/compile/GCC/#1-download","title":"1. Download:","text":"<ul> <li>check all availabe versions GCC</li> <li>at this link</li> <li>or check this:   <pre><code>svn ls svn://gcc.gnu.org/svn/gcc/tags | grep gcc | grep release\n#or http://ftp.tsukuba.wide.ad.jp/software/gcc/releases\n</code></pre></li> <li>download</li> <li>use this   <pre><code>wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-10.3.0/gcc-10.3.0.tar.gz\ntar xvf gcc-10.3.0.tar.gz\n</code></pre></li> <li>or git   <pre><code>git clone -b releases/gcc-11.2.0 https://github.com/gcc-mirror/gcc gcc-11.2.0\n</code></pre></li> </ul>"},{"location":"hpc/compile/GCC/#2-install","title":"2. Install","text":"<p>Include 2 steps: - download prerequisites: <pre><code>cd gcc-11.2.0\n./contrib/download_prerequisites\n</code></pre> - Configure: see this link <pre><code>configure error: uint64_t or int64_t not found     --&gt; need at least gcc-4.5\n</code></pre></p>"},{"location":"hpc/compile/GCC/#eagle-centos-78","title":"Eagle - Centos 7.8","text":"<pre><code>git clone -b releases/gcc-11.2.0 https://github.com/gcc-mirror/gcc gcc-11.2.0\ncd gcc-11.2\ngit checkout releases/gcc-11.2\n./contrib/download_prerequisites\n\nmkdir build &amp;&amp; cd build\nmodule load compiler/gcc-10.3         # to avoid:  uint64_t or int64_t not found\n\n../configure --enable-languages=c,c++,objc,obj-c++,fortran \\\n  --enable-shared --disable-multilib --with-system-zlib \\\n  --enable-checking=release --prefix=/uhome/p001cao/app/compiler/gcc-11.2\n</code></pre> <pre><code>make  -j 20         # not use -j to know what error\nmake install\n# check: g++ -v\n</code></pre>"},{"location":"hpc/compile/GCC/#tachyon-centos-69","title":"Tachyon - Centos 6.9","text":"<pre><code>cd /home1/p001cao/0SourceCode\n# git clone -b releases/gcc-11 https://github.com/gcc-mirror/gcc  gcc-11\ncd gcc-11\n# git checkout releases/gcc-11\n./contrib/download_prerequisites\n</code></pre> <pre><code>rm -rf build &amp;&amp; mkdir build &amp;&amp; cd build\n\nmyGCC=/home2/app/compiler/gcc/9.5.0\nexport PATH=$myGCC/bin:$PATH\nexport LD_LIBRARY_PATH=$myGCC/lib64:$LD_LIBRARY_PATH\n\n../configure --enable-languages=c,c++,objc,obj-c++,fortran \\\n  --enable-gold=yes --enable-checking=release --enable-shared --disable-multilib --with-system-zlib \\\n  --prefix=/home1/p001cao/app/compiler/gcc-11\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/GCC/#can","title":"CAN","text":"<pre><code>--prefix=/home/thang/app/compiler/gcc-10.3\n</code></pre>"},{"location":"hpc/compile/GCC/#can_gpu","title":"CAN_GPU","text":"<pre><code>module load compiler/gcc-7.4   # cuda note support gcc &gt; 8\n--prefix=/home/thang/app/compiler/gcc-10.3'\n</code></pre>"},{"location":"hpc/compile/GCC/#3-make-module-file","title":"3. Make module file","text":"<p>at directory: /uhome/p001cao/local/share/lmodfiles/GCC \u2192 create file \"gcc-11.2\"</p> <pre><code>module load compiler/gcc/9.5.0\n\n# for Tcl script use only\nset             topdir          /uhome/p001cao/app/compiler/gcc-11.2\n\nsetenv           CC gcc\nsetenv           CXX g++\nsetenv           FC gfortran\nsetenv           F90 gfortran\n\nprepend-path    PATH                    $topdir/bin\nprepend-path    INCLUDE                   $topdir/include/c++/11.2.0\nprepend-path    LD_LIBRARY_PATH         $topdir/lib/gcc/x86_64-pc-linux-gnu/11.2.0\nprepend-path    LD_LIBRARY_PATH         $topdir/lib64\nprepend-path    LD_LIBRARY_PATH         $topdir/libexec/gcc/x86_64-pc-linux-gnu/11.2.0\nprepend-path    INFOPATH                $topdir/share/info\n</code></pre>"},{"location":"hpc/compile/LAMMPS/","title":"Compiling LAMMPS","text":"<p>This note intends to the struggling work to deploy LAMMPS on some Linux clusters</p> <p></p> <ul> <li>Compiling LAMMPS</li> <li>Preparation<ul> <li>1. Prerequisite</li> <li>2. Download</li> <li>3. Packages</li> </ul> </li> <li>I. Compiling with GCC + OMPI<ul> <li>USC1_Eagle - Centos 6.5 cluster with InfiniBand</li> <li>Module file</li> <li>USC2_Tachyon - Centos 6.9 cluster with InfiniBand</li> <li>use OMPI_5</li> <li>use OMPI_3</li> <li>Module file</li> <li>CAN2_GPU - Centos 7 cluster with GPU</li> <li>CAN3_GPU - Ubuntu 20 with GPU</li> </ul> </li> <li>GCC + OpenSHMEM</li> <li>Compile with openMPI4.0.1-gcc7.4.0 on CAN</li> <li>MVAPICH-GCC<ul> <li>USC2</li> </ul> </li> <li>Compile with IMPI-2019xe + MKL<ul> <li>USC1_Eagle - Centos 6.5 cluster with InfiniBand</li> </ul> </li> <li>Compiling with LLVM + OMPI<ul> <li>USC2_Tachyon - Centos 6.9 cluster with InfiniBand</li> </ul> </li> <li>Compile with Conda</li> </ul>"},{"location":"hpc/compile/LAMMPS/#preparation","title":"Preparation","text":""},{"location":"hpc/compile/LAMMPS/#1-prerequisite","title":"1. Prerequisite","text":"<ul> <li>Compiler: Intel, GCC, Clang,...</li> <li>MPI implementation: OMPI, IMPI, MPICH,...</li> <li>Libraries depend on which packages will be installed: FFTW, intel MKL,...</li> <li>Newer LAMMPS may be no longer compatible with an old openMPI, as well FFTW/MKL, so these libs need to be updated too.</li> <li>OpenMPI may the fastest</li> <li>There is no longer USER_ packages from Jul-2021</li> <li>Need CMAKE, newer is better (a newer Cmake version may reduce the probability of error during compiling). Basic cmake:</li> </ul> <pre><code>cmake -D OPTION_A=VALUE_A -D OPTION_B=VALUE_B ...     ../cmake make\n</code></pre> <ul> <li>Module environment</li> </ul> <pre><code>module load &lt;module_name&gt;\nmodule display &lt;module_name&gt;\n</code></pre> <ul> <li>Only one installation for <code>eagle/lion/leopard/cheetah</code>, but need to load different OpenMPI for each cluster. Also need to load Conda to overwrite the default python of the system (different Ver. of python may cause runtime error)</li> </ul>"},{"location":"hpc/compile/LAMMPS/#2-download","title":"2. Download","text":"<p>LAMMPS site Souce code</p> <pre><code>### download tar file\ntar -xvf lammps-stable_7Aug2019\ncd lammps-stable_7Aug2019\nmkdir build &amp;&amp; cd build\n\n### or download use Git:\ngit clone --branch patch_20Nov2019 https://github.com/lammps/lammps.git lammps_patch_20Nov2019\ncd lammps_patch_20Nov2019\ngit checkout patch_20Nov2019\n\ngit clone https://github.com/lammps/lammps.git    lammps_dev\ncd lammps_dev\ngit pull origin develop\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#3-packages","title":"3. Packages","text":"<p>Note</p> <ul> <li>include these OPTIONS in Cmake command, to build package-lib automatically:</li> <li>python &gt; 3.7.12 require to update GCC-conda=11: <code>conda install -c conda-forge gcc=11 gxx=11</code>. But don't use this to void requiring higher GLIBC. Also, <code>zlib=1.2.12</code> require GLIBC=2.14.</li> <li>To void hidden libs by conda, need to downgrade libs versions in conda &lt; libs in linux system. So that to void these errors, use <code>conda install -c conda-forge libgcc-ng=7 zlib=1.2.8 python=3.7.12</code></li> <li>Do not use GCC-11 to avoid error: Dwarf Error: found dwarf version '5', use: export CFLAGS='-gdwarf-4 -gstrict-dwarf' not solve this error</li> <li>install openBLAS for LAPACK and BLAS, so need load GSL</li> <li>use static link for openBLAS, so need to export it and set cmake var</li> </ul> <p>1.UFM potential</p> <pre><code>cd lammps-folder/src/\ngit clone https://github.com/plrodolfo/FluidFreeEnergyforLAMMPS.git USER-FFE\ncopy new pair_ufm into /src\ncopy new pair_eam.cpp &amp; pair_eam.h into /src and delete corresponding files in /src/MANYBODY\n</code></pre> <p>2.POEMS, OPT</p> <pre><code>-D PKG_OPT=yes\n</code></pre> <p>3.MSCG</p> <pre><code>-D PKG_MSCG=yes -D DOWNLOAD_MSCG=yes\n</code></pre> <p>5.VORONOI</p> <pre><code>-D PKG_VORONOI=yes -D DOWNLOAD_VORO=yes\n</code></pre> <p>6.KSPACE</p> <ul> <li>if use MKL for FFT, then need MKL library</li> </ul> <pre><code>-D FFT=MKL  \\\n-D MKL_INCLUDE_DIRS=/uhome/p001cao/local/intel/xe2019/compilers_and_libraries_2019.5.281/linux/mkl/include  \\\n-D MKL_LIBRARY=/uhome/p001cao/local/intel/xe2019/compilers_and_libraries_2019.5.281/linux/mkl/lib/intel64  \\\n</code></pre> <ul> <li>if FTWW3, then dont need MKL_LIBRARY</li> </ul> <pre><code>-D FFT=FFTW3\n-D FFTW3_INCLUDE_DIRS=/uhome/p001cao/local/fftw/3.3.8-openmpi4.0.1-Intel2019xe-double/include \\\n-D FFTW3_LIBRARY=/uhome/p001cao/local/fftw/3.3.8-openmpi4.0.1-Intel2019xe-double/lib \\\n</code></pre> <ul> <li>or use FFTW3 from intel_mkl: (not support long-double precision)</li> </ul> <pre><code>-D FFT=FFTW3\n-D FFTW3_INCLUDE_DIRS=/uhome/p001cao/local/intel/xe2018/compilers_and_libraries_2018.0.128/linux/mkl/include/fftw\n</code></pre> <p>7.**LAPACK &amp; BLAS*</p> <ul> <li>These packages LAPACK &amp; BLAS: MSCG, ATC, AWPMD, ML-QUIP, LATTE, PLUMED (can self build its libs)</li> <li>Use \"intel/mkl\" package, then LAPACK &amp; BLAS will be found automatically</li> </ul> <pre><code>module load intel/mkl\nmodule load tooldev/gsl-2.6\n</code></pre> <ul> <li>Use external LAPACK &amp; BLAS</li> </ul> <pre><code>  export myLAPACK=/uhome/p001cao/app/lapack-3.10/liblapack.a\n  export myBLAS=/uhome/p001cao/app/lapack-3.10/libblas.a\n\n  -DLAPACK_LIBRARIES=${myLAPACK} -DBLAS_LIBRARIES=${myBLAS}\n</code></pre> <p>8.OpenMP</p> <pre><code>-D PKG_USER-OMP=yes -D BUILD_OMP=yes -D PKG_USER-INTEL=no\n</code></pre> <p>9.make no packages</p> <pre><code>-D PKG_GPU=no -D PKG_KIM=no -D PKG_LATTE=no -D PKG_MSCG=no -D PKG_KOKKOS=no \\\n-D PKG_USER-ADIOS=no -D PKG_USER-NETCDF=no -D PKG_USER-OMP=no -D PKG_USER-INTEL=no \\\n-D PKG_USER-QUIP=no -D PKG_USER-SCAFACOS=no -D PKG_USER-QMMM=no -D PKG_USER-VTK=no \\\n-D PKG_USER-H5MD=no \\\n</code></pre> <p>10.KOKKOS For multicore CPUs using OpenMP, set these 2 variables.</p> <pre><code>-DKokkos_ARCH_WSM=yes                 # HOSTARCH = HOST from list above\n-DKokkos_ENABLE_OPENMP=yes\n-DBUILD_OMP=yes\n</code></pre> <p>11.PLUMED</p> <ul> <li>pre-compile Plumed separately:</li> </ul> <pre><code>module load plumed\n</code></pre> <pre><code>-D PKG_PLUMED=yes -D DOWNLOAD_PLUMED=no -D PLUMED_MODE=static\n</code></pre> <ul> <li>self-build PLUMED:</li> <li>We will need GSL to link LAPACK, BLAS (require MKL)</li> <li> <p><code>Cmake</code> setting</p> <pre><code>-D PKG_PLUMED=yes -D DOWNLOAD_PLUMED=yes -D PLUMED_MODE=static\n</code></pre> </li> <li> <p>Can Configure Plumed to use Internal LAPACK&amp;BLAS: (no need install BLAS&amp;LAPACK or MKL+GSL). Edit file: <code>../cmake/Modules/Packages/PLUMED.cmake</code>, Comment out these lines:</p> <pre><code>  # find_package(LAPACK REQUIRED)\n  # find_package(BLAS REQUIRED)\n  # find_package(GSL REQUIRED)\n  # list(APPEND PLUMED_LINK_LIBS ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES} GSL::gsl)\n</code></pre> </li> <li> <p>Edit file: <code>../cmake/Modules/Packages/PLUMED.cmake</code></p> <pre><code>###change lines:\n    # URL http...... (line 65)\n    # URL_MD5\n### into:\n      GIT_REPOSITORY https://github.com/plumed/plumed2.git\n      GIT_TAG master                            # hack-the-tree   v2.6.2   v2.7b\n\n      CONFIGURE_COMMAND &lt;SOURCE_DIR&gt;/configure  ....   ...\n                  --enable-modules=all --enable-asmjit --disable-external-blas --disable-external-lapack\n      ...\n### add this command after line 76 (inside ExternalProject_Add(...)):\n      UPDATE_COMMAND \"\"\n</code></pre> </li> <li> <p>New udate from LAMMPS: LAPACK &amp; BLAS now can be compiled internally in LAMMPS with option <code>-DUSE_INTERNAL_LINALG=yes</code>. So new setting in file: <code>../cmake/Modules/Packages/PLUMED.cmake</code> should be</p> </li> </ul> <p><code>shell       find_package(LAPACK REQUIRED)       find_package(BLAS REQUIRED)       find_package(GSL REQUIRED)       list(APPEND PLUMED_LINK_LIBS ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES} GSL::gsl)</code></p> <pre><code>```shell\n###change lines:\n    # URL http...... (line 65)\n    # URL_MD5\n### into:\n      GIT_REPOSITORY https://github.com/plumed/plumed2.git\n      GIT_TAG master                            # hack-the-tree   v2.6.2   v2.7b\n\n      CONFIGURE_COMMAND &lt;SOURCE_DIR&gt;/configure  ....   ...\n                  --enable-modules=all --enable-asmjit\n      ...\n### add this command after line 76 (inside ExternalProject_Add(...)):\n      UPDATE_COMMAND \"\"\n```\n\n```sh\nmodule load tooldev/gsl-2.7\n\n-DPKG_PLUMED=yes -DUSE_INTERNAL_LINALG=yes  \\\n```\n</code></pre> <p>12.[ML_QUIP] (source code) compile QUIP the minimum requirements are:</p> <ul> <li>A working Fortran compiler. QUIP is tested with <code>gfortran 4.4</code> and later, and <code>ifort 11.1</code></li> <li>Linear algebra libraries BLAS and LAPACK. QUIP is tested with reference versions libblas-dev and liblapack-dev on Ubuntu 12.04, and mkl 11.1 with ifort.</li> <li>modify <code>ML-QUIP.cmake</code> : add this command after line 76 (inside ExternalProject_Add(...)):</li> </ul> <pre><code>    GIT_REPOSITORY \"https://github.com/libAtoms/QUIP/\"\n    GIT_TAG          5989901       #   origin/public\n    ...\n    UPDATE_COMMAND \"\"\n</code></pre> <p>13.MLIAP</p> <ul> <li>require python &gt;3.6</li> </ul> <p>14.MACHDYN</p> <ul> <li>require Eigen</li> </ul> <pre><code>-D MACHDYN=yes -D DOWNLOAD_EIGEN3=yes\n</code></pre> <p>open file: ../cmake/Modules/Packages/USER-SMD.cmake</p> <pre><code>### change:\n    URL http...... (line 12)\n    URL_MD5\n### into:\n    GIT_REPOSITORY https://github.com/eigenteam/eigen-git-mirror.git\n    GIT_TAG  3.3.7\n</code></pre> <p>14.MOLFILE package</p> <ul> <li>to dump PDB file, need install VMD-plugins</li> <li>compatible with VMD 1.9 and 1.9.1</li> <li>Compile VMD</li> <li>compile plugins (just this is need for Lammps) see this</li> </ul> <pre><code>tar zxvf vmd-1.9.src.tar.gz\ncd plugins\nmake LINUXPPC64\nexport PLUGINDIR=/uhome/p001cao/local/wSourceCode/vmd/vmd-1.9/plugins\nmake distrib\n</code></pre> <ul> <li>compile VMD</li> </ul> <pre><code>cd vmd-1.9.4a51\nmodule load compiler/gcc-10.3\nexport VMDINSTALLDIR=/uhome/p001cao/app/vmd\n./configure LINUXPPC64 OPENGL SILENT PTHREADS\ncd src\nmake\n</code></pre> <ul> <li>path in lib/molfile/Make.lammps: molfile_SYSPATH =-L/uhome/p001cao/local/wSourceCode/vmd/vmd-1.9/plugins/LINUXPPC64/molfile</li> </ul> <pre><code>export =/uhome/p001cao/local/wSourceCode/vmd/vmd-1.9/plugins/include\n</code></pre> <pre><code>-D MOLFILE_INCLUDE_DIR=${PlugIncDIR}\n-D PKG_MOLFILE=yes\n</code></pre> <p>15.PYTHON (use 1 of following ways)</p> <p>Note: new numpy require higher GLIBC</p> <ul> <li>use module load \u2192 do not need setting in Cmake (but this may intefere some libs: openmpi,lapack,blas,... - should not use)</li> </ul> <pre><code>module load conda/py37Lammps\n</code></pre> <ul> <li>use Python_ROOT_DIR (same as module load): \u2192 will encounter the error: Anaconda environments prevent CMake from generating a safe runtime search path \u2192 cannot be solved so far.</li> </ul> <pre><code>export pyROOT=/uhome/p001cao/app/miniconda3/envs/py37Lammps\n-DPython_ROOT_DIR=${pyROOT}   # this setting must be put on the head of cmake\n</code></pre> <ul> <li>use Python_EXECUTABLE # (Python_EXECUTABLE depend on cmake's version) (but this case still use system Python while compiling, so cannot use on multi-OS with different Versions )</li> </ul> <pre><code>export pyEXE=/uhome/p001cao/app/miniconda3/envs/py37Lammps/bin/python\nexport pyINC=/uhome/p001cao/app/miniconda3/envs/py37Lammps/include/python3.7m\nexport pyLIB=/uhome/p001cao/app/miniconda3/envs/py37Lammps/lib/libpython3.7m.a\n\n-DPython_EXECUTABLE=${pyEXE} -DPython_INCLUDE_DIR=${pyINC} -DPython_LIBRARY=${pyLIB}\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#i-compiling-with-gcc-ompi","title":"I. Compiling with GCC + OMPI","text":"<p>Note</p> <ul> <li>must export compilers to to avoid miss matching compilers</li> </ul> <pre><code>export PATH=/uhome/p001cao/app/openmpi/4.1.1-gcc11.2-noUCX-eagle/bin:$PATH\nexport CC=mpicc  export CXX=mpic++  export FORTRAN=mpifort\n## can use: -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpic++ -DCMAKE_Fortran_COMPILER=mpif90 \\\n</code></pre> <ul> <li>\"GCC + gold linker\" is good now</li> </ul> <pre><code>module load tooldev/binutils-2.36\n</code></pre> <pre><code>-DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=gold -lrt\"\n</code></pre> <ul> <li>use MKL</li> </ul> <pre><code>module load intel/mkl-xe19u5\nsource mklvars.sh intel64\nmodule load tooldev/gsl-2.6\n</code></pre> <pre><code>-DFFT=MKL\n</code></pre> <ul> <li>use external BLAS&amp;LAPACK instead of MKL</li> </ul> <pre><code>module load tooldev/gsl-2.6\nexport myLAPACK=/uhome/p001cao/app/lapack-3.10/liblapack.a\nexport myBLAS=/uhome/p001cao/app/lapack-3.10/libblas.a\n\n-DBLAS_LIBRARIES=${myBLAS} -DLAPACK_LIBRARIES=${myLAPACK}\n</code></pre> <ul> <li>use FFTW instead of MKL</li> </ul> <pre><code>module load fftw/fftw3.3.8-ompi4.1-gcc11.2\n</code></pre> <pre><code>-DFFT=FFTW3\n</code></pre> <ul> <li>consider linkers</li> </ul> <pre><code>module load llvm/llvm-gcc10-lld                    ## to use lld\n-DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=lld -lrt\" \\\nmodule load tooldev/binutils-2.35                ## gold\n-DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=gold -lrt\" \\\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#usc1_eagle-centos-65-cluster-with-infiniband","title":"USC1_Eagle - Centos 6.5 cluster with InfiniBand","text":"<p>Note</p> <ul> <li>use different openmpi for Eagle vs Lion</li> <li>Note: python&gt;3.7.9 require GLIBC new <code>conda install python=3.7.5 pandas=1.0 numpy=1.19</code></li> <li>Use GCC-11 need also update GCC-conda = 11 <code>conda install -c conda-forge libstdcxx-ng=11 libgcc-ng=11 libgfortran-ng=11</code></li> <li>install GSL, required by SCAFACOS package</li> </ul> <pre><code>cd lammps_master\nmkdir build   &amp;&amp;   cd build\n\n## module load tooldev/gsl-2.6\nmodule load tooldev/binutils-2.36         ## gold\nmodule load tooldev/cmake-3.21\nmodule load fftw/fftw3.3.10-ompi5.0-gcc11.2\nmodule load mpi/ompi5.0.0-gcc11.2\n\nexport PATH=/uhome/p001cao/app/openmpi/5.0.0-gcc11.2-eagle/bin:$PATH\nexport CC=mpicc  export CXX=mpic++  export FC=mpifort  export F90=mpif90\n## MOLFILE_plugins/ python 3/ LAPACK&amp;BLAS\nexport PlugIncDIR=/uhome/p001cao/local/wSourceCode/vmd/vmd-1.9/plugins/include\nexport pyROOT=/uhome/p001cao/app/miniconda3/envs/py37Lammps\n\ncmake ../cmake -C ../cmake/presets/all_on.cmake \\\n-DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=gold -lrt\" \\\n-DPython_ROOT_DIR=${pyROOT} -DMOLFILE_INCLUDE_DIR=${PlugIncDIR} \\\n-DBUILD_MPI=yes -DBUILD_OMP=yes -DLAMMPS_MACHINE=mpi -DPKG_OPENMP=yes \\\n-DLAMMPS_EXCEPTIONS=yes -DBUILD_SHARED_LIBS=yes \\\n-DPKG_INTEL=no -DPKG_GPU=no -DPKG_KOKKOS=no \\\n-DPKG_LATTE=no -DPKG_MSCG=no -DPKG_ATC=no -DPKG_VTK=no -DPKG_ML-PACE=no \\\n-DPKG_ADIOS=no -DPKG_NETCDF=no -DPKG_KIM=no -DPKG_H5MD=no \\\n-DDOWNLOAD_EIGEN3=yes -DDOWNLOAD_VORO=yes -DDOWNLOAD_SCAFACOS=no -DPKG_SCAFACOS=no \\\n-DPKG_MESONT=no -DPKG_ML-QUIP=no \\\n-DPKG_PLUMED=yes -DDOWNLOAD_PLUMED=yes\\\n-DFFT=FFTW3 \\\n-DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpic++ -DCMAKE_Fortran_COMPILER=mpif90 \\\n-DCMAKE_INSTALL_PREFIX=/uhome/p001cao/app/lammps/gccOMPI5-dev\n\nmake -j 20\n## test:  mpirun -np 2 lmp_mpi\nmake install\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#module-file","title":"Module file","text":"<pre><code>### Module file\nmodule load conda/py37Lammps\nmodule load fftw/fftw3.3.10-ompi5.0-gcc11.2\n## for Tcl script use only\nset     topdir          /uhome/p001cao/app/lammps/gccOMPI5-29Sep21\n\nprepend-path    PATH                    $topdir/bin\nprepend-path    LD_LIBRARY_PATH         $topdir/lib64\nprepend-path    INCLUDE                 $topdir/include/lammps\n\nprepend-path    PATH  /uhome/p001cao/local/wSourceCode/vmd/vmd-1.9/plugins/LINUXPPC64/molfile\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#usc2_tachyon-centos-69-cluster-with-infiniband","title":"USC2_Tachyon - Centos 6.9 cluster with InfiniBand","text":"<pre><code>git pull origin develop\n\nmodule load tooldev/binutils-2.37                ## gold\nmodule load tooldev/cmake-3.20.3\nmodule load fftw/fftw3.3.10-ompi4.1.3-gcc10.3\nmodule load mpi/ompi4.1.3-gcc10.3\n\nexport PATH=$PATH:/home1/p001cao/app/openmpi/4.1.3-gcc10.3/bin\nexport CC=mpicc  export CXX=mpic++  export FC=mpifort  export F90=mpif90\nexport CFLAGS='-gdwarf-4 -gstrict-dwarf'\n### python (require py3) &amp; BLAS+LAPACK\nexport pyROOT=/home1/p001cao/app/miniconda3/envs/py37Lammps\n\ncmake ../cmake -C ../cmake/presets/all_on.cmake \\\n-DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=gold -lrt\" \\\n-DPython_ROOT_DIR=${pyROOT} \\\n-DBUILD_MPI=yes -DBUILD_OMP=yes -DLAMMPS_MACHINE=mpi -DPKG_OPENMP=yes \\\n-DLAMMPS_EXCEPTIONS=yes -DBUILD_SHARED_LIBS=no \\\n-DPKG_INTEL=no -DPKG_GPU=no -DPKG_KOKKOS=no \\\n-DPKG_ADIOS=no -DPKG_NETCDF=no -DPKG_VTK=no -DPKG_H5MD=no \\\n-DPKG_MESONT=no -DPKG_LATTE=no -DPKG_MSCG=no -DPKG_ATC=no -DPKG_KIM=no -DPKG_SCAFACOS=no \\\n-DPKG_ML-PACE=yes -DPKG_ML-QUIP=no -DPKG_ML-HDNNP=no -DPKG_MDI=no \\\n-DPKG_PLUMED=yes \\\n-DFFT=FFTW3 \\\n-DCMAKE_INSTALL_PREFIX=/home1/p001cao/app/lammps/gccOMPI4-dev\n\nmake -j 16 &amp;&amp; make install\n</code></pre> <pre><code>### no need download option\n-DDOWNLOAD_EIGEN3=yes -DDOWNLOAD_VORO=yes -DDOWNLOAD_PLUMED=yes -DDOWNLOAD_QUIP=yes\\\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#use-ompi_5","title":"use OMPI_5","text":"<pre><code>module load tooldev/binutils-2.37                ## gold\nmodule load tooldev/cmake-3.20.3\nmodule load fftw/fftw3.3.10-ompi5.0-gcc11.2\nmodule load mpi/ompi5.0.0-gcc10.3\n\nexport pyROOT=/home1/p001cao/app/miniconda3/envs/py37Lammps\n\ncmake ../cmake -C ../cmake/presets/all_on.cmake \\\n-DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=gold -lrt\" \\\n-DPython_ROOT_DIR=${pyROOT} \\\n-DBUILD_MPI=yes -DBUILD_OMP=yes -DLAMMPS_MACHINE=mpi -DPKG_OPENMP=yes \\\n-DLAMMPS_EXCEPTIONS=yes -DBUILD_SHARED_LIBS=no \\\n-DPKG_INTEL=no -DPKG_GPU=no -DPKG_KOKKOS=no \\\n-DPKG_LATTE=no -DPKG_MSCG=no -DPKG_ATC=no -DPKG_VTK=no -DPKG_ML-PACE=no \\\n-DPKG_ADIOS=no -DPKG_NETCDF=no -DPKG_KIM=no -DPKG_H5MD=no \\\n-DDOWNLOAD_EIGEN3=yes -DDOWNLOAD_VORO=yes -DDOWNLOAD_SCAFACOS=no -DPKG_SCAFACOS=no \\\n-DPKG_MESONT=no -DPKG_ML-QUIP=yes -DDOWNLOAD_QUIP=yes \\\n-DPKG_PLUMED=yes -DDOWNLOAD_PLUMED=yes\\\n-DFFT=FFTW3 \\\n-DCMAKE_INSTALL_PREFIX=/home1/p001cao/app/lammps/gccOMPI5-dev\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#use-ompi_3","title":"use OMPI_3","text":"<ul> <li>This does not work, due to OMPI3 error</li> </ul> <pre><code>module load tooldev/binutils-2.37                ## gold\nmodule load cmake/3.16.2\nmodule load fftw/3.3.8/gcc-7.4.0/ompi-3.1.4/double\nmodule load mpi/gcc-7.4.0/ompi/3.1.4\n\nexport pyROOT=/home1/p001cao/app/miniconda3/envs/py37Lammps\n\ncmake ../cmake -C ../cmake/presets/all_on.cmake \\\n-DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=gold -lrt\" \\\n-DPython_ROOT_DIR=${pyROOT} \\\n-DBUILD_MPI=yes -DBUILD_OMP=yes -DLAMMPS_MACHINE=mpi -DPKG_OPENMP=yes \\\n-DLAMMPS_EXCEPTIONS=yes -DBUILD_SHARED_LIBS=yes \\\n-DPKG_INTEL=no -DPKG_GPU=no -DPKG_KOKKOS=no \\\n-DPKG_LATTE=no -DPKG_MSCG=no -DPKG_ATC=no -DPKG_VTK=no -DPKG_ML-PACE=no \\\n-DPKG_ADIOS=no -DPKG_NETCDF=no -DPKG_KIM=no -DPKG_H5MD=no \\\n-DDOWNLOAD_EIGEN3=yes -DDOWNLOAD_VORO=yes -DDOWNLOAD_SCAFACOS=no -DPKG_SCAFACOS=no \\\n-DPKG_MESONT=no -DPKG_ML-QUIP=no \\\n-DPKG_PLUMED=yes -DDOWNLOAD_PLUMED=yes\\\n-DFFT=FFTW3 \\\n-DCMAKE_INSTALL_PREFIX=/home1/p001cao/app/lammps/gccOMPI3-dev\n</code></pre> <p>## use Internal LAPACK&amp;BLAS, then no need (GSL &amp; MKL): open file: ../cmake/Modules/Packages/USER_PLUMED.cmake comment out line 9\u219212: find LAPACK, BLAS, GSL (Plumed build itself, no need GSL anymore) \u2192 then, do not need these: module load tooldev/gsl-2.6 module load intel/mkl-xe19u5 source mklvars.sh intel64 -DFFT=MKL     ## must set before Plumed ## or use openBLAS (bad performance) module load tooldev/gsl-2.6 export myBLAS=/home1/p001cao/app/tooldev/openBLAS-0.3.19/lib64/libopenblas.a -DBLAS_LIBRARIES=\\({myBLAS} -DLAPACK_LIBRARIES=\\)</p> <p>## load plumed separately (bad alloc) module load plumed2/2.7htt-gcc -DPKG_USER-PLUMED=yes -DDOWNLOAD_PLUMED=no -DPLUMED_MODE=shared \\</p> <p>##openKim: must create module file for openKim to add its PKG's path</p>"},{"location":"hpc/compile/LAMMPS/#module-file_1","title":"Module file","text":"<pre><code>module load tooldev/gsl-2.6\nmodule load conda/py37Lammps\nmodule load fftw/fftw3.3.10-ompi5.0-gcc11.2\n\n## for Tcl script use only\nset     topdir          /home1/p001cao/app/lammps/gccOMPI5-dev\n\nprepend-path    PATH                    $topdir/bin\nprepend-path    LD_LIBRARY_PATH         $topdir/lib64\nprepend-path    INCLUDE                 $topdir/include/lammps\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#can2_gpu-centos-7-cluster-with-gpu","title":"CAN2_GPU - Centos 7 cluster with GPU","text":"<ul> <li>See GPU package</li> </ul> <pre><code>## cuda\nexport CUDA_PATH=/home/thang/app/cuda-10.2\nexport bin2c=/home/thang/app/cuda-10.2/bin/bin2c\n\n-DPKG_GPU=yes -DGPU_API=cuda -DGPU_ARCH=sm_61 -DBIN2C=${bin2c} -DGPU_PREC=double \\\n</code></pre> <ul> <li>for Pascal architect of GPU, use ARCH=sm_60/sm_61</li> </ul> <pre><code>module load mpi/ompi4.1-gcc7.4-cuda      ## cuda-10 only support to gcc-8\nmodule load cmake-3.20.3\nmodule load fftw/fftw3.3.8-ompi4.1-gcc7.4\n\nexport PATH=$PATH:/home/thang/app/openmpi/4.1.1-gcc7.4-cuda/bin\nexport CC=mpicc  export CXX=mpic++  export FC=mpifort  export F90=mpif90\n## python (require py3)\nexport pyROOT=/home/thang/app/miniconda3/envs/py37Lammps\n## cuda\nexport CUDA_PATH=/home/thang/app/cuda-10.2\nexport bin2c=/home/thang/app/cuda-10.2/bin/bin2c\n\ncmake ../cmake -C ../cmake/presets/all_on.cmake \\\n-DPython_ROOT_DIR=${pyROOT} \\\n-DBUILD_MPI=yes -DBUILD_OMP=yes -DLAMMPS_MACHINE=mpi -DPKG_OPENMP=yes \\\n-DLAMMPS_EXCEPTIONS=yes -DBUILD_SHARED_LIBS=no \\\n-DPKG_INTEL=no -DPKG_KOKKOS=no \\\n-DPKG_GPU=yes -DGPU_API=cuda -DGPU_ARCH=sm_61 -DBIN2C=${bin2c} -DGPU_PREC=double \\\n-DPKG_LATTE=no -DPKG_MSCG=no -DPKG_ATC=no -DPKG_VTK=no -DPKG_ML-PACE=no \\\n-DPKG_ADIOS=no -DPKG_NETCDF=no -DPKG_KIM=no -DPKG_H5MD=no \\\n-DDOWNLOAD_EIGEN3=yes -DDOWNLOAD_VORO=yes -DDOWNLOAD_SCAFACOS=no -DPKG_SCAFACOS=no \\\n-DPKG_MESONT=no -DPKG_ML-QUIP=no \\\n-DPKG_PLUMED=yes -DDOWNLOAD_PLUMED=yes\\\n-DFFT=FFTW3 \\\n-DCMAKE_INSTALL_PREFIX=/home/thang/app/lammps/gccOMPI-dev\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#can3_gpu-ubuntu-20-with-gpu","title":"CAN3_GPU - Ubuntu 20 with GPU","text":"<ul> <li>python and fftw are availabe by command</li> </ul> <pre><code>sudo apt-get install -y fftw-dev\n</code></pre> <pre><code>module load ompi/4.1.0-gcc7.5-cuda10.2      ## cuda-10 only support to gcc-8\nmodule load cmake-3.18.3\n\nexport PATH=$PATH:/opt/app/openmpi/4.1.0-gcc7.5-cuda10.2/bin\nexport CC=mpicc  export CXX=mpic++  export FC=mpifort  export F90=mpif90\n## cuda (python is availabe on Ubuntu)\nexport CUDA_PATH=/usr/local/cuda-11.0\nexport bin2c=/usr/local/cuda-11.0/bin/bin2c\n\ncmake ../cmake -C ../cmake/presets/all_on.cmake \\\n-DPython_ROOT_DIR=${pyROOT} \\\n-DBUILD_MPI=yes -DBUILD_OMP=yes -DLAMMPS_MACHINE=mpi -DPKG_OPENMP=yes \\\n-DLAMMPS_EXCEPTIONS=yes -DBUILD_SHARED_LIBS=no \\\n-DPKG_INTEL=no -DPKG_KOKKOS=no \\\n-DPKG_GPU=yes -DGPU_API=cuda -DGPU_ARCH=sm_61 -DBIN2C=${bin2c} -DGPU_PREC=double \\\n-DPKG_LATTE=no -DPKG_MSCG=no -DPKG_ATC=no -DPKG_VTK=no -DPKG_ML-PACE=no \\\n-DPKG_ADIOS=no -DPKG_NETCDF=no -DPKG_KIM=no -DPKG_H5MD=no \\\n-DDOWNLOAD_EIGEN3=yes -DDOWNLOAD_VORO=yes -DDOWNLOAD_SCAFACOS=no -DPKG_SCAFACOS=no \\\n-DPKG_MESONT=no -DPKG_ML-QUIP=yes -DDOWNLOAD_QUIP=yes -DPKG_ML-IAP=no \\\n-DPKG_PLUMED=yes -DDOWNLOAD_PLUMED=yes\\\n-DFFT=FFTW3 \\\n-DCMAKE_INSTALL_PREFIX=/opt/app/lammps/master-gpu\n\nmake -j 24 &amp;&amp; sudo make install\n</code></pre> <pre><code>#######################################\n\nKOKKOS (USC 2) - 05May20 (error tbb_malloc  --&gt; change TBB folder in file TBB.cmake)\n\n-DBUILD_OMP=yes -DKokkos_ARCH_WSM=yes -DKokkos_ENABLE_OPENMP=yes  \\\n-DLMP_KOKKOS_USE_ATOMICS=yes -DKokkos_ENABLE_HWLOC=yes \\\n\n### TBB lib\n\nset     topdir          /home1/p001cao/local/wSourceCode/Tooldev/oneTBB-2020.2\nsetenv          TBBROOT                 $topdir/bin\nprepend-path    INCLUDE          $topdir/include\nprepend-path    LD_LIBRARY_PATH         $topdir/build/linux_intel64_gcc_cc9.2.0_libc2.12_kernel2.6.32_release\n\n\n###-- edit /cmake/Modules/FindTBB_MALLOC.cmake\n\nfind_path(TBB_MALLOC_INCLUDE_DIR NAMES tbb.h PATHS $ENV{TBBROOT}/include/tbb)\nfind_library(TBB_MALLOC_LIBRARY NAMES tbbmalloc PATHS $ENV{TBBROOT}/lib/intel64/gcc4.7\n$ENV{TBBROOT}/build/linux_intel64_gcc_cc9.2.0_libc2.12_kernel2.6.32_release)\n\n\nhttps://github.com/kokkos/kokkos/blob/master/BUILD.md\n###-- must use\nhttps://stackoverflow.com/questions/52018092/how-to-set-rpath-and-runpath-with-gcc-ld##52020177\nexport myGCC=/home1/p001cao/app/compiler/gcc-9.2.0\n-DCMAKE_CXX_LINK_FLAGS=\"-L${myGCC}/lib64 -Wl,-rpath,${myGCC}/lib64\" \\\n</code></pre> <pre><code>module load mpi/ompi4.0.3-gcc9.2.0\nmodule load tooldev/gsl-2.6\nmodule load tooldev/cmake-3.17.2\n\nmodule load tooldev/binutils-2.32\nmodule load tooldev/tbb-2020.2\n export TBB_MALLOC_LIBRARY\n export TBB_MALLOC_INCLUDE_DIR\ncmake ../cmake -C ../cmake/presets/all_on.cmake \\\n-DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=gold -lrt\" \\\n-DBUILD_MPI=yes -DLAMMPS_MACHINE=mpi \\\n-DBUILD_OMP=yes -DKokkos_ARCH_WSM=yes -DKokkos_ENABLE_OPENMP=yes  \\\n-DBUILD_SHARED_LIBS=yes -DLAMMPS_EXCEPTIONS=yes \\\n-DPKG_GPU=no -DPKG_LATTE=no -DPKG_KIM=no -DPKG_MSCG=no -DPKG_USER-INTEL=no\\\n-DDOWNLOAD_VORO=yes -DDOWNLOAD_EIGEN3=yes \\\n-DPKG_USER-ADIOS=no -DPKG_USER-NETCDF=no -DPKG_USER-QUIP=no -DPKG_USER-SCAFACOS=no \\\n-DPKG_USER-QMMM=no -DPKG_USER-VTK=no -DPKG_USER-H5MD=no \\\n-DCMAKE_INSTALL_PREFIX=/home1/p001cao/app/lammps/05May20-gcc\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#gcc-openshmem","title":"GCC + OpenSHMEM","text":"<pre><code>module load mpi/ompi4.1.0-gcc10.2\nmodule load tooldev/binutils-2.35                ## gold\nmodule load tooldev/cmake-3.18.0\nmodule load fftw/fftw3.3.8-ompi4.1-gcc10.2\n\nexport PATH=$PATH:/home1/p001cao/app/openmpi/4.1.0-gcc10.2/bin\nexport CC=shmemcc\nexport CXX=shmemc++\nexport FORTRAN=shmemfort\ncmake ../cmake -C ../cmake/presets/all_on.cmake \\\n-DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=gold -lrt\" \\\n-DLAMMPS_EXCEPTIONS=yes -DBUILD_MPI=yes -DBUILD_OMP=yes -DLAMMPS_MACHINE=mpi \\\n-DPKG_USER-OMP=yes -DPKG_USER-INTEL=no -DPKG_GPU=no -DPKG_KOKKOS=no \\\n-DPKG_USER-SMD=yes -DDOWNLOAD_EIGEN3=yes -DDOWNLOAD_VORO=yes \\\n-DPKG_KIM=no -DDOWNLOAD_KIM=no -DPKG_LATTE=no -DPKG_MSCG=no -DPKG_USER-ATC=no -DPKG_USER-MESONT=no  \\\n-DPKG_USER-ADIOS=no -DPKG_USER-NETCDF=no -DPKG_USER-QUIP=no -DPKG_USER-SCAFACOS=no \\\n-DPKG_USER-VTK=no -DPKG_USER-H5MD=no \\\n-DFFT=FFTW3 \\\n-DPKG_USER-PLUMED=yes -DDOWNLOAD_PLUMED=yes\\\n-DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpic++ -DCMAKE_Fortran_COMPILER=mpifort \\\n-DCMAKE_INSTALL_PREFIX=/home1/p001cao/app/lammps/gccSHMEM-master\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#compile-with-openmpi401-gcc740-on-can","title":"Compile with openMPI4.0.1-gcc7.4.0 on CAN","text":"<pre><code>module load mpi/openmpi4.0.2-gcc7.4.0\nmodule load cmake-3.12\n\n-D PKG_USER-ATC=no -D PKG_VORONOI=no -D PKG_USER-SMD=no -D PKG_USER-PLUMED=no\n\ncmake  -C ../cmake/presets/all_on.cmake \\\n-D CMAKE_INSTALL_PREFIX=/home/thang/app/lammps/20Nov19 \\\n-D BUILD_MPI=yes -D LAMMPS_MACHINE=mpi \\\n-D BUILD_LIB=yes -D BUILD_SHARED_LIBS=yes -D LAMMPS_EXCEPTIONS=yes \\\n-D PKG_GPU=no -D PKG_KIM=no -D PKG_LATTE=no -D PKG_MSCG=no -D PKG_KOKKOS=no \\\n-D PKG_USER-ATC=no -D PKG_VORONOI=no -D PKG_USER-SMD=no \\\n-D BUILD_OMP=yes -D PKG_USER-OMP=yes -D PKG_USER-INTEL=no \\\n-D PKG_USER-ADIOS=no -D PKG_USER-NETCDF=no -D PKG_USER-QUIP=no -D PKG_USER-SCAFACOS=no \\\n-D PKG_USER-QMMM=no -D PKG_USER-VTK=no -D PKG_USER-H5MD=no \\\n-D PKG_USER-PLUMED=no -D DOWNLOAD_PLUMED=no -D PLUMED_MODE=shared \\\n-D CMAKE_C_COMPILER=mpicc  -D CMAKE_CXX_COMPILER=mpic++ -D CMAKE_Fortran_COMPILER=mpifort \\\n../cmake\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#mvapich-gcc","title":"MVAPICH-GCC","text":"<p>module load mpi/mvapich2-2.3.2-gcc9.2.0 module load plumed2/2.7htt-mvapich module load conda/py37mvapichSupp</p> <p>Configure</p> <pre><code>cmake ../cmake -DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=gold -lrt\" \\\n-C ../cmake/presets/all_on.cmake \\\n-DBUILD_MPI=yes -DLAMMPS_MACHINE=mpi \\\n-DBUILD_OMP=yes -DPKG_USER-OMP=yes -DPKG_USER-INTEL=no \\\n-DBUILD_LIB=yes -DBUILD_SHARED_LIBS=yes -DLAMMPS_EXCEPTIONS=yes \\\n-DPKG_GPU=no -DPKG_LATTE=no -DPKG_KOKKOS=no -DPKG_KIM=no -DPKG_MSCG=no \\\n-DDOWNLOAD_VORO=yes -DDOWNLOAD_EIGEN3=yes \\\n-DPKG_USER-ADIOS=no -DPKG_USER-NETCDF=no -DPKG_USER-QUIP=no -DPKG_USER-SCAFACOS=no \\\n-DPKG_USER-QMMM=no -DPKG_USER-VTK=no -DPKG_USER-H5MD=no \\\n-DPKG_USER-PLUMED=yes -DDOWNLOAD_PLUMED=no -DPLUMED_MODE=shared \\\n-DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpic++ -DCMAKE_Fortran_COMPILER=mpifort \\\n-DCMAKE_INSTALL_PREFIX=/home1/p001cao/app/lammps/19Mar20-mva\n</code></pre> <p>https://github.com/lammps/lammps/blob/master/lib/message/cslib/src/STUBS_ZMQ/zmq.h</p> <p>A. Compile Lammps19 with openMPI-4.0.2, Intel2019xe and MKL (w/wt FFTW-3.3.8) (USC) II: Load modules module load mpi/ompi4.0.2-Intel2019xe-noIB module load intel/mkl-2019xe module load gcc/gcc-7.4.0 module load plumed2/2.6htt module load cmake-3.15.1 III: Compiling LAMMPS</p> <ul> <li>if occur error not found compiler, use this command to find path</li> </ul> <p>find / -name icpc find / -name ifort</p> <p>find / -name icc</p> <p>iii. Compile lammps cd  lammps-folder mkdir  build cd  build</p> <p>Step1: configuration</p> <p>Note: write CMAKE command below on single line</p> <pre><code>cmake  -C ../cmake/presets/all_on.cmake \\\n-D CMAKE_INSTALL_PREFIX=/uhome/p001cao/local/lammps/20Nov19 \\\n-D BUILD_MPI=yes -D LAMMPS_MACHINE=mpi \\\n-D BUILD_LIB=yes -D BUILD_SHARED_LIBS=yes -D LAMMPS_EXCEPTIONS=yes \\\n-D PKG_GPU=no -D PKG_KIM=no -D PKG_LATTE=no -D PKG_MSCG=no -D PKG_KOKKOS=no \\\n-D DOWNLOAD_VORO=yes -D DOWNLOAD_EIGEN3=yes \\\n-D BUILD_OMP=yes -D PKG_USER-OMP=yes -D PKG_USER-INTEL=no \\\n-D PKG_USER-ADIOS=no -D PKG_USER-NETCDF=no -D PKG_USER-QUIP=no -D PKG_USER-SCAFACOS=no \\\n-D PKG_USER-QMMM=no -D PKG_USER-VTK=no -D PKG_USER-H5MD=no \\\n-D PKG_USER-PLUMED=yes -D DOWNLOAD_PLUMED=no -D PLUMED_MODE=shared \\\n-D FFT=MKL \\\n-D MKL_LIBRARY=/uhome/p001cao/local/intel/xe2019/compilers_and_libraries_2019.5.281/linux/mkl/lib/intel64 \\\n-D CMAKE_C_COMPILER=mpicc  -D CMAKE_CXX_COMPILER=mpic++ -D CMAKE_Fortran_COMPILER=mpifort \\\n../cmake\n</code></pre> <p>Step 2: compile ( in /build) make -j 8 test: mpirun -np 2 lmp_mpi LAMMPS (19 Jul 2019) Total wall time: 0:00:21</p> <p>step 3: copy file make install</p> <p>Step 4: create module file  create file \"7Aug19\"</p> <pre><code>## for Tcl script use only\nset     topdir          /uhome/p001cao/local/lammps/7Aug19\nset     version         7Aug19\n\nmodule load  mpi/openMPI/4.0.2-Intel2018xe\nmodule load  fftw/3.3.8/openmpi4.0.2-intel2018xe-double\nmodule load  conda2-2019\nmodule load  plumed2/2.6.0\n\n\nsetenv          LAMMPS                  $topdir\n\nprepend-path    PATH                                    $topdir/bin\nprepend-path    LD_LIBRARY_PATH         $topdir/lib64\nprepend-path    INCLUDE                            $topdir/include/lammps\n</code></pre> <p>save it in: /uhome/p001cao/local/share/lmodfiles/lammps Ref: https://lammps.sandia.gov/doc/Build_basics.html</p>"},{"location":"hpc/compile/LAMMPS/#usc2","title":"USC2","text":"<p>Note: Kokkos may require TBB lib \u2192 might only Intel can work</p> <pre><code>## Download specific TAG: git clone --branch &lt;tag_name&gt; &lt;repo_url&gt;\ngit clone --branch stable_3Mar2020 https://github.com/lammps/lammps.git lammps_stable_3Mar2020\ncd lammps_stable_3Mar2020\nmkdir build\ncd build\n###--- module load mpi/ompi4.0.3-intel19u5 module load intel/mkl-xe19u5 module load plumed2/2.7htt module load tooldev/cmake-3.17.2\n</code></pre> <p>Configure</p> <pre><code>cmake ../cmake -C ../cmake/presets/all_on.cmake \\ -DBUILD_MPI=yes -DLAMMPS_MACHINE=mpi \\ -DBUILD_OMP=yes -DKokkos_ARCH_WSM=yes -DKokkos_ENABLE_OPENMP=yes \\ -DBUILD_SHARED_LIBS=yes -DLAMMPS_EXCEPTIONS=yes \\ -DPKG_GPU=no -DPKG_LATTE=no -DPKG_KIM=no -DPKG_MSCG=no -DPKG_USER-INTEL=no\\ -DDOWNLOAD_VORO=yes -DDOWNLOAD_EIGEN3=yes \\ -DPKG_USER-ADIOS=no -DPKG_USER-NETCDF=no -DPKG_USER-QUIP=no -DPKG_USER-SCAFACOS=no \\ -DPKG_USER-QMMM=no -DPKG_USER-VTK=no -DPKG_USER-H5MD=no \\ -DPKG_USER-PLUMED=yes -DDOWNLOAD_PLUMED=no -DPLUMED_MODE=shared \\ -DCMAKE_C_COMPILER=mpicc -DCMAKE_CXX_COMPILER=mpic++ \\ -DCMAKE_INSTALL_PREFIX=/home1/p001cao/app/lammps/05May20\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#compile-with-impi-2019xe-mkl","title":"Compile with IMPI-2019xe + MKL","text":"<p>Note: use intelMPI can run all both centos7 &amp; centos6</p>"},{"location":"hpc/compile/LAMMPS/#usc1_eagle-centos-65-cluster-with-infiniband_1","title":"USC1_Eagle - Centos 6.5 cluster with InfiniBand","text":"<p>Load modules</p> <pre><code>module load intel/compiler-xe19u5\nmodule load mpi/impi-xe19u5\nmodule load intel/mkl-xe19u5\nmodule load plumed2/2.6httIMPI\nmodule load conda/py37\nmodule load cmake-3.15.1\n\nconfiguration\ncd lammps-folder\nmkdir build\ncd build\ncmake  -C ../cmake/presets/all_on.cmake \\\n-D CMAKE_INSTALL_PREFIX=/uhome/p001cao/app/lammps/20Nov19impi \\\n-D BUILD_MPI=yes -D LAMMPS_MACHINE=mpi \\\n-D BUILD_LIB=yes -D BUILD_SHARED_LIBS=yes -D LAMMPS_EXCEPTIONS=yes \\\n-D PKG_GPU=no -D PKG_KIM=no -D PKG_LATTE=no -D PKG_MSCG=no -D PKG_KOKKOS=no \\\n-D DOWNLOAD_VORO=yes -D DOWNLOAD_EIGEN3=yes \\\n-D BUILD_OMP=yes -D PKG_USER-OMP=yes -D PKG_USER-INTEL=no \\\n-D PKG_USER-ADIOS=no -D PKG_USER-NETCDF=no -D PKG_USER-QUIP=no -D PKG_USER-SCAFACOS=no \\\n-D PKG_USER-QMMM=no -D PKG_USER-VTK=no -D PKG_USER-H5MD=no \\\n-D PKG_USER-PLUMED=yes -D DOWNLOAD_PLUMED=no -D PLUMED_MODE=shared \\\n-D FFT=MKL \\\n-D MKL_LIBRARY=/uhome/p001cao/app/intel/xe19u5/compilers_and_libraries_2019.5.281/linux/mkl/lib/intel64_lin \\\n-D CMAKE_C_COMPILER=mpiicc -D CMAKE_CXX_COMPILER=mpiicpc -D CMAKE_Fortran_COMPILER=mpiifort \\\n../cmake\n\nmake -j 8\ntest:  mpirun -np 2 ./lmp_mpi\nmake install\n</code></pre> <p>Step 4: create module file  create file \"7Aug19-Impi\"</p>"},{"location":"hpc/compile/LAMMPS/#_1","title":"LAMMPS","text":"<p>module load intel/2019xe module load mpi/impi-2019xe module load plumed2/2.6.0-Impi module load conda2-2019 setenv          LAMMPS                  $topdir</p> <p>prepend-path    PATH                                    $topdir/bin prepend-path    LD_LIBRARY_PATH         $topdir/lib64 prepend-path    INCLUDE                            $topdir/include/lammps</p>"},{"location":"hpc/compile/LAMMPS/#_2","title":"LAMMPS","text":"<pre><code>### 2. USC 2\n\n```shell\nmodule load compiler/gcc-10.2              # must load before impi\nmodule load intel/compiler-xe19u5           # intel include lld linker  require GLIBC 2.15\nmodule load intel/mkl-xe19u5\nmodule load intel/impi-xe19u5\nsource mpivars.sh release\nmodule load tooldev/cmake-3.18.0\nmodule load tooldev/gsl-2.6\nmodule load tooldev/binutils-2.32                # gold\n\nexport PATH=$PATH:/home1/p001cao/app/intel/xe19u5/compilers_and_libraries_2019.5.281/linux/bin\nexport CC=mpiicc\nexport CXX=mpiicpc\nexport FORTRAN=mpiifort\n\ncmake ../cmake -C ../cmake/presets/all_on.cmake \\\n-DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=gold -lrt\" \\\n-DLAMMPS_EXCEPTIONS=yes -DBUILD_MPI=yes -DBUILD_OMP=yes -DLAMMPS_MACHINE=mpi \\\n-DPKG_USER-OMP=yes -DPKG_USER-INTEL=yes -DPKG_GPU=no -DPKG_KOKKOS=no \\\n-DPKG_USER-SMD=yes -DDOWNLOAD_EIGEN3=yes -DDOWNLOAD_VORO=yes \\\n-DPKG_KIM=no -DDOWNLOAD_KIM=no -DPKG_LATTE=no -DPKG_MSCG=no -DPKG_USER-ATC=no \\\n-DPKG_USER-ADIOS=no -DPKG_USER-NETCDF=no -DPKG_USER-QUIP=no -DPKG_USER-SCAFACOS=no \\\n-DPKG_USER-VTK=no -DPKG_USER-H5MD=no \\\n-DFFT=MKL \\\n-DPKG_USER-PLUMED=yes -DDOWNLOAD_PLUMED=yes\\\n-DCMAKE_C_COMPILER=mpiicc -DCMAKE_CXX_COMPILER=mpiicpc -DCMAKE_Fortran_COMPILER=mpiifort \\\n-DCMAKE_INSTALL_PREFIX=/home1/p001cao/app/lammps/impi-master\n#-- NOTE: Kokkos require TBB lib\nmodule load intel/tbb-xe20u2\n##-- edit /cmake/Modules/FindTBB_MALLOC.cmake\nfind_path(TBB_MALLOC_INCLUDE_DIR NAMES tbb.h PATHS $ENV{TBBROOT}/include/tbb)\nfind_library(TBB_MALLOC_LIBRARY NAMES tbbmalloc PATHS $ENV{TBBROOT}/lib/intel64/gcc4.8)\n##--\n-DCMAKE_EXE_LINKER_FLAGS=\"-fuse-ld=lld -lrt\" \\\nsource compilervars.sh intel64\nsource mklvars.sh intel64\n</code></pre>"},{"location":"hpc/compile/LAMMPS/#compiling-with-llvm-ompi","title":"Compiling with LLVM + OMPI","text":""},{"location":"hpc/compile/LAMMPS/#usc2_tachyon-centos-69-cluster-with-infiniband_1","title":"USC2_Tachyon - Centos 6.9 cluster with InfiniBand","text":"<p>Note</p> <ul> <li>To void libs hidden by conda-lib, set absolute path for dynamic libs (*.so). See compile LLVM for more information</li> <li>if the error relates to conda (require new GLIBC),<ul> <li>relate to <code>zlib</code>, install lower version <code>conda install -c conda-forge zlib=1.2.11</code></li> <li>relate to <code>libstdc++</code>, use <code>export LD_LIBRARY_PATH=path/to/new/lib:$LD_LIBRARY_PATH</code></li> </ul> </li> <li>if the error relates to `openmpi/mca_pmix_pmix3x.so: undefined symbol:' \u2192 delete isntall folder and reinstall</li> </ul> <p>Info</p> <ul> <li>can use <code>export CFLAGS</code>, <code>export CXXFLAGS</code>. This same as <code>-DCMAKE_CXX_LINK_FLAGS</code> (CPPFLAG means both)</li> <li><code>LDFLAGS</code> same as <code>CMAKE_EXE_LINKER_FLAGS</code></li> <li>Some packages, such as <code>QUIP</code>, <code>LATTE</code>, <code>PLUMED</code>... requires LAPACK (and BLAS), which may not available on some systems. Then, use <code>-DUSE_INTERNAL_LINALG=yes</code> to install them, internally. With this option, we don't need to compile <code>LAPACK &amp; BLAS</code> in <code>PLUMED</code>, so this make a simplified setting for PLUMED. Note to <code>load module</code>tooldev/gsl-2.7<code>for automatically find</code>LAPACK &amp; BLAS`.</li> <li><code>LEPTON_ENABLE_JIT</code> requires 'sys/auxv.h' that is only available on newer GLIBC. So disable it.</li> </ul> <pre><code>cd /home1/p001cao/0SourceCode/lammps_dev\ngit pull origin develop\nrm -rf build_LLVM &amp;&amp; mkdir build_LLVM &amp;&amp; cd build_LLVM\n</code></pre> <pre><code>module load tooldev/cmake-3.27\nmodule load tooldev/binutils-2.40\nmodule load tooldev/gsl-2.7\nmodule load mpi/fftw3.3.10-ompi4.1.x-clang17\nmodule load mpi/ompi4.1.x-clang17-ucx1.15\n\nOPENMPI=/home1/p001cao/app/mpi/openmpi4.1.x-clang17-ucx1.15\nexport PATH=${OPENMPI}/bin:$PATH\nexport CC=mpicc CXX=mpic++ FC=mpifort\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\n## python (require py3), BLAS+LAPACK\nexport LD_LIBRARY_PATH=/home1/p001cao/app/compiler/gcc-11/lib64:$LD_LIBRARY_PATH   # to avoid using libstdc++.so in conda\nmyBLAS=/home1/p001cao/app/tooldev/openBLAS0.3.23-clang17/lib64/libopenblas.so\nmyPREFIX=/home1/p001cao/app/lammps/llvmOMPI4-dev\n\ncmake ../cmake -C ../cmake/presets/all_on.cmake \\\n  -DBUILD_MPI=yes -DBUILD_OMP=yes -DPKG_OPENMP=yes \\\n  -DLAMMPS_MACHINE=mpi -DBUILD_SHARED_LIBS=yes \\\n  -DPKG_GPU=no -DPKG_KOKKOS=no -DPKG_INTEL=no -DPKG_MDI=no \\\n  -DPKG_SCAFACOS=no -DPKG_ADIOS=no -DPKG_NETCDF=no -DPKG_VTK=no -DPKG_H5MD=no \\\n  -DPKG_MESONT=no -DPKG_LATTE=no -DPKG_MSCG=no -DPKG_ATC=no -DPKG_KIM=no \\\n  -DPKG_LEPTON=yes -DLEPTON_ENABLE_JIT=no \\\n  -DPKG_ML-QUIP=no -DPKG_ML-PACE=no -DPKG_ML-HDNNP=no \\\n  -DPKG_PLUMED=yes -DUSE_INTERNAL_LINALG=yes  \\\n  -DFFT=FFTW3 -DBLAS_LIBRARIES=${myBLAS} -DLAPACK_LIBRARIES=${myBLAS} \\\n  -DCMAKE_INSTALL_PREFIX=${myPREFIX}\n</code></pre> <pre><code>make -j 16 &amp;&amp; make install\n</code></pre> <p>with python <pre><code>export pyROOT=/home1/p001cao/app/miniconda3/envs/py39link_lammps\nexport myZLIB=/home1/p001cao/app/tooldev/zlib-1.2.12               # avoid zlib hidden by conda\n\n-DPython_ROOT_DIR=${pyROOT} \\\n-DZLIB_INCLUDE_DIR=${myZLIB}/include -DZLIB_LIBRARY=${myZLIB}/lib/libz.so.1.2.12 \\\n</code></pre></p>"},{"location":"hpc/compile/LAMMPS/#compile-with-conda","title":"Compile with Conda","text":"<p>This way may eliminate some work on installing dependencies</p> <p>See this link</p>"},{"location":"hpc/compile/LLVM/","title":"LLVM","text":"<ul> <li>LLVM</li> <li>Download</li> <li>LLVM 14<ul> <li>USC2: Tachyon - Centos 6.9</li> <li>use GCC</li> <li>Module file</li> <li>How to Use Clang without GCC on Linux</li> <li>use GCC-conda</li> </ul> </li> <li>LLVM 16<ul> <li>USC2: Tachyon - Centos 6.9</li> </ul> </li> </ul>"},{"location":"hpc/compile/LLVM/#llvm","title":"LLVM","text":"<p>The LLVM project has multiple components. The core of the project is itself called \"LLVM\". This contains all of the tools, libraries, and header files needed to process intermediate representations and convert them into object files. Tools include an assembler, disassembler, bitcode analyzer, and bitcode optimizer. It also contains basic regression tests.</p> <p>C-like languages use the Clang frontend. This component compiles C, C++, Objective-C, and Objective-C++ code into LLVM bitcode -- and from there into object files, using LLVM.</p> <p>Other components include: the libc++ C++ standard library, the LLD linker, and more.</p> <p>**Requirements Compiling LLVM requires that you have several software packages installed. The table below lists those required packages. The Package column is the usual name for the software package that LLVM depends on. The Version column provides \u201cknown to work\u201d versions of the package. The Notes column describes how LLVM uses the package and provides other details.</p> Package Version Cmakte &gt;=3.13.4 GCC &gt;=7.1.0 Python &gt;= 3.6 BINUTILS newer is better <p>See here</p>"},{"location":"hpc/compile/LLVM/#download","title":"Download","text":"<pre><code># tar xvf llvm-project-llvmorg-14.0.5.tar.gz\n# cd llvm-project-llvmorg-14.0.5\n# rm -r llvm-14\n\ngit clone --branch release/14.x https://github.com/llvm/llvm-project.git llvm-14x\ncd llvm-14x\ngit pull origin release/14.x\nmkdir build &amp;&amp; cd build\n</code></pre>"},{"location":"hpc/compile/LLVM/#tachyon-centos-69","title":"Tachyon - Centos 6.9","text":""},{"location":"hpc/compile/LLVM/#llvm-14","title":"LLVM 14","text":""},{"location":"hpc/compile/LLVM/#use-gcc","title":"use GCC","text":"<p>Note</p> <ul> <li>May need GCC &gt;= 9.</li> <li>Use <code>-DCMAKE_CXX_STANDARD=17</code> to avoid no digit exponent.</li> <li>use <code>CMAKE_C_FLAGS=\"-flax-vector-conversions\"</code> avoid 128i convert error.</li> <li>consider -DLLVM_TARGETS_TO_BUILD=\"AArch64\".</li> <li>must use <code>-DGCC_INSTALL_PREFIX -DCMAKE_CXX_LINK_FLAGS=\"-Wl,-rpath,${myCOMPILER}/lib64 -L${myCOMPILER}/lib64\"</code> to have right link to libc.</li> <li>Dont use -DLLVM_ENABLE_RUNTIMES=\"compiler-rt;libc;libcxx;libcxxabi;libunwind\". Instead, use DLLVM_ENABLE_RUNTIMES=\"compiler-rt;libc;libcxx;libcxxabi;libunwind\" see.</li> <li>These modules may cause errors: compiler-rt;libunwind;libc</li> <li>Use Release/Debug</li> <li>See more https://llvm.org/docs/CMake.html</li> <li>LLDB require SWIG &gt; 3.0</li> <li>LLVM require python &gt;= 3.6, and python 3.6 require zlib&gt;1.2.11 require GLIBC_2.14 (libgcc-ng=9). And zlib=1.2.11 will cause hidden libs by conda, so should update  zlib&gt;1.2.11 to hidden error. Or should use static-link (libs*.a) or use absolute path to dynamic libs (.so) in cmake to avoid this error. Note, link a dynamic lib (.so) to a static lib (.a) may cause \" Dyanmic reloc overflow runtime\" error, so best way is use absolute path to dynamic libs (.so).</li> </ul> <pre><code>source activate py37Lammps\nconda install -c conda-forge libgcc-ng=9 libstdcxx-ng=9 libstdcxx-ng=9 libgomp=9 zlib=1.2.11 python=3.7\n</code></pre> <p>**Install LLVM</p> <pre><code>git pull origin release/14.x\nmkdir build &amp;&amp; cd build\n\nmodule load tool_dev/cmake-3.24\nmodule load conda/py37Lammps\nmodule load tool_dev/binutils-2.37\nmodule load compiler/gcc-12.2\n\nexport myGCC=/home1/p001cao/local/app/compiler/gcc-12.2\nexport PATH=$PATH:${myGCC}/bin                                 # :/usr/bin\nexport CC=gcc export CXX=g++\nexport LDFLAGS=\"-fuse-ld=gold -lrt\"\nexport myZLIB=/home1/p001cao/local/app/tool_dev/zlib-1.2.12           # avoid zlib hidden by conda\nexport CPPFLAGS=\"-gdwarf-4 -gstrict-dwarf\"       # avoid dwarf5 error\n\ncmake ../llvm -DCMAKE_BUILD_TYPE=Release \\\n-DLLVM_ENABLE_PROJECTS=\"clang;clang-tools-extra;libclc;lld;openmp;polly;flang;pstl;mlir;libcxx;libcxxabi\" \\\n-DGCC_INSTALL_PREFIX=${myGCC} \\\n-DCMAKE_CXX_LINK_FLAGS=\"-Wl,-rpath,${myGCC}/lib64 -L${myGCC}/lib64\" \\\n-DCMAKE_CXX_STANDARD=17 \\\n-DCMAKE_C_FLAGS=\"-flax-vector-conversions\" -DCMAKE_C_FLAGS_RELEASE=\"-flax-vector-conversions\" \\\n-DZLIB_INCLUDE_DIR=${myZLIB} -DZLIB_LIBRARY=${myZLIB}/lib/libz.so.1.2.12 \\\n-DCMAKE_INSTALL_PREFIX=/home1/p001cao/local/app/compiler/llvm-14\n\nmake -j 16 &amp;&amp; make install\n</code></pre> <p>check:</p> <pre><code>module load compiler/llvm-14\nclang -v\n</code></pre> <p>Options:</p> <pre><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${myCOMPILER}/lib\n\n-DLLVM_ENABLE_RUNTIMES=\"libunwind;libcxx\"\n-DLLVM_ENABLE_PROJECTS=\"clang;clang-tools-extra;flang;libclc;lld;openmp;polly;pstl;mlir\" \\  # \"clang;flang;lld;openmp\"\n-DCMAKE_CXX_LINK_FLAGS=\"-Wl,-rpath,${myCOMPILER}/lib64 -L${myCOMPILER}/lib64\" \\\n</code></pre> Ref <p>[1] https://stackoverflow.com/questions/69683755/libpng-apngerror-o-requires-dynamic-r-x86-64-pc32-reloc-against-stderr 2(https://tinyurl.com/2bw9jo5q)</p>"},{"location":"hpc/compile/LLVM/#module-file","title":"Module file","text":"<p>at directory: /home1/p001cao/local/1myModfiles/compiler \u2192 create file \"llvm-14\"</p> <pre><code># for Tcl script use only\nset     topdir          /home1/p001cao/local/app/compiler/llvm-14\nset     version         clang-14.0\n\nprepend-path    PATH                    $topdir/bin\nprepend-path    LD_LIBRARY_PATH         $topdir/lib\nprepend-path    LD_LIBRARY_PATH         $topdir/libexec\nprepend-path    INCLUDE                 $topdir/include\n# prepend-path    INCLUDE                 $topdir/include/c++/v1\n</code></pre>"},{"location":"hpc/compile/LLVM/#how-to-use-clang-without-gcc-on-linux","title":"How to Use Clang without GCC on Linux","text":"<pre><code>export LIBS=\"-nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc\"\nexport CXX=clang++\nexport CC=clang\n</code></pre> <pre><code>cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++\n-DCMAKE_EXE_LINKER_FLAGS=\"-nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc\"\n</code></pre> <p>http://tolik1967.azurewebsites.net/clang_no_gcc.html</p>"},{"location":"hpc/compile/LLVM/#use-gcc-conda","title":"use GCC-conda","text":"<pre><code>use conda can install: gcc, cmake,... and other libs. But note install LLVM, since new GLIBC is required,\n</code></pre> <p>**Install Conda (Since LLVM require python &gt;= 3.6)</p> <pre><code>conda create -n py37gcc12 python=3.7\nsource activate py37gcc12\nconda install -c conda-forge libgcc-ng=12 libstdcxx-ng=12 libgomp=12 cmake=3 binutils\n</code></pre> <p>**Install LLVM</p> <pre><code>git clone -b release/14.x https://github.com/llvm/llvm-project.git llvm-14\ncd llvm-14\nmkdir build_conda &amp;&amp; cd build_conda\n\nmodule load conda/py37gcc12\n\nexport myCOMPILER=/home1/p001cao/local/app/miniconda3/envs/py37gcc12\nexport PATH=${myCOMPILER}/bin:$PATH                                     # :/usr/bin\nexport CC=gcc export CXX=g++\nexport LDFLAGS=\"-fuse-ld=gold -lrt\"\nexport CFLAGS=\"-gdwarf-4 -gstrict-dwarf -flax-vector-conversions\"\n\ncmake ../llvm -DCMAKE_BUILD_TYPE=Release \\\n-DCMAKE_CXX_STANDARD=17 \\\n-DLLVM_ENABLE_PROJECTS=\"clang;clang-tools-extra;libclc;lld;openmp;polly;pstl;mlir;flang;libcxx;libcxxabi\" \\\n-DGCC_INSTALL_PREFIX=${myCOMPILER} \\\n-DCMAKE_CXX_LINK_FLAGS=\"-Wl,-rpath,${myCOMPILER}/lib64 -L${myCOMPILER}/lib64\" \\\n-DCMAKE_INSTALL_PREFIX=/home1/p001cao/local/app/compiler/llvm-14-conda\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/LLVM/#llvm-17","title":"LLVM 17","text":"<p>Note</p> <ul> <li>do not use GCC-13, since some source codes can not recognize compiler version</li> <li>projects with errors: PROJECTS=\"mlir;flang;clang-tools-extra;libclc\"  RUNTIMES=\"libc;libcxx;libcxxabi\". Try with few projects, then increasing.</li> <li>LLVM 16 cause error: <code>'aligned_alloc' was not declared in this scope</code> (mlir) \u2192 <code>aligned_alloc</code> should availabe with<code>#include &lt;stdlib.h&gt;</code>, but if system does not support it, then define it in the <code>namespace</code> of the file where error comes see this <pre><code>void* aligned_alloc(size_t alignment, size_t size) {\n    void* ptr;\n    if (posix_memalign(&amp;ptr, alignment, size) != 0) {\n        return NULL;\n    }\n    return ptr;\n}\n</code></pre></li> <li>to disable \"mlir\", we must disable \"flang\", since Enabling MLIR as a dependency to flang</li> <li>error <code>\u2018PTRACE_SEIZE\u2019 was not declared</code> \u2192 add following lines in the file where error comes     <pre><code>#ifndef PTRACE_SEIZE\n#define PTRACE_SEIZE ((__ptrace_request)0x4206)\n#endif\n</code></pre></li> <li>must update newer <code>binutils</code>, to avoid zip error</li> <li>Use GCC-11.4</li> <li><code>conda install gcc_linux-64=11.2 zlib=1.2.11 libzlib-1.2.11</code></li> </ul> <pre><code>cd /home1/p001cao/0SourceCode\n# git clone -b release/17.x https://github.com/llvm/llvm-project.git llvm-17x\n\ncd llvm-17x\ngit pull origin release/17.x\n# git reset --hard origin/main\n# git pull origin main\n\nrm -rf build &amp;&amp; mkdir build &amp;&amp; cd build\n</code></pre> <pre><code>module load tooldev/cmake-3.27\nmodule load tooldev/binutils-2.40\nmodule load conda/py9link_lammps\nmodule load compiler/gcc-11\n\nmyGCC=/home1/p001cao/app/compiler/gcc-11\nexport PATH=${myGCC}/bin:$PATH                                 # :/usr/bin\nexport CC=gcc CXX=g++ FC=clang-new\nexport LDFLAGS=\"-fuse-ld=gold -lrt\"\nexport CXXFLAGS=\"-std=c++17\"\nmyZLIB=/home1/p001cao/app/tooldev/zlib-1.2.12     # avoid zlib hidden by conda\nmyFREFIX=/home1/p001cao/app/compiler/llvm-17\n\ncmake ../llvm -DCMAKE_BUILD_TYPE=Release \\\n    -DLLVM_ENABLE_PROJECTS=\"clang;lld;openmp;polly;flang\" \\\n    -DLLVM_ENABLE_RUNTIMES=\"pstl\" \\\n    -DGCC_INSTALL_PREFIX=${myGCC} \\\n    -DCMAKE_CXX_LINK_FLAGS=\"-Wl,-rpath,${myGCC}/lib64 -L${myGCC}/lib64\" \\\n    -DCMAKE_CXX_STANDARD_REQUIRED=ON -DLLVM_ENABLE_ZLIB=ON \\\n    -DCMAKE_C_FLAGS=\"-flax-vector-conversions\" -DCMAKE_C_FLAGS_RELEASE=\"-flax-vector-conversions\" \\\n    -DZLIB_INCLUDE_DIR=${myZLIB}/include -DZLIB_LIBRARY=${myZLIB}/lib/libz.so.1.2.12 \\\n    -DCMAKE_INSTALL_PREFIX=${myFREFIX}\n\nmake -j 16 &amp;&amp; make install\n</code></pre> <p>Quote</p> <p>ReleaseNotes: https://releases.llvm.org/15.0.0/docs/ReleaseNotes.html</p> <p>options: <pre><code>export CFLAGS=\"-gdwarf-4 -gstrict-dwarf\"                 # avoid dwarf5 error\n</code></pre></p>"},{"location":"hpc/compile/Libtool/","title":"Libtool","text":"<p>Libtool needed in the case compiling from source code. Some source codes do not release with <code>configure</code> file, then <code>libtool</code> is used to accompanied with <code>autoconf</code> and <code>automake</code> to run:</p> <pre><code>./autogen.sh\n</code></pre> <p>The above command with produce <code>configure</code> file, after the configuration can be proceeded with</p> <pre><code>./configure ........\n</code></pre>"},{"location":"hpc/compile/Libtool/#libtool_1","title":"Libtool","text":"<p>Website</p> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\nwget http://ftp.jaist.ac.jp/pub/GNU/libtool/libtool-2.4.7.tar.gz\ntar xvfz libtool-2.4.7.tar.gz\ncd libtool-2.4.7\n</code></pre> <pre><code>./configure --prefix=/home1/p001cao/app/tooldev/libtool-2.4.7\n\nmake &amp;&amp; make install\n</code></pre> <p>Module file</p> <pre><code># for Tcl script use only\nset     topdir          /home1/p001cao/app/tooldev/libtool-2.4.7\n\nprepend-path    PATH                $topdir/bin\nprepend-path    LD_LIBRARY_PATH     $topdir/lib\nprepend-path    INCLUDE             $topdir/include\nprepend-path    PKG_CONFIG_PATH     $topdir/lib/pkgconfig\n</code></pre>"},{"location":"hpc/compile/Libtool/#autoconf","title":"Autoconf","text":"<p>Autoconf is an extensible package of M4 macros that produce shell scripts to automatically configure software source code packages.</p> <ul> <li>Website</li> <li>Repo</li> </ul> <p><pre><code>cd /home1/p001cao/0SourceCode/tooldev\nwget https://ftp.gnu.org/gnu/autoconf/autoconf-2.71.tar.gz\n</code></pre> Alpha/beta releases of Autoconf <pre><code>cd /home1/p001cao/local/wSourceCode/tooldev\nwget https://alpha.gnu.org/pub/gnu/autoconf/autoconf-2.72c.tar.gz --no-check-certificate\ntar zxf autoconf-2.72c.tar.gz\ncd autoconf-2.72c\n</code></pre></p> <pre><code>./configure --prefix=/home1/p001cao/app/tooldev/autoconf-2.72c\n\nmake &amp;&amp; make install\n</code></pre> <p>Module file</p> <pre><code># for Tcl script use only\nset     topdir          /home1/p001cao/app/tooldev/autoconf-2.72\n\nprepend-path    PATH                    $topdir/bin\nprepend-path    LD_LIBRARY_PATH         $topdir/share\n</code></pre>"},{"location":"hpc/compile/Libtool/#automake","title":"Automake","text":"<p>GNU Automake is a tool for automatically generating Makefile.in files compliant with the GNU Coding Standards. Automake requires the use of GNU Autoconf.</p> <ul> <li>Website</li> <li>Repo</li> </ul> <pre><code>Require autoconf&gt;=2.65\n</code></pre> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\nwget http://ftp.gnu.org/gnu/automake/automake-1.16.5.tar.gz\ntar xvzf automake-1.16.5.tar.gz\ncd automake-1.16.5\n</code></pre> <pre><code>module load tooldev/autoconf-2.72c\n\n./configure --prefix=/home1/p001cao/app/tooldev/automake-1.16.5\n\nmake &amp;&amp; make install\n</code></pre> <p>usage:</p> <pre><code>export ACLOCAL_PATH=/home1/p001cao/app/tooldev/libtool-2.4.7/share/aclocal\n</code></pre> <p>Module file</p> <pre><code># for Tcl script use only\nset     topdir          /home1/p001cao/app/tooldev/automake-1.16.5\n\nprepend-path    PATH                    $topdir/bin\n</code></pre>"},{"location":"hpc/compile/Libtool/#gsl","title":"GSL","text":"<p>GSL is needed to link LAPACK &amp; BLAS libraries when installing Plumed in Lammps (but no need now)</p> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\nwget ftp://ftp.gnu.org/gnu/gsl/gsl-2.7.tar.gz\ntar xvzf gsl-2.7.tar.gz\ncd gsl-2.7\n\n./configure --prefix=/home1/p001cao/app/tooldev/gsl-2.7\n\nmake &amp;&amp; make install\n</code></pre> <p>Module files</p> <pre><code>set     topdir          /home1/p001cao/app/tooldev/gsl-2.7\n\nprepend-path    PATH                $topdir/bin\nprepend-path    LD_LIBRARY_PATH     $topdir/lib\nprepend-path    INCLUDE             $topdir/include\n\nprepend-path   PKG_CONFIG_PATH      $topdir/lib/pkgconfig\n</code></pre> See also <p>Install GSL on Linux (Ubuntu, Centros, Redhat, Mac OS) + Simple Installation of gcc Compilers</p>"},{"location":"hpc/compile/Libtool/#zlib","title":"zlib","text":"<pre><code>cd /home1/p001cao/0SourceCode/tooldev\nwget -c --no-check-certificate https://zlib.net/zlib-1.2.12.tar.gz\ntar zxvf zlib-1.2.12.tar.gz\ncd zlib-1.2.12\n\n./configure --enable-shared --prefix=/home1/p001cao/app/tooldev/zlib-1.2.12\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/OpenBLAS/","title":"OpenBLAS","text":"<p>OpenBLAS contains BLAS and LAPACK</p>"},{"location":"hpc/compile/OpenBLAS/#tachyon-centos-68","title":"Tachyon - Centos 6.8","text":""},{"location":"hpc/compile/OpenBLAS/#llvm-17-inuse","title":"LLVM 17 (inuse)","text":"<pre><code>cd /home1/p001cao/0SourceCode/tooldev\n# git clone https://github.com/xianyi/OpenBLAS.git openBLAS\ncd openBLAS\ngit pull origin develop\nrm -rf build &amp;&amp; mkdir build &amp;&amp; cd build\n\nmodule load tooldev/cmake-3.27\nmodule load compiler/llvm-17\n\nmyLLVM=/home1/p001cao/app/compiler/llvm-17\nexport PATH=$myLLVM/bin:$PATH\nexport CC=clang export CXX=clang++ export FC=$myGCC/bin/gfortran\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\nmyPREFIX=/home1/p001cao/app/tooldev/openBLAS0.3.23-clang17\n\ncmake .. -DBUILD_SHARED_LIBS=on -DCMAKE_INSTALL_PREFIX=$myPREFIX\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/OpenBLAS/#gcc-9","title":"GCC 9","text":"<pre><code>module load tooldev/cmake-3.27\nmodule load compiler/gcc-9.5\n\nmyGCC=/home2/app/compiler/gcc/9.5.0\nexport PATH=$myGCC/bin:$PATH\nexport CC=$myGCC/bin/gcc export CXX=$myGCC/bin/g++ export FC=$myGCC/bin/gfortran\nmyPREFIX=/home1/p001cao/app/tooldev/openBLAS0.3.23-gcc9\n\ncmake .. -DBUILD_SHARED_LIBS=on -DCMAKE_INSTALL_PREFIX=$myPREFIX\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/","title":"OpenMPI 4","text":"<ul> <li>OpenMPI-4</li> <li>Possible errors</li> <li>1. Download</li> <li>2. Compiling OpenMPI + GCC<ul> <li>USC1: (Cenntos 6.5)</li> <li>InfiniBand cluster</li> <li>no InfiniBand cluster</li> <li>USC2: (Cenntos 6.9)</li> <li>CANlab: (Cenntos 5.8)</li> <li>CAN-GPU: (Ubuntu-18)</li> <li>Install conda</li> <li>compile OpenMPI</li> </ul> </li> <li>3. Compiling OpenMPI + Intel<ul> <li>USC1: (Cenntos 6.5)</li> <li>InfiniBand cluster</li> <li>USC2: (Cenntos 6.9)</li> </ul> </li> <li>4. Make module file</li> <li>OpenMPI-5<ul> <li>USC1: (Cenntos 6.5)</li> <li>USC2 (Cenntos 6.9) GCC</li> <li>USC2(Cenntos 6.9) - Clang</li> </ul> </li> <li>2. Compiling OpenMPI + Clang<ul> <li>USC2(Cenntos 6.9) - OPMI 4</li> <li>Prepare source code</li> <li>Building</li> </ul> </li> </ul>"},{"location":"hpc/compile/OpenMPI_4/#openmpi-4","title":"OpenMPI-4","text":"<p>Open MPI is a Message Passing Interface (MPI) library project combining technologies and resources from several other projects (FT-MPI, LA-MPI, LAM/MPI, and PACX-MPI).</p> <p></p> <p>Note</p> <p>There are 3 ways to use IB in OpenMPI, (let compile with all, and use runtime setting to select)</p> <pre><code>- OpenIB is an very old Infiband implemented in OpenMPI. OpenIB is not maintained and will be remove in OpenMPI-5 [see this](https://github.com/open-mpi/ompi/issues/11755)\n- UCX: newer OpenMPI uses UCX. But some apps may conflict with UCX (e.g., Gpaw)\n- Libfabric: this may a reasonable choice now [libfabric](https://github.com/ofiwg/libfabric) to instead of OpenIB.\n</code></pre> Note <ul> <li>Some applications require C++11, this is only supported on GCC 4.8 or newer, which is not always available on system, then newer GCC need to be installed before compiling Openmpi.</li> <li>Make sure to build OpenMPI with 64-bit support. To check whether the currently available OpenMPI do support 64-bit or not, type this:   `ompi_info -a | grep 'Fort integer size'. If the output is 8, then it supports 64-bit. If output is 4, then it just supports 32-bit.* configuration for 64-bit support:</li> <li>For Intel compilers use: <code>FFLAGS=-i8 FCFLAGS=-i8 CFLAGS=-m64 CXXFLAGS=-m64</code></li> <li>For GNU compilers type: `FFLAGS=\"-m64 -fdefault-integer-8\" FCFLAGS=\"-m64 -fdefault-integer-8\" CFLAGS=-m64 CXXFLAGS=-m64'</li> <li>must keep the source after compiling</li> <li>consider to use UCX</li> <li>consider compile your own PMIX.</li> <li>consider using linker</li> <li> <p>lld linker:     <pre><code>module load llvm/llvm-gcc10-lld                   # to use lld\nLDFLAGS=\"-fuse-ld=lld -lrt\"\n</code></pre></p> </li> <li> <p>gold linker:     <pre><code>module load tool_dev/binutils-2.32\nLDFLAGS=\"-fuse-ld=gold -lrt\"\n</code></pre></p> </li> </ul>"},{"location":"hpc/compile/OpenMPI_4/#possible-errors","title":"Possible errors","text":"<ul> <li>OpenMPI-4 use UCX by default (openMPI 4.0,3 \u2192 ucx-1.7 or older). Solution: compile your own UCX.</li> <li>No components were able to be opened in the pml framework. <code>PML ucx cannot be selected</code>. This error may be due to no IB device, check it</li> </ul> <pre><code>ssh com054\nibv_devinfo\n</code></pre> <ul> <li>counter exceeded may be solved by compile openMPI with your own PMIX.</li> </ul>"},{"location":"hpc/compile/OpenMPI_4/#1-download","title":"1. Download","text":"<p>See what new in openMPI-4</p> <p>download OpenMPI-4</p> <pre><code>tar xvf openmpi-4.1.3rc1.tar.gz\ncd openmpi-4.1.3rc1\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#2-compiling-openmpi-gcc","title":"2. Compiling OpenMPI + GCC","text":"<p>Need separated installations for: eagle, lion/leopard, cheetah, taycheon  Installation OPTIONS in README.txt or <code>./configure -h</code></p> <ul> <li>Sun Grid: <code>--with-sge</code></li> <li>InfiniBand: <code>--with-verbs</code></li> <li>with KNEM: <code>--with-knem=path</code></li> <li>use UCX: <code>--with-ucx=path</code></li> </ul> <pre><code>export myUCX=/uhome/p001cao/app/tool_dev/ucx-1.9\n../configure...  --with-ucx=${myUCX}\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#usc1-cenntos-65","title":"USC1: (Cenntos 6.5)","text":"<pre><code>- should use gold-linker to avoid compiling error\n- UCX cause error: ib_md.c:329  UCX  ERROR ibv_reg_mr(address=0x145cb580, length=263504, access=0xf) failed: Resource temporarily unavailable. So dont use UCX on this server.\n</code></pre> <pre><code>module load tool_dev/binutils-2.36                       # gold, should use to avoid link-error\nmodule load compiler/gcc-11.2\nexport myKNEM=/uhome/p001cao/app/tool_dev/knem-1.1.4\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#infiniband-cluster","title":"InfiniBand cluster","text":"<pre><code>cd openmpi-4.1.1\nmkdir build_eagle &amp;&amp; cd build_eagle\n\n../configure CC=gcc CXX=g++ FC=gfortran F77=gfortran LDFLAGS=\"-fuse-ld=gold -lrt\" \\\n--with-sge --without-ucx --with-verbs --with-knem=${myKNEM} \\\n--prefix=/uhome/p001cao/app/openmpi/4.1.1-gcc11.2-noUCX-eagle\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#no-infiniband-cluster","title":"no InfiniBand cluster","text":"<pre><code>cd openmpi-4.1.1\nmkdir build_lion &amp;&amp; cd build_lion\n../configure CC=gcc CXX=g++ FC=gfortran F77=gfortran LDFLAGS=\"-fuse-ld=gold -lrt\" \\\n--with-sge --without-ucx --without-verbs --with-knem=${myKNEM} \\\n--prefix=/uhome/p001cao/app/openmpi/4.1.1-gcc11.2-noUCX-lion\n</code></pre> <pre><code>make  -j 20         # not use -j to know what error\nmake install\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#canlab-cenntos-58","title":"CANlab: (Cenntos 5.8)","text":"<pre><code>module load gcc/gcc-7.4.0\n\n../configure CC=gcc CXX=g++ FC=gfortran F77=gfortran \\\n--with-sge --without-verbs --without-ucx  \\\n--prefix=/home/thang/app/openmpi/4.0.2-gcc7.4.0\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#can-gpu-ubuntu-18","title":"CAN-GPU: (Ubuntu-18)","text":"<pre><code>- install Cuda ussing GCC\n- cuda-10 only support to gcc-8\n- need binutils 2.22 or newer to link cuda\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#install-conda","title":"Install conda","text":"<ul> <li>CLI install Cuda</li> <li>Download:  <code>wget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_rhel6.run</code></li> <li>Install (using Root acc)</li> <li>disable the graphical target, to update Nvidia driver</li> </ul> <pre><code>systemctl isolate multi-user.target\nmodprobe -r nvidia-drm\n</code></pre> <pre><code>module load compiler/gcc-7.4\nsh cuda_10.2.89_440.33.01_rhel6.run --toolkitpath=/home/thang/app/cuda-10.2\n</code></pre> <ol> <li>after install Cuda, start the graphical environment again</li> </ol> <pre><code>systemctl start graphical.target\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#compile-openmpi","title":"compile OpenMPI","text":"<pre><code>cd openmpi-4.1.1\nmkdir build &amp;&amp; cd build\n\nmodule load compiler/gcc-7.4   # cuda-10 only support to gcc-8\nmodule load binutils-2.35\n\n../configure CC=gcc CXX=g++ FC=gfortran F77=gfortran \\\n--with-sge --without-ucx \\\n--with-cuda=/home/thang/app/cuda-10.2 \\\n--prefix=/home/thang/app/openmpi/4.1.1-gcc7.4-cuda\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#3-compiling-openmpi-intel","title":"3. Compiling OpenMPI + Intel","text":""},{"location":"hpc/compile/OpenMPI_4/#usc1-cenntos-65_1","title":"USC1: (Cenntos 6.5)","text":""},{"location":"hpc/compile/OpenMPI_4/#infiniband-cluster_1","title":"InfiniBand cluster","text":"<pre><code>cd openmpi-4.1.1\nmkdir build_eagle &amp;&amp; cd build_eagle\n</code></pre> <pre><code>module load intel/compiler-xe19u5\nmodule load compiler/gcc/9.1.0\n# check: icpc -v\nexport PATH=/home1/p001cao/app/intel/xe19u5/compilers_and_libraries_2019.5.281/linux/bin/intel64:$PATH\nexport CC=icc  export CXX=icpc  export FORTRAN=ifort\n\n../configure CC=icc CXX=icpc FC=ifort F77=ifort \\\n--with-sge --without-ucx --with-verbs --with-knem=${myKNEM} \\\n--prefix=/uhome/p001cao/app/openmpi/4.1.1-intelxe19u5-noUCX-eagle\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#usc2-cenntos-69","title":"USC2: (Cenntos 6.9)","text":"<pre><code># use linker lld (include in Intel-bin, require GLIBC &gt;2.15)\nmodule load compiler/gcc-10.1.0\nmodule load intel/compiler-xe19u5       # lld\n##\nexport PATH=/home1/p001cao/app/intel/xe19u5/compilers_and_libraries_2019.5.281/linux/bin/intel64:$PATH\nexport CC=icc  export CXX=icpc  export FORTRAN=ifort\nexport myUCX=/home1/p001cao/app/tool_dev/ucx-1.8-intel\n\n../configure CC=icc CXX=icpc FC=ifort F77=ifort LDFLAGS=\"-fuse-ld=lld -lrt\" \\\n--with-sge --without-verbs --with-ucx=${myUCX} \\\n--prefix=/home1/p001cao/app/openmpi/4.0.4-intelxe19u5\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#4-make-module-file","title":"4. Make module file","text":"<p>at directory: /uhome/p001cao/local/share/lmodfiles/mpi\u2192 create file \"ompi4.1.1-gcc11.2-noUCX\"</p> <pre><code># for Tcl script use only\nmodule load compiler/gcc-11.2\nmodule load tool_dev/binutils-2.37\n\nset     topdir          /uhome/p001cao/app/openmpi/4.1.1-gcc11.2-noUCX-eagle\n\nprepend-path   PATH                $topdir/bin\nprepend-path   LD_LIBRARY_PATH     $topdir/lib\nprepend-path   INCLUDE             $topdir/include\n\nprepend-path   PKG_CONFIG_PATH     $topdir/lib/pkgconfig          # this is required\n</code></pre> <p>Check:</p> <pre><code>module load ompi4.1.1-gcc11.2-noUCX\nmpic++ -v\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#usc2cenntos-69","title":"USC2(Cenntos 6.9)","text":"<p>Note</p> <ul> <li>Now, compile with all IB options, and select them by runtime parameters. (not work, should exclude UCX)</li> <li>How to build from source code see here</li> <li><code>--with-verbs</code> (default - auto detect)</li> <li><code>./autogen.pl</code> is the same as <code>./autogen.sh</code></li> </ul> <pre><code># cd /home1/p001cao/0SourceCode\n# wget https://github.com/open-mpi/ompi/releases/tag/v4.1.4/ompi-4.1.4.tar.gz\n# tar xvf openmpi-4.1.4.tar.gz\n# cd openmpi-4.1.4\n</code></pre> <pre><code>cd /home1/p001cao/0SourceCode\n# wget https://github.com/open-mpi/ompi/releases/download/v4.1.5/ompi-4.1.5.tar.gz\n# git clone -b v4.1.x https://github.com/open-mpi/ompi.git  ompi-4.1.x\ncd ompi-4.1.x\ngit pull origin v4.1.x\n\nmodule load tooldev/autoconf-2.72c\nmodule load tooldev/automake-1.16.5\nmodule load tooldev/libtool-2.4.7\nexport ACLOCAL_PATH=/home1/p001cao/app/tooldev/libtool-2.4.7/share/aclocal\n\n./autogen.pl\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#using-llvm","title":"Using LLVM","text":"Note <ul> <li>To use clang libc++, use this link <code>export CPPFLAGS=\"-nodefaultlibs -lc++ -lc++abi -lm -lc -lgcc_s -lgcc\"</code>. But might not be used?</li> <li>with <code>FC=flang-new</code>, To solve <code>error: unknown argument: '-soname'</code> \u2192 see this</li> </ul> <pre><code>rm -rf build_llvm &amp;&amp; mkdir build_llvm &amp;&amp; cd build_llvm\n\nmodule load compiler/llvm-17          # clang + lld\nmodule load tooldev/ucx1.15-clang17\n\nmyLLVM=/home1/p001cao/app/compiler/llvm-17\nexport PATH=$myLLVM/bin:$PATH\nexport CC=clang CXX=clang++ FC=gfortran        # flang-new\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\nmyUCX=/home1/p001cao/app/tooldev/ucx1.15-clang17\nOFI=/home1/p001cao/app/tooldev/libfabric-1.19\nKNEM=/home1/p001cao/app/tooldev/knem-1.1.4\nmyPREFIX=/home1/p001cao/app/mpi/openmpi4.1.x-clang17\n\n../configure --with-sge --with-verbs --with-ucx=${myUCX} --with-knem=${KNEM} --with-ofi=${OFI} --prefix=${myPREFIX}\n\nmake  -j 16 &amp;&amp; make install\n</code></pre> <p>Test: <pre><code>mpicc ../examples/hello_c.c -o ../examples/hello_c.exe\nmpirun -np 2 ../examples/hello_c.exe\n</code></pre></p> <pre><code>module load mpi/ompi4.1.x-clang17\nmpirun --version\nompi_info\n</code></pre> <p>Other options <pre><code>export my_PMIX=/home1/p001cao/app/tool_dev/pmix-4.1.2\nexport my_libevent=/home1/p001cao/app/tool_dev/libevent-2.1.11       # require by PMIX\nexport my_hwloc=/home1/p001cao/app/tool_dev/hwloc-2.8.0\n\n--with-pmix=${my_PMIX} --with-libevent=${my_libevent} --with-hwloc=${my_hwloc}\n</code></pre></p>"},{"location":"hpc/compile/OpenMPI_4/#llvm-no-ucx","title":"LLVM no UCX","text":"<pre><code>rm -rf build_noUCX &amp;&amp; mkdir build_noUCX &amp;&amp; cd build_noUCX\n\nmodule load compiler/llvm-17          # clang + lld\n\nmyLLVM=/home1/p001cao/app/compiler/llvm-17\nexport PATH=$myLLVM/bin:$PATH\nexport CC=clang CXX=clang++ FC=gfortran        # flang-new\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\nOFI=/home1/p001cao/app/tooldev/libfabric-1.19\nKNEM=/home1/p001cao/app/tooldev/knem-1.1.4\nmyPREFIX=/home1/p001cao/app/mpi/openmpi4.1.x-clang17-noUCX\n\n../configure --with-sge --with-verbs --without-ucx --with-knem=${KNEM} --with-ofi=${OFI} --prefix=${myPREFIX}\n\nmake  -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#gcc-11","title":"GCC 11","text":"<pre><code>cd /home1/p001cao/0SourceCode\ncd ompi-4.1.x\nrm -rf build_ase &amp;&amp; mkdir build_ase &amp;&amp; cd build_ase\n\nmodule load compiler/gcc-11\nmyGCC=/home1/p001cao/app/compiler/gcc-11\nexport PATH=$myGCC/bin:$PATH\nexport CFLAGS=\"-gdwarf-2 -gstrict-dwarf\"\nmyUCX=/home1/p001cao/app/tooldev/ucx-1.15-gcc\nmyPREFIX=/home1/p001cao/app/mpi/openmpi4.1.x-gcc11\n\n../configure --with-sge --without-verbs --with-ucx=${myUCX} --prefix=${myPREFIX}\n\nmake -j 16 &amp;&amp; make install\n</code></pre> <p>Test <pre><code>module load mpi/ompi4.1.x-gcc11\nmpirun --version\n</code></pre></p>"},{"location":"hpc/compile/OpenMPI_4/#gcc-9","title":"GCC 9","text":"<pre><code>cd /home1/p001cao/0SourceCode\ncd ompi-4.1.5\nrm -rf build_gcc &amp;&amp; mkdir build_gcc &amp;&amp; cd build_gcc\n\nmodule load compiler/gcc-9.5\nmyGCC=/home2/app/compiler/gcc/9.5.0\nexport PATH=$myGCC/bin:$PATH\nmyUCX=/home1/p001cao/app/tooldev/ucx1.15-gcc9\nmyPREFIX=/home1/p001cao/app/openmpi/4.1.5-gcc9\n\n../configure --with-sge --without-verbs --with-ucx=${myUCX} --prefix=${myPREFIX}\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#some-optional-packages","title":"Some optional packages","text":""},{"location":"hpc/compile/OpenMPI_4/#2-libnuma-devel","title":"2. libnuma-devel","text":"<p>https://github.com/numactl/numactl</p> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\ntar xzf numactl-2.0.13.tar.gz\ncd numactl-2.0.13\n\nmodule load tooldev/autoconf-2.72c\n./autogen.sh\n\nrm -rf build &amp;&amp; mkdir build &amp;&amp; cd build\n../configure --prefix=/home1/p001cao/app/tooldev/numactl-2.0.13\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#2-libudev","title":"2. libudev","text":"<p>NOTE: remove <code>-Wpedantic</code> in <code>Makefile</code> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\ngit clone https://github.com/illiliti/libudev-zero.git\ncd libudev-zero\n\nmake PREFIX=/home1/p001cao/app/tooldev/libudev-zero install\n</code></pre></p>"},{"location":"hpc/compile/OpenMPI_4/#3-openmpiucx-libfabric","title":"3. openMPI/UCX: libfabric ()","text":"<p>If building directly from the libfabric git tree, run './autogen.sh' before the configure step.</p> <pre><code># wget https://github.com/ofiwg/libfabric/releases/tag/v1.19.0/libfabric-1.19.0.tar.bz2\n\ncd /home1/p001cao/0SourceCode/tooldev\ngit clone -b main https://github.com/ofiwg/libfabric\ncd libfabric\ngit pull origin main\n\nmodule load tooldev/autoconf-2.72c\n./autogen.sh\n</code></pre> <pre><code>module load compiler/llvm-17\n\n./configure --enable-ucx=no --prefix=/home1/p001cao/app/tooldev/libfabric-1.19\nmake -j 16 &amp;&amp; make install\n\n## module\nprepend-path PKG_CONFIG_PATH $topdir/lib/pkgconfig\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#4-openmpiucx-knem","title":"4. openMPI/UCX: KNEM","text":"<p>Dont use new compiler.</p> <p>https://knem.gitlabpages.inria.fr/</p> <pre><code>tar zxvf knem-1.1.4.tar.gz\ncd knem-1.1.4\n./configure --prefix=/home1/p001cao/app/tooldev/knem-1.1.4\n</code></pre>"},{"location":"hpc/compile/OpenMPI_4/#5-openmpiucx-xpmem","title":"5. openMPI/UCX: XPMEM","text":"<p>https://github.com/hjelmn/xpmem/releases/tag/v2.6.3</p> <p>https://github.com/hjelmn/xpmem/wiki/Installing-XPMEM \u2192 cannot install: require linux kernel 4.x</p> <pre><code>check: uname -a\n</code></pre> <pre><code>tar zxvf xpmem-2.6.3.tar.gz\ncd xpmem-2.6.3\n\n./configure --prefix=/home1/p001cao/app/tooldev/xpmem-2.6.2\n</code></pre>"},{"location":"hpc/compile/OpenMPI_5/","title":"OpenMPI-5","text":"<ul> <li>There is no <code>--with-verb</code> anymore. And openib BTL is remove in this version, so InfiniBand must use \"ucx PML\". See more</li> <li>May use UCX with OMPI-5 and do not need seperate installation for Eagle, Lion?</li> <li>May not be used with UCX-1.11</li> <li>See news in 5.x here</li> <li>Use UCX or Libfabric for IB. (Libfabric may use a lot of memory, so may lead to memory problem)</li> <li>UCX + OMPI4 may cause <code>address not mapped</code> error with GPAW.</li> </ul>"},{"location":"hpc/compile/OpenMPI_5/#usc1-cenntos-65","title":"USC1: (Cenntos 6.5)","text":"<pre><code>module load tool_dev/binutils-2.36                       # gold, should use to avoid link-error\nmodule load compiler/gcc-11.2\nexport myUCX=/uhome/p001cao/app/tool_dev/ucx-1.11\n</code></pre> <pre><code>cd openmpi-5.0.0\nmkdir build_eagle &amp;&amp; cd build_eagle\n\n../configure CC=gcc CXX=g++ FC=gfortran F77=gfortran LDFLAGS=\"-fuse-ld=gold -lrt\" \\\n--with-sge --with-ucx=${myUCX}  \\\n--prefix=/uhome/p001cao/app/openmpi/5.0.0-gcc11.2-eagle\n</code></pre>"},{"location":"hpc/compile/OpenMPI_5/#tachyon-cenntos-69","title":"Tachyon - Cenntos 6.9","text":""},{"location":"hpc/compile/OpenMPI_5/#using-llvm","title":"Using LLVM","text":"<ul> <li>With version <code>5.0.0rc12</code>, compiling fails with error <code>ld.lld: error: unable to find library -lnuma</code> and <code>-ludev</code>. This mean the current version of <code>libudev</code> no longer work. Tried install install them</li> <li>create link : <code>ln -sf $UDEVlib/libudev.a $myLLVM/lib/libudev.so.0</code></li> <li><code>libudev</code> error can solve by <code>--without-hcoll</code> as discuss here</li> <li><code>prrte</code> docs error, to disable build docs, delete <code>docs</code> in <code>SUBDIRS</code> of <code>/home1/p001cao/0SourceCode/ompi-5.0.x/3rd-party/prrte/Makefile.in</code> see this -&gt; not work. Solve by manually create files in subfolder 3<sup>rd</sup>-party \u2192 copy from folder <code>0SourceCode/ompi-5.0.x/3rd-party/prrte/src/docs/show-help-files</code> and rename .rst to .txt (or create empty files) files: <code>help-prte.txt, help-prted.txt, help-prterun.txt, help-prun.txt, help-pterm.txt</code> in folder <code>.../build_clang/3rd-party/prrte/src/docs/show-help-files/_build/text</code>. Then make install</li> </ul> <pre><code>cd /home1/p001cao/0SourceCode\n# git clone --recursive  -b v5.0.x --recursive https://github.com/open-mpi/ompi.git  ompi-5.0.x\ncd ompi-5.0.x\ngit pull origin v5.0.x\ngit submodule update --recursive\n\nmodule load tooldev/autoconf-2.72c\nmodule load tooldev/automake-1.16.5\nmodule load tooldev/libtool-2.4.7\nexport ACLOCAL_PATH=/home1/p001cao/app/tooldev/libtool-2.4.7/share/aclocal\n\n./autogen.pl\n</code></pre> <pre><code>rm -rf build_clang &amp;&amp; mkdir build_clang &amp;&amp; cd build_clang\n\nmodule load compiler/llvm-17          # clang + lld\nmodule load tooldev/libudev\n\nmyLLVM=/home1/p001cao/app/compiler/llvm-17\nexport PATH=$myLLVM/bin:$PATH\nexport CC=clang CXX=clang++ FC=gfortran        # flang-new\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\nNUMAlib=/home1/p001cao/app/tooldev/numactl-2.0.13/lib\nUDEVlib=/home1/p001cao/app/tooldev/libudev-zero/lib\nexport LD_LIBRARY_PATH=$myLLVM/lib:$NUMAlib:$UDEVlib:$LD_LIBRARY_PATH\nmyUCX=/home1/p001cao/app/tooldev/ucx1.15-clang17\nKNEM=/opt/knem-1.1.3.90mlnx1                 # /home1/p001cao/app/tooldev/knem-1.1.4\nOFI=/home1/p001cao/app/tooldev/libfabric-1.19\nmyPREFIX=/home1/p001cao/app/mpi/openmpi5.0.x-clang17\n\n../configure --with-sge --with-ucx=${myUCX} --with-knem=${KNEM} --with-ofi=${OFI} \\\n    --without-hcoll --enable-mpi1-compatibility --prefix=${myPREFIX}\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/OpenMPI_5/#llvm-no-ucx","title":"LLVM no UCX","text":"<pre><code>rm -rf build_noUCX &amp;&amp; mkdir build_noUCX &amp;&amp; cd build_noUCX\n\nmodule load compiler/llvm-17          # clang + lld\nmodule load tooldev/libudev\n\nmyLLVM=/home1/p001cao/app/compiler/llvm-17\nexport PATH=$myLLVM/bin:$PATH\nexport CC=clang CXX=clang++ FC=gfortran        # flang-new\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\nNUMAlib=/home1/p001cao/app/tooldev/numactl-2.0.13/lib\nUDEVlib=/home1/p001cao/app/tooldev/libudev-zero/lib\nexport LD_LIBRARY_PATH=$myLLVM/lib:$NUMAlib:$UDEVlib:$LD_LIBRARY_PATH\nKNEM=/opt/knem-1.1.3.90mlnx1                 # /home1/p001cao/app/tooldev/knem-1.1.4\nOFI=/home1/p001cao/app/tooldev/libfabric-1.19\nmyPREFIX=/home1/p001cao/app/mpi/openmpi5.0.x-clang17-noUCX\n\n../configure --with-sge --without-ucx --with-knem=${KNEM} --with-ofi=${OFI} \\\n    --without-hcoll --enable-mpi1-compatibility --prefix=${myPREFIX}\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/OpenMPI_conda/","title":"Openmpi in Conda","text":"<pre><code>- Use conda to manage all necessary libs in Linux.\n- However, this way cannot use openmpi with clang. So install clang in conda and use clang to compile openmpi\n- Python &gt; 3.7.12 require to update GCC-conda=11\n`conda install -c conda-forge libstdcxx-ng=11 libgcc-ng=11 libgfortran-ng=11`. But dont use this to void requiring higher GLIBC. Also, `zlib=1.2.12` require GLIBC=2.14. So that to void these errors, use `conda install -c conda-forge libstdcxx-ng=10 libgcc-ng=10 libgfortran-ng=10 zlib=1.2.11 python=3.7.12`\n</code></pre>"},{"location":"hpc/compile/OpenMPI_conda/#usc2-tachyon-centos-69","title":"USC2 Tachyon (centos 6.9)","text":""},{"location":"hpc/compile/OpenMPI_conda/#install-conda","title":"Install conda","text":"<pre><code>Consider Miniconda for light, and reduce error\n</code></pre> <p>Download Anaconda installer for Linux</p> <pre><code>cd /uhome/p001cao/local/W_Source_Code\nwget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n\nmodule load compiler/gcc-11.2\nexport PATH=/uhome/p001cao/local/app/compiler/gcc-11.2/bin:$PATH\nexport CC=gcc  export CXX=g++  export FC=gfortran\n\nbash Miniconda3-py37_4.9.2-Linux-x86_64.sh -u\n\nchoose folder to install:   /home1/p001cao/local/app/miniconda3\nrunning conda init?  NO\n... finish\n</code></pre>"},{"location":"hpc/compile/OpenMPI_conda/#module-file","title":"Module file","text":"<ul> <li>Conda module: create file into folder  /uhome/p001cao/local/share/lmodfiles/conda/conda3</li> </ul> <pre><code>set     topdir          /uhome/p001cao/local/miniconda3\nprepend-path    PATH                    $topdir/bin\nprepend-path    LD_LIBRARY_PATH         $topdir/lib\nprepend-path    INCLUDE                 $topdir/include\n</code></pre> <ul> <li>module file for Python Environments https://manjusri.ucsc.edu/2017/09/08/environment-modules/ create 2 evironments: python37, python27</li> </ul> <pre><code>module load conda/conda3\nconda create -n py37llvm python=3.7.5\n</code></pre> <p>create module files for environments, create file into folder  /uhome/p001cao/local/share/lmodfiles/conda/py37llvm</p> <pre><code>set     topdir          /uhome/p001cao/local/Miniconda3/envs/py37ompi\nprepend-path    PATH                    $topdir/bin\nprepend-path    LD_LIBRARY_PATH         $topdir/lib\nprepend-path    INCLUDE                 $topdir/include\n</code></pre>"},{"location":"hpc/compile/OpenMPI_conda/#install-libraries","title":"Install libraries","text":"<p>Don't install ompi</p> <pre><code>module load conda/conda3\nsource activate py37llvm\n\nconda install -c asmeurer glibc       # may error\nconda install -c conda-forge cmake libstdcxx-ng=10 libgcc-ng=10 libgfortran-ng=10 zlib=1.2.11 python=3.7.12\n</code></pre> <p>1.LLVM</p> <pre><code>conda install -c conda-forge llvm clang flang libclang lld llvm-openmp llvm-tools\n</code></pre> <p>2.ucx</p> <pre><code>conda install -c conda-forge ucx\n</code></pre>"},{"location":"hpc/compile/OpenMPI_conda/#openmpi","title":"OpenMPI","text":""},{"location":"hpc/compile/OpenMPI_conda/#lammps","title":"Lammps","text":"<pre><code>git pull origin develop\nmkdir build_LLVM &amp;&amp; cd build_LLVM\n\nmodule load tool_dev/binutils-2.37\nmodule load tool_dev/cmake-3.20.3\nmodule load fftw/fftw3.3.10-ompi4.1.4-clang14\nmodule load mpi/ompi4.1.4-clang14\n\nexport myCOMPILER=/home1/p001cao/local/app/compiler/llvm-14\nexport PATH=$PATH:${myCOMPILER}/bin\nexport CC=mpicc  export CXX=mpic++  export FC=mpifort\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\n## python (require py3) &amp; BLAS+LAPACK\nexport pyROOT=/home1/p001cao/local/app/miniconda3/envs/py37Lammps\n\ncmake ../cmake -C ../cmake/presets/all_on.cmake \\\n-DPython_ROOT_DIR=${pyROOT} \\\n-DBUILD_MPI=yes -DBUILD_OMP=yes -DPKG_OPENMP=yes -DLAMMPS_MACHINE=mpi -DBUILD_SHARED_LIBS=no \\\n-DPKG_GPU=no -DPKG_KOKKOS=no -DPKG_INTEL=no -DPKG_MDI=no \\\n-DPKG_SCAFACOS=no -DPKG_ADIOS=no -DPKG_NETCDF=no -DPKG_VTK=no -DPKG_H5MD=no \\\n-DPKG_MESONT=no -DPKG_LATTE=no -DPKG_MSCG=no -DPKG_ATC=no -DPKG_KIM=no \\\n-DPKG_PLUMED=yes -DPKG_ML-PACE=yes -DPKG_ML-QUIP=no -DPKG_ML-HDNNP=no  \\\n-DFFT=FFTW3 \\\n-DCMAKE_INSTALL_PREFIX=/home1/p001cao/local/app/lammps/llvmOMPI4-dev\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/OpenMPI_conda/#ref","title":"Ref","text":"<p>Update GLIBC: https://gist.github.com/michaelchughes/85287f1c6f6440c060c3d86b4e7d764b</p>"},{"location":"hpc/compile/OpenMPI_windows/","title":"MPICH2 on Windows","text":""},{"location":"hpc/compile/OpenMPI_windows/#mpich2","title":"MPICH2","text":"<ul> <li>Step1: Download and install mpich2-1.4.1p1-win-x86-64.msi</li> <li>Step2: download and install Microsoft MPI v10.1, install msmpisetup.exe</li> <li>check: <pre><code>mpiexec -help\n</code></pre></li> </ul>"},{"location":"hpc/compile/PMIX/","title":"PMIX","text":"<pre><code>require libevent and hwloc\n</code></pre>"},{"location":"hpc/compile/PMIX/#compile-libevent","title":"Compile libevent","text":"<pre><code>tar xvf libevent-2.1.11-stable.tar.gz\ncd libevent-2.1.11-stable\nmkdir build &amp;&amp; cd build\n\nmodule load compiler/llvm-14          # clang + lld\n\nexport myCOMPILER=/home1/p001cao/local/app/compiler/llvm-14\nexport PATH=$PATH:${myCOMPILER}/bin\nexport CC=clang export CXX=clang++ export FC=flang\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\n\n./configure --prefix=/home1/p001cao/local/app/tool_dev/libevent-2.1.11\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/PMIX/#compile-hwloc","title":"Compile hwloc","text":"<p>Download</p> <pre><code>tar xvf hwloc-2.8.0.tar.gz\ncd hwloc-2.8.0\nmkdir build &amp;&amp; cd build\n\nmodule load compiler/llvm-14          # clang + lld\n\nexport myCOMPILER=/home1/p001cao/local/app/compiler/llvm-14\nexport PATH=$PATH:${myCOMPILER}/bin\nexport CC=clang export CXX=clang++ export FC=flang\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\n\n../configure --prefix=/home1/p001cao/local/app/tool_dev/hwloc-2.8.0\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/PMIX/#compile-pmix","title":"compile PMIX","text":"<pre><code>tar xvf pmix-4.1.2.tar.gz\ncd pmix-4.1.2\nmkdir build &amp;&amp; cd build\n\nmodule load compiler/llvm-14          # clang + lld\n\nexport myCOMPILER=/home1/p001cao/local/app/compiler/llvm-14\nexport PATH=$PATH:${myCOMPILER}/bin\nexport CC=clang export CXX=clang++ export FC=flang\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\nexport my_libevent=/home1/p001cao/local/app/tool_dev/libevent-2.1.11\nexport my_hwloc=/home1/p001cao/local/app/tool_dev/hwloc-2.8.0\n\n../configure --with-libevent=${my_libevent} --with-hwloc=${my_hwloc} \\\n--prefix=/home1/p001cao/local/app/tool_dev/pmix-4.1.2\n\nmake -j 16 &amp;&amp; make install\n</code></pre> <p>Refs: \\ https://openpmix.github.io/code/building-the-pmix-reference-server \\</p>"},{"location":"hpc/compile/Plumed/","title":"Compile PLUMED","text":"<p>PLUMED 2.4 requires a compiler that supports C++11, and needs one of the following - gcc 4.8.1      (need to install GCC) - clang 3.3 - intel 15        (need to install Intel)</p> <p>Intel alone does not fully support C++11 if the environment is without gcc 4.8 or newer. Installing an external GCC is a solution for this, but this may cause some errors when running Plumed due to cross-compiling.</p> <p>Note</p> <ul> <li>Making lepton library faster <code>--enable-asmjit</code></li> </ul>"},{"location":"hpc/compile/Plumed/#dowload","title":"Dowload","text":"<ul> <li>github</li> </ul> <pre><code>https://github.com/plumed/plumed2/releases/tag/v2.5.2\ntar xvzf plumed2-2.5.2.tar.gz\n</code></pre>"},{"location":"hpc/compile/Plumed/#download-branch-v25","title":"download branch v2.5","text":"<p>git clone https://github.com/plumed/plumed2.git --branch=v2.5   plumed2-2.5.x cd plumed2-2.5.x git pull origin v2.5                           # or    git checkout v2.5</p>"},{"location":"hpc/compile/Plumed/#download-branch-with-pycv","title":"download branch with PYCV","text":"<p>git clone --branch v2.6-pycv-devel  https://github.com/giorginolab/plumed2-pycv.git   plumed2-2.6pycv cd    plumed2-2.6pycv</p>"},{"location":"hpc/compile/Plumed/#download-branch-hack-the-tree","title":"download branch hack-the-tree","text":"<p>git clone   --branch hack-the-tree    https://github.com/plumed/plumed2.git    plumed2-2.7htt cd plumed2-2.7htt git pull origin hack-the-tree</p> <p>git pull origin master</p>"},{"location":"hpc/compile/Plumed/#or-clone-a-specific-tag-name-using-git-clone-httpsgit-scmcomdocsgit-clone","title":"or Clone a specific tag name using git clone: https://git-scm.com/docs/git-clone","text":"<p>git clone  --branch= I. OMPI + Intel 1. USC1 module load mpi/openmpi4.0.2-Intel2019xe module load intel/mkl-2019xe <p>check:  mpiicpc  -v                      (intel C++)             mpicxx --version             ( gcc C++)</p> <p>Notes: openMPI must be compile with gcc 4.8 or newer (load gcc/gcc-7.4.0 when compile openMPI)</p>"},{"location":"hpc/compile/Plumed/#install-plumed","title":"Install PLUMED","text":"<p>(to compile with mpi-enable, need to use compiler: CXX=mpic++   CC=mpicc) chose modules to install: https://www.plumed.org/doc-v2.5/user-doc/html/mymodules.html enable/disable modules: ./configure --enable-modules=+crystallization-colvar ./configure --enable-modules=all:-colvar-multicolvar BLAS and LAPACK Libs a. separate compile Blas &amp; Lapack b. use Blas &amp; Lapack from intel_mkl LIBS=\"-mkl\" c. or use internal link: (blas &amp; lapack is automatically built, need FORTRAN compiler) --disable-external-blas --disable-external-lapack \\</p> <p>VMD trajectory plugins https://www.plumed.org/doc-master/user-doc/html/_installation.html</p>"},{"location":"hpc/compile/Plumed/#configuring-plumed","title":"Configuring PLUMED","text":"<p>./configure --prefix=/uhome/p001cao/local/app/plumed2/2.6htt \\ CXX=mpic++ LIBS=\"-mkl\" \\ --enable-openmp --enable-modules=all --enable-asmjit</p>"},{"location":"hpc/compile/Plumed/#or","title":"or","text":"<p>./configure --prefix=/uhome/p001cao/local/app/plumed2/2.6 \\ CXX=mpic++ --disable-external-blas --disable-external-lapack \\ --enable-openmp --enable-modules=all --enable-asmjit</p>"},{"location":"hpc/compile/Plumed/#create-module-file-test","title":"create Module file + test","text":"<p>prepend-path PATH $topdir/bin prepend-path   PATH                $topdir/bin prepend-path   LD_LIBRARY_PATH     $topdir/lib prepend-path   INCLUDE             $topdir/include prepend-path   PKG_CONFIG_PATH     $topdir/lib/pkgconfig          # this is required in order to Lammps can found Plumed</p>"},{"location":"hpc/compile/Plumed/#test","title":"test:","text":"<p>module load plumed2/2.6.0 plumed help</p>"},{"location":"hpc/compile/Plumed/#usc2","title":"USC2:","text":"<p>module load mpi/ompi4.0.3-intel19u5 module load intel/compiler-xe19u5 module load intel/mkl-xe19u5 Configure</p> <p>./configure CXX=mpic++ CC=mpicc  LIBS=\"-mkl\" \\ --enable-openmp --enable-modules=all --enable-asmjit \\ --prefix=/home1/p001cao/local/app/plumed2/2.7htt</p> <p>make -j 8 make install II. Install PLUMED using lMPI-2019xe</p>"},{"location":"hpc/compile/Plumed/#1-usc-1","title":"1. USC 1:","text":"<p>(use this, bc compilers are available for all clusters) NOTE: intelMPI on eagle does not work, due to wrong path 1. Module load: module load intel/compiler-xe19u5 module load mpi/impi-xe19u5 module load intel/mkl-xe19u5 module load compiler/gcc/9.1.0 module load conda/py37</p> <p>Configure ./configure CXX=mpiicpc CC=mpiicc LIBS=\"-mkl\" \\ --enable-openmp --enable-modules=all --enable-asmjit \\ --prefix=/uhome/p001cao/local/app/plumed2/2.6httIMPI \\</p>"},{"location":"hpc/compile/Plumed/#usc-2","title":"USC 2","text":"<p>IV. Install PLUMED using openmpi-4.0.1 + GCC-7.4.0 (CAN) 1. Module load: module load mpi/openmpi4.0.1-gcc7.4.0 module load gcc/gcc-7.4.0</p> <p>check:  mpic++ --version             ( gcc C++) 2. Install PLUMED unzip plumed2-hack-the-tree.zip cd plumed2-hack-the-tree</p> <p>Configuring PLUMED: ./configure --prefix=/home/thang/local/app/plumed2/2.6.0-gcc \\ CXX=mpic++ --disable-external-blas --disable-external-lapack \\ --enable-openmp --enable-modules=all</p>"},{"location":"hpc/compile/Plumed/#usc2_1","title":"USC2","text":""},{"location":"hpc/compile/Plumed/#with-conda","title":"with Conda","text":"<p>Need create conda env and install <code>ompi</code>, see this</p> <p>check MPI compiler:  <code>mpic++ --version</code></p> <pre><code>cd /home1/p001cao/local/wSourceCode\ngit clone  -b master   https://github.com/plumed/plumed2.git    plumed  # hack-the-tree  master\ncd plumed\ngit pull origin master\n</code></pre> <pre><code>module load conda/py310lammps\nexport myCOMPILER=/home1/p001cao/local/app/miniconda3/envs/py310lammps\nexport PATH=${myCOMPILER}/bin:$PATH\nexport CC=mpicc  export CXX=mpic++  export FC=mpifort\nexport myPREFIX=/home1/p001cao/local/app/plumed2/ompi_conda_master\n\n./configure --prefix=${myPREFIX} \\\n--enable-openmp --enable-modules=all --enable-asmjit \\\n--disable-external-blas --disable-external-lapack\n</code></pre> <pre><code>make -j 16 &amp;&amp; make install\n</code></pre> see also <p>[1] https://www.plumed.org/doc-master/user-doc/html/_installation.html  [2] https://groups.google.com/forum/#!topic/plumed-users/x3YKcbDA-AE</p>"},{"location":"hpc/compile/UCX_UCC/","title":"UCX UCC","text":"<ul> <li>UCX</li> <li>Compile from Source vs. from pre-configured Release<ul> <li>1. install from Source</li> <li>2. install from UCX pre-configured Release</li> </ul> </li> <li>Compile with GCC<ul> <li>USC2</li> <li>USC1 (eagle)</li> </ul> </li> <li>Compile with Intel</li> <li>II. UCX optional Libs<ul> <li>1. rdma-core (fail)</li> <li>2. libnuma-devel</li> <li>3. openMPI/UCX: libfabric ()</li> <li>4. openMPI/UCX: KNEM</li> <li>5. openMPI/UCX: XPMEM</li> </ul> </li> <li>Compile with LLVM<ul> <li>USC2</li> <li>Prepare source code</li> <li>Building</li> <li>Make module file</li> </ul> </li> </ul>"},{"location":"hpc/compile/UCX_UCC/#ucx","title":"UCX","text":"<p>UCX is needed to compile OpenMPI to use InfiniBand</p> <p>Work with UCX in short:</p> <ul> <li>Get the recent release from https://github.com/openucx/ucx/releases</li> <li>Build and make <code>ucx</code> available to your machines</li> <li>Configure and compile OMPI with  <code>--with-ucx=\"path-to-ucx\"</code></li> </ul> <p>Afterward, when you launch OMPI run, you set UCX pml:</p> <pre><code>mpirun -mca btl self -mca pml ucx ....\n</code></pre> <p>To control which device and what transport are being used you can add following env variables:</p> <pre><code>mpirun -mca btl self -mca pml ucx -x UCX_NET_DEVICES=mlx5_0:1 -x UCX_TLS=rc,shm ....\n</code></pre> <p>Try to experiment with different TLS's see here for more info.</p> <p>``` tip \"See also 1. https://github.com/openucx/ucx/wiki/OpenMPI-and-OpenSHMEM-installation-with-UCX 2. https://github.com/openucx/ucx/wiki <pre><code>???+ note\n\n    - OpenMPI 4.0,3 support `ucx` 1.7 or older\n    - NOTE: UCX &gt;= 1.12.0 requires rdma-core &gt;= 28.0 or MLNX_OFED &gt;= 5.0 for Infiniband and RoCE transports support. This may cause error `address not mapped` on old system\n\n## Compile from Source vs. from pre-configured Release\n\nFor compiling from source codes, need [some tools](https://thangckt.github.io/cluster/compiling/Libtool/)\n\n### 1. install from Source\n\n```note\n- work now, but should not be use to avoid runtime errors\n- Requirements: `autoconf`, `libtool`, and `automake`\n</code></pre></p> <pre><code>cd /home1/p001cao/local/wSourceCode/tooldev\ngit clone --branch master https://github.com/openucx/ucx.git  ucx-master\ncd ucx-master\nmodule load tooldev/autoconf-2.72c\nmodule load tooldev/automake-1.16.5\nmodule load tooldev/libtool-2.4.7\nexport ACLOCAL_PATH=/home1/p001cao/app/tooldev/libtool-2.4.7/share/aclocal\n\n./autogen.sh\nmkdir build  &amp;&amp;  cd build\n\nmodule load tooldev/binutils-2.37              # gold\nmodule load compiler/gcc-10.3\n\nexport PATH=$PATH:/home1/p001cao/app/compiler/gcc-10.3/bin\nexport CC=gcc export CXX=g++ export FORTRAN=gfortran\nexport LDFLAGS=\"-fuse-ld=gold -lrt\"\n\n../configure --enable-mt  \\\n--prefix=/home1/p001cao/app/tooldev/ucx-master\n</code></pre>"},{"location":"hpc/compile/UCX_UCC/#2-install-from-ucx-pre-configured-release","title":"2. install from UCX pre-configured Release","text":"<pre><code>- This way no need ./autogen.h\n- ver 1.12.1 will cause error: not found auvx.h\n</code></pre> <pre><code>wget https://github.com/openucx/ucx/releases/download/v1.12.0/ucx-1.12.0.tar.gz\ntar xvf ucx-1.12.0.tar.gz\ncd ucx-1.12.0\nmkdir build &amp;&amp; cd build\n</code></pre>"},{"location":"hpc/compile/UCX_UCC/#tachyon","title":"Tachyon","text":""},{"location":"hpc/compile/UCX_UCC/#ucx-15-gcc-11","title":"UCX 15 - GCC 11","text":"<pre><code>- do not use GCC-11 to avoid error: Dwarf Error: found dwarf version '5', use: export CFLAGS='-gdwarf-4 -gstrict-dwarf'\nexport CFLAGS='-gdwarf-4 -gstrict-dwarf'\n</code></pre> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\n# git clone --branch v1.15.x https://github.com/openucx/ucx.git  ucx-1.15.x\ncd ucx-1.15.x\ngit pull origin v1.15.x\n\nmodule load tooldev/autoconf-2.72c\nmodule load tooldev/automake-1.16.5\nmodule load tooldev/libtool-2.4.7\nexport ACLOCAL_PATH=/home1/p001cao/app/tooldev/libtool-2.4.7/share/aclocal\n\n./autogen.sh\n</code></pre> <pre><code># tar xvf ucx-1.13.1.tar.gz\ncd ucx-1.15.0\n\nmodule load compiler/gcc-11\nmyGCC=/home1/p001cao/app/compiler/gcc-11\nexport PATH=$myGCC/bin:$PATH\nexport CFLAGS=\"-gdwarf-2 -gstrict-dwarf\"\nexport CFLAGS=\"-Wno-shadow\"\nexport myPREFIX=/home1/p001cao/app/tooldev/ucx1.15-gcc11\n\n../contrib/configure-release --enable-mt --prefix=${myPREFIX}\n\nmake -j 16 &amp;&amp; make install\n</code></pre> <p>Test <pre><code>module load tooldev/ucx-1.15-gcc\nucx_info -d | grep Transport\n</code></pre></p> <p>Option:</p> <pre><code>export CFLAGS='-gdwarf-4 -gstrict-dwarf'\nmyKNEM=/home1/p001cao/app/tooldev/knem-1.1.4\nmyNUMA=/home1/p001cao/app/tooldev/numactl-2.0.13\n\n--with-knem=$myKNEM \\\nLDFLAGS=\"-fuse-ld=gold -lrt  -L$myNUMA/lib -Wl,-rpath,$myNUMA/lib\" \\\nCFLAGS=\"-I$myNUMA/include\" \\\n\n../contrib/configure-release  --enable-optimizations\n</code></pre>"},{"location":"hpc/compile/UCX_UCC/#ucx-15-llvm","title":"UCX 15 - LLVM","text":"<p>From source code</p> Note <ul> <li>consider to update: <code>autoconf</code>, <code>libtool</code>, and <code>automake</code></li> <li>To solve error with <code>libuct_ib.la: command not found</code>, use <code>./contrib/configure-release</code> but not <code>/configure</code></li> <li>It deos not work with clang 16 (not use now).</li> <li>May error <code>gdwarf</code></li> </ul> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\n# git clone --branch v1.15.x https://github.com/openucx/ucx.git  ucx-1.15.x\ncd ucx-1.15.x\ngit pull origin v1.15.x\n\nmodule load tooldev/autoconf-2.72c\nmodule load tooldev/automake-1.16.5\nmodule load tooldev/libtool-2.4.7\nexport ACLOCAL_PATH=/home1/p001cao/app/tooldev/libtool-2.4.7/share/aclocal\n\n./autogen.sh\n</code></pre> <p>Building</p> <pre><code>rm -rf build &amp;&amp; mkdir build  &amp;&amp;  cd build\n\nmodule load compiler/llvm-17          # clang + lld\n\nmyLLVM=/home1/p001cao/app/compiler/llvm-17\nexport PATH=$myLLVM/bin:$PATH\nexport CC=clang export CXX=clang++\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\nexport CFLAGS=\"-gdwarf-2 -gstrict-dwarf -Wno-unused-but-set-variable\"\nRMDA=/home1/p001cao/0SourceCode/tooldev/rdma-core/build\nmyPREFIX=/home1/p001cao/app/tooldev/ucx1.15-clang17\n\n../contrib/configure-release --enable-mt --with-rdmacm=$RMDA --prefix=${myPREFIX}\n\nmake -j 16 &amp;&amp; make install\n</code></pre> <p>UCC: <pre><code>cd /home1/p001cao/0SourceCode/tooldev\n# git clone --branch master https://github.com/openucx/ucc.git  ucc\ncd ucc\ngit pull origin master\n\nmodule load tooldev/autoconf-2.72c\nmodule load tooldev/automake-1.16.5\nmodule load tooldev/libtool-2.4.7\nexport ACLOCAL_PATH=/home1/p001cao/app/tooldev/libtool-2.4.7/share/aclocal\n\n./autogen.sh\n</code></pre> <pre><code>rm -rf build &amp;&amp; mkdir build  &amp;&amp;  cd build\n\nmodule load compiler/llvm-17          # clang + lld\n\nmyLLVM=/home1/p001cao/app/compiler/llvm-17\nexport PATH=$myLLVM/bin:$PATH\nexport CC=clang export CXX=clang++\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\nmyUCX=/home1/p001cao/app/tooldev/ucx1.15-clang17\nmyPREFIX=/home1/p001cao/app/tooldev/ucc1.2\n\n../configure --with-ucx=${myUCX} --prefix=${myPREFIX}\n\nmake -j 16 &amp;&amp; make install\n</code></pre></p>"},{"location":"hpc/compile/UCX_UCC/#ucx-11-llvm","title":"UCX 11 - LLVM","text":"<ul> <li>NOTE: UCX &gt;= 1.12.0 requires rdma-core &gt;= 28.0 or MLNX_OFED &gt;= 5.0 for Infiniband and RoCE transports support. This may cause error <code>address not mapped</code> on old system</li> <li>dont use <code>lld</code> with ucx-1.11</li> </ul> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\nwget https://github.com/openucx/ucx/releases/download/v1.11.2/ucx-1.11.2.tar.gz\ntar xvf ucx-1.11.2.tar.gz\ncd ucx-1.11.2\nrm -rf build &amp;&amp; mkdir build &amp;&amp; cd build\n\nmodule load compiler/llvm-17\nmyLLVM=/home1/p001cao/app/compiler/llvm-17\nexport PATH=$myLLVM/bin:$PATH\nexport CC=clang export CXX=clang++\nexport LDFLAGS=\"-fuse-ld=gold -lrt\"\nexport CFLAGS=\"-Wno-unused-but-set-variable\"\nexport myPREFIX=/home1/p001cao/app/tooldev/ucx1.11-clang17\n\n../contrib/configure-release --enable-mt --prefix=${myPREFIX}\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/UCX_UCC/#make-module-file","title":"Make module file","text":"<p>at directory: /uhome/p001cao/local/share/lmodfiles/GCC \u2192 create file \"gcc-11.2\"</p> <pre><code># for Tcl script use only\nset     topdir          /home1/p001cao/app/tooldev/ucx-1.15\n\nprepend-path    PATH                    $topdir/bin\nprepend-path    INCLUDE                 $topdir/include\nprepend-path    LD_LIBRARY_PATH         $topdir/lib\nprepend-path    PKG_CONFIG_PATH         $topdir/lib/pkgconfig\n</code></pre>"},{"location":"hpc/compile/UCX_UCC/#ii-ucx-optional-libs","title":"II. UCX optional Libs","text":"<p>UCX detects the exiting libraries on the build machine and enables/disables support for various features accordingly. If some of the modules UCX was built with are not found during runtime, they will be silently disabled.</p> <ul> <li>Basic shared memory and TCP support - always enabled</li> <li>Optimized shared memory - requires knem or xpmem drivers. On modern kernels also CMA (cross-memory-attach) mechanism will be used.</li> <li>RDMA support - requires rdma-core or libibverbs library.</li> <li>NVIDIA GPU support - requires Cuda drives</li> <li>AMD GPU support - requires ROCm drivers</li> </ul>"},{"location":"hpc/compile/UCX_UCC/#1-rdma-core-work","title":"1. rdma-core (work)","text":"<p>build/bin will contain the sample programs and build/lib will contain the shared libraries. The build is configured to run all the programs 'in-place' and cannot be installed. see more</p> <p>NOTE: rdma-core does not have install function, so use directly from build folder.</p> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\ngit clone https://github.com/linux-rdma/rdma-core  rdma-core\ncd rdma-core\n# tar xvf rdma-core-30.0.tar.gz\n# cd rdma-core-30.0\n\nmodule load tooldev/cmake-3.27\nmodule load tooldev/libnl-3.2\nexport LDFLAGS=\"-lrt\"\n\n./build.sh\n</code></pre>"},{"location":"hpc/compile/UCX_UCC/#libnl","title":"libnl","text":"<p>https://topic.alibabacloud.com/a/how-to-compile-libnl-3225-in-centos-6_1_18_20033603.html</p> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\nwget --no-check-certificate https://www.infradead.org/~tgr/libnl/files/libnl-3.2.25.tar.gz\ntar vxf libnl-3.2.25.tar.gz\ncd libnl-3.2.25\nexport myPREFIX=/home1/p001cao/app/tooldev/libnl-3.2.25\n\n./configure --prefix=${myPREFIX}\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/UCX_UCC/#usc1-eagle","title":"USC1 (eagle)","text":"<pre><code>module load tooldev/binutils-2.36              # gold\nmodule load compiler/gcc-11.2\n\nexport PATH=$PATH:/uhome/p001cao/app/compiler/gcc-11.2/bin\nexport CC=gcc export CXX=g++ export FORTRAN=gfortran\n\n../configure --enable-mt --prefix=/uhome/p001cao/app/tooldev/ucx-1.11\n</code></pre> <p>Option:</p> <pre><code>myKNEM=/uhome/p001cao/app/tooldev/knem-1.1.4\nmyNUMA=/uhome/p001cao/app/tooldev/numactl-2.0.13\n\n--with-knem=$myKNEM \\\nLDFLAGS=\"-fuse-ld=gold -lrt  -L$myNUMA/lib -Wl,-rpath,$myNUMA/lib\" \\\nCFLAGS=\"-I$myNUMA/include\" \\\n</code></pre> <p>Other options:</p> <pre><code>--disable-numa\n--with-rc --with-ud --with-dc --with-ib-hw-tm --with-dm --with-cm \\\n## consider options\n--with-verbs(=DIR)      Build OpenFabrics support, adding DIR/include,\n                        DIR/lib, and DIR/lib64 to the search path for\n                        headers and libraries\n--with-rc               Compile with IB Reliable Connection support\n--with-ud               Compile with IB Unreliable Datagram support\n--with-dc               Compile with IB Dynamic Connection support\n--with-mlx5-dv          Compile with mlx5 Direct Verbs support. Direct Verbs\n                        (DV) support provides additional acceleration\n                        capabilities that are not available in a regular\n                        mode.\n--with-ib-hw-tm         Compile with IB Tag Matching support\n--with-dm               Compile with Device Memory support\n\n--with-cm               Compile with IB Connection Manager support\n\n##-- Consider\nmyNUMA=/home1/p001cao/app/tooldev/numactl-2.0.13\nLDFLAGS=\"-fuse-ld=gold -lrt  -L$myNUMA/lib -Wl,-rpath,$myNUMA/lib\" \\\nCFLAGS=\"-I$myNUMA/include\" \\\n##--\nexport myKNEM=/home1/p001cao/app/tooldev/knem1.1.3\nexport myOFI=/home1/p001cao/app/tooldev/libfabric-1.10.1\n--with-verbs=${myOFI} --with-knem=${myKNEM} \\\nhttps://developer.arm.com/tools-and-software/server-and-hpc/help/porting-and-tuning/building-open-mpi-with-openucx/running-openmpi-with-openucx\n</code></pre>"},{"location":"hpc/compile/UCX_UCC/#compile-with-intel","title":"Compile with Intel","text":"<pre><code>module load intel/compiler-xe19u5\nexport PATH=/home1/p001cao/app/intel/xe19u5/compilers_and_libraries_2019.5.281/linux/bin/intel64:$PATH\nexport CC=icc  export CXX=icpc  export FORTRAN=ifort\nexport LD_LIBRARY_PATH=/home1/p001cao/app/intel/xe19u5/compilers_and_libraries_2019.5.281/linux/compiler/lib/intel64_lin:$LD_LIBRARY_PATH\n\nexport LD_LIBRARY_PATH=/home1/p001cao/app/tooldev/glibc-2.18/lib:$LD_LIBRARY_PATH\nexport LD_LIBRARY_PATH=/usr/local/lib\n\nexport myKNEM=/home1/p001cao/app/tooldev/knem1.1.3\nexport myOFI=/home1/p001cao/app/tooldev/libfabric-1.10.1\n\n../contrib/configure-release --disable-numa --enable-mt LDFLAGS=\"-fuse-ld=lld -lrt\" \\\n--with-verbs=${myOFI} --with-knem=${myKNEM} \\\n--prefix=/home1/p001cao/app/tooldev/ucx-1.8-intel\n</code></pre> <p>List of main transports and aliases https://github.com/openucx/ucx/wiki/UCX-environment-parameters all use all the available transports. sm  all shared memory transports. shm same as \"sm\". ugni    ugni_rdma and ugni_udt. rc  RC (=reliable connection), and UD (=unreliable datagram) for connection bootstrap. \"accelerated\" transports are used if possible. ud  UD transport, \"accelerated\" is used if possible. dc  DC - Mellanox scalable offloaded dynamic connection transport rc_x    Same as \"rc\", but using accelerated transports only rc_v    Same as \"rc\", but using Verbs-based transports only ud_x    Same as \"ud\", but using accelerated transports only ud_v    Same as \"ud\", but using Verbs-based transports only tcp     TCP over SOCK_STREAM sockets rdmacm  Use RDMACM connection management for client-server API sockcm  Use sockets-based connection management for client-server API cuda_copy   Use cu*Memcpy for hostcuda device self transfers but also to detect cuda memory gdr_copy    Use GDRcopy library for hostcuda device self transfers cuda_ipc    Use CUDA-IPC for cuda devicedevice transfers over PCIe/NVLINK rocm_copy   Use for host-rocm device transfers rocm_ipc    Use IPC for rocm device-device transfers self    Loopback transport to communicate within the same process</p>"},{"location":"hpc/compile/binutils_linker/","title":"Binutils linker","text":"<ul> <li>Binutils</li> <li>UCS2:</li> <li>UCS1:</li> <li>create module file</li> <li>Zlib</li> <li>texinfo</li> <li>bison</li> </ul>"},{"location":"hpc/compile/binutils_linker/#binutils","title":"Binutils","text":"<p>to use Gold linker (first released in binutils version 2.19), should to avoid link-error https://mirror.yongbok.net/gnu/binutils/?C=M&amp;O=D There are three linkers available on modern GNU/Linux systems:</p> <pre><code>- ld, maintained by GNU binutils,\n- gold, maintained by GNU binutils, \"still in beta test\",\n- lld, developed as part of the LLVM project.\n</code></pre> <p>For speed benchmarks, see: https://www.phoronix.com/scan.php?page=article&amp;item=lld4-linux-tests&amp;num=2 TL, DR: lld is fastest, followed by gold, followed by ld check  binutils version:  ld -v</p> <p>Install: http://www.linuxfromscratch.org/lfs/view/development/chapter06/binutils.html</p> <p>Note</p> <p>do not use <code>#</code> in folder name</p>"},{"location":"hpc/compile/binutils_linker/#tachyon-centos-69","title":"Tachyon - Centos 6.9","text":"<ul> <li><code>binutils-2.40</code> require to install:<ul> <li>texinfo</li> <li>bison</li> <li>need new GCC</li> </ul> </li> </ul> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\nwget -c --no-check-certificate https://ftp.gnu.org/gnu/binutils/binutils-2.40.tar.gz\ntar zxvf binutils-2.40.tar.gz\n\ncd binutils-2.40\nrm -rf build &amp;&amp; mkdir build  &amp;&amp;  cd build\n\nexport PATH=/home2/app/compiler/gcc/9.5.0/bin:$PATH\nexport PATH=/home1/p001cao/app/tooldev/texinfo-7.0.3/bin:$PATH\nexport PATH=/home1/p001cao/app/tooldev/bison-3.8.2/bin:$PATH       # add custom ver before system's version\n\n../configure --enable-gold=yes --enable-ld=default --enable-lto \\\n    --enable-plugins --enable-shared --disable-werror  \\\n    --enable-64-bit-bfd --with-system-zlib \\\n    --prefix=/home1/p001cao/app/tooldev/binutils-2.40\n\nmake -j 16  &amp;&amp; make install\n</code></pre> <p>check:  ld -v   #  --enable-gprofng=no</p>"},{"location":"hpc/compile/binutils_linker/#ucs1","title":"UCS1:","text":"<ul> <li>work with binutils-2.36.1, to avoid error in GCC-11</li> </ul> <pre><code>tar zxvf binutils-2.36.1.tar.gz\ncd binutils-2.36.1\nmkdir build  &amp;&amp;  cd build\n\n../configure --enable-gold=yes --enable-ld=default --enable-lto \\\n--enable-plugins --enable-shared --disable-werror \\\n--enable-64-bit-bfd --with-system-zlib \\\n--prefix=/uhome/p001cao/app/tool_dev/binutils-2.36\n</code></pre>"},{"location":"hpc/compile/binutils_linker/#create-module-file","title":"create module file","text":"<p>cd /uhome/p001cao/local/Imodfiles  \u2192  create file \"cmake-3.20.3\" <pre><code># for Tcl script use only\nset     topdir          /home1/p001cao/app/tool_dev/binutils-2.37\n\nprepend-path    PATH                    $topdir/bin\nprepend-path    LD_LIBRARY_PATH         $topdir/lib\nprepend-path    INCLUDE             $topdir/include\n</code></pre></p>"},{"location":"hpc/compile/binutils_linker/#texinfo","title":"texinfo","text":"<pre><code>cd /home1/p001cao/0SourceCode/tooldev\nwget -c --no-check-certificate https://ftp.gnu.org/gnu/texinfo/texinfo-7.0.3.tar.gz\ntar zxvf  texinfo-7.0.3.tar.gz\ncd texinfo-7.0.3\n\n./configure --prefix=/home1/p001cao/app/tooldev/texinfo-7.0.3\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/binutils_linker/#bison","title":"bison","text":"<pre><code>wget -c --no-check-certificate https://ftp.gnu.org/gnu/bison/bison-3.8.2.tar.gz\ntar zxvf  bison-3.8.2.tar.gz\ncd bison-3.8.2\n\n./configure --prefix=/home1/p001cao/app/tooldev/bison-3.8.2\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/scaLAPACK_BLACS/","title":"scaLAPACK and BLACS","text":"<p>Note</p> <ul> <li>BLACS is a part of scaLAPACK, don't need to install it separately.</li> <li>Need MPI compiler</li> <li>sometimes, need <code>-DMPI_C_COMPILER=$OPENMPI/bin/mpicc -DCMAKE_Fortran_COMPILER=$OPENMPI/bin/mpif90</code></li> </ul>"},{"location":"hpc/compile/scaLAPACK_BLACS/#tachyon-centos-69","title":"Tachyon - Centos 6.9","text":""},{"location":"hpc/compile/scaLAPACK_BLACS/#openmpillvm","title":"OpenMPI+LLVM","text":"<p>Error:</p> <pre><code>cd /home1/p001cao/0SourceCode/tooldev\n# git clone -b master https://github.com/Reference-ScaLAPACK/scalapack.git ScaLAPACK-master  #   v2.2.1  master\ncd ScaLAPACK-master\nrm -rf build &amp;&amp; mkdir build &amp;&amp; cd build\n\nmodule load tooldev/cmake-3.27\nmodule load mpi/ompi4.1.x-clang17\nmodule load tooldev/openBLAS-0.3.23\n\nOPENMPI=/home1/p001cao/app/openmpi/4.1.x-clang17\nexport PATH=$OPENMPI/bin:$PATH\nexport CC=mpicc CXX=mpic++ FC=mpifort F90=mpif90 F77=mpif77\nexport LDFLAGS=\"-fuse-ld=lld -lrt\"\nexport CFLAGS=\"-Wno-implicit-function-declaration\"\nexport myBLAS=/home1/p001cao/app/tooldev/openBLAS-0.3.23/lib64/libopenblas.so\nmyPREFIX=/home1/p001cao/app/mpi/scaLAPACK2.2-ompi4.1.x-clang17\n\ncmake .. -DUSE_OPTIMIZED_LAPACK_BLAS=yes -DBUILD_SHARED_LIBS=on \\\n-DBLAS_LIBRARIES=${myBLAS} -DLAPACK_LIBRARIES=${myBLAS} -DCMAKE_INSTALL_PREFIX=$myPREFIX\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/compile/scaLAPACK_BLACS/#openmpigcc","title":"OpenMPI+GCC","text":"<pre><code>module load tooldev/cmake-3.27\nmodule load mpi/ompi4.1.5-gcc9\nmodule load tooldev/openBLAS0.3.23-gcc9\n\nOPENMPI=/home1/p001cao/app/openmpi/4.1.5-gcc9\nexport PATH=$OPENMPI/bin:$PATH\nexport CC=mpicc CXX=mpic++ FC=mpifort F90=mpif90 F77=mpif77\nexport myBLAS=/home1/p001cao/app/tooldev/openBLAS0.3.23-gcc9/lib64/libopenblas.so\nmyPREFIX=/home1/p001cao/app/mpi/scaLAPACK2.2-ompi4.1.5-gcc9\n\ncmake .. -DUSE_OPTIMIZED_LAPACK_BLAS=yes -DBUILD_SHARED_LIBS=on \\\n-DBLAS_LIBRARIES=${myBLAS} -DLAPACK_LIBRARIES=${myBLAS} -DCMAKE_INSTALL_PREFIX=$myPREFIX\n\nmake -j 16 &amp;&amp; make install\n</code></pre>"},{"location":"hpc/refPage/cheatsheet/","title":"Cheatsheet","text":"Pandas cheatsheet pdf Regression Analysis cheatsheet pdf PPT guideline pdf Basic Concepts of Chemical Engineering Thermodynamics pdf"},{"location":"hpc/refPage/docs_syntax/","title":"Documentation syntax","text":""},{"location":"hpc/refPage/docs_syntax/#latex","title":"Latex","text":"Note for Latex html Code block with <code>listing</code> pdf Code block with <code>minted</code> pdf"},{"location":"hpc/refPage/docs_syntax/#docs-syntax","title":"Docs Syntax","text":"Markdown basic html Kramdown basic html Software engineering and systems engineering [course html"},{"location":"hpc/refPage/docs_syntax/#making-docs","title":"Making Docs","text":"Mkdocs html MkDocs Material html Python Markdown html Jupyter Books html The best MkDocs plugins and customizations html <p>Using Google Colab with GitHub</p>"},{"location":"odd/","title":"Odd","text":""},{"location":"odd/music/Lyrics/","title":"Lyrical Chord","text":""},{"location":"odd/music/Lyrics/#chiec-la-cuoi-cung","title":"Chi\u1ebfc l\u00e1 cu\u1ed1i c\u00f9ng","text":"<p>\u0110o\u00e0n Chu\u1ea9n &amp; T\u1eeb Linh - 1955, Boston, Capo 3</p> <pre><code>Em th\u1eddi [Em] gian, s\u01b0\u01a1ng gi\u00f3 ph\u00f4i [Am] pha\nAnh ng\u1ed3i \u0111\u00e2y anh nh\u1edb \u0111\u1ebfn [Em] em\nNh\u01b0 c\u00e0nh [C] kh\u00f4 tr\u01b0\u1edbc l\u00fac xa [B7] c\u00e2y g\u1ecdi n\u1eafng\nEm th\u1eddi [Em] gian, em c\u00f3 bi\u1ebft [Am] kh\u00f4ng\nKhi m\u00f9a \u0111\u00f4ng \u0111\u01b0a n\u1eafng qua [Em] s\u00f4ng\n\u0110\u1ec3 t\u00ecnh [C] y\u00eau gi\u1eefa n\u01b0\u1edbc m\u00eanh [B7] m\u00f4ng g\u1ecdi [Em] \u0111\u00f2.\n\nT\u00f4i \u0111i b\u00ean [G] ng\u01b0\u1eddi, ng\u01b0\u1eddi \u0111i b\u00ean t\u00f4i\nSao \u0111\u00f4i t\u00e2m [D] h\u1ed3n \u0111\u00e3 qu\u00e1 xa [G] x\u00f4i\nTr\u00ean nh\u1eefng con [Em] \u0111\u01b0\u1eddng tho\u1ea3ng h\u01b0\u01a1ng hoa s\u1eefa\nEm \u0111\u00e3 n\u00f3i [B7] g\u00ec, qu\u00e1 kh\u1ee9 t\u01b0\u01a1ng [Em] lai\nTr\u0103ng sao tr\u00ean [G] tr\u1eddi c\u00f2n khi chia \u0111\u00f4i\nNh\u01b0ng ti\u1ebfng ca [D] n\u00e0o c\u00f2n l\u1eafng trong [G] t\u00f4i\nT\u00f4i ng\u01b0\u1edbc l\u00ean [Em] tr\u1eddi g\u1ecdi m\u00e2y h\u1ea1nh [C] ph\u00fac\nM\u00e2y v\u1eabn \u00e2m [B7] th\u1ea7m l\u00e3ng \u0111\u00e3ng m\u00e2y [Em] tr\u00f4i.\n\nS\u00e0i G\u00f2n chi\u1ec1u [G] nay tr\u1eddi l\u00ean m\u00e2y [B7] tr\u1eafng\nChi\u1ebfc l\u00e1 cu\u1ed1i c\u00f9ng r\u01a1i xu\u1ed1ng ch\u00e2n [Am] em\nNh\u01b0 nh\u1eafc m\u1ed1i [D] t\u00ecnh tr\u00f3t l\u1ee1 kh\u00f4ng [G] t\u00ean\nEm bi\u1ebft n\u00f3i [Em] g\u00ec h\u1ee1i anh y\u00eau [C] d\u1ea5u\nEm kh\u00f3c cho [B7] t\u00ecnh m\u00e3i m\u00e3i kh\u00f4ng [Em] qu\u00ean.\n\nS\u00e0i G\u00f2n chi\u1ec1u [G] nay c\u00f2n nh\u01b0 in [B7] b\u00f3ng\nD\u1ea5u v\u1ebft l\u00e2u \u0111\u00e0i tr\u00ean c\u00e1t anh [Am] x\u00e2y\nB\u00f3ng d\u00e1ng em [D] v\u1ec1 th\u1ea5p tho\u00e1ng \u0111\u00e2u [G] \u0111\u00e2y\nChi\u1ebfc l\u00e1 cu\u1ed1i [Em] c\u00f9ng l\u00e0 c\u1ee7a em [C] \u0111\u00f3\nEm h\u00e3y gi\u1eef [B7] g\u00ecn tr\u01b0\u1edbc l\u00fac chia [Em] tay.\n</code></pre>"},{"location":"odd/music/music_classic/","title":"Classic pieces","text":""},{"location":"odd/music/music_classic/#classic-pieces","title":"Classic pieces","text":""},{"location":"odd/music/music_foreigned/","title":"Foreigned","text":""},{"location":"odd/music/music_foreigned/#f","title":"f","text":""},{"location":"odd/music/music_guitar_cover/","title":"Guitar covers","text":""},{"location":"odd/music/music_guitar_cover/#guitar","title":"guitar","text":""},{"location":"odd/music/music_saigon_fall/","title":"Saigon memorial","text":""},{"location":"odd/music/music_saigon_fall/#saigon-memorial","title":"Saigon memorial","text":""},{"location":"odd/music/music_sleep/","title":"Sleeping","text":""},{"location":"odd/music/music_sleep/#sleep","title":"sleep","text":""},{"location":"odd/music/music_tinh_ca/","title":"Love theme","text":"<p> Khi su\u1ed1i t\u00f3c \u0111\u1ed5 xu\u1ed1ng ng\u1ecdn t\u00ecnh ca  Nh\u1eefng s\u1ee3i huy\u1ec1n ch\u1ea3y xu\u00f4i v\u1ec1 m\u1ed9t h\u01b0\u1edbng  \u00d4i su\u1ed1i t\u00f3c u\u1ed1n m\u00ecnh qua kho\u1ea3ng tr\u1ed1ng  Nh\u1ed1t h\u1ed3n ta v\u00e0o t\u1eadn \u0111\u00e1y thi\u00ean \u0111\u01b0\u1eddng  </p>"},{"location":"odd/music/music_tinh_ca/#love-theme","title":"Love theme","text":""},{"location":"odd/music/music_viet_su/","title":"Historical theme","text":"<p> M\u1edd trong b\u00f3ng chi\u1ec1u   M\u1ed9t \u0111o\u00e0n qu\u00e2n th\u1ea5p tho\u00e1ng   N\u00fai c\u00e2y r\u1eebng, l\u1eafng ti\u1ebfng nghe h\u00ecnh d\u00e1ng  C\u1ee7a ng\u01b0\u1eddi anh h\u00f9ng  L\u1ea1nh l\u00f9ng theo tr\u1ed1ng d\u1ed3n  Tr\u00ean khu \u0111\u1ed3i hoang, in trong chi\u1ec1u bu\u00f4ng  </p> <p> </p>"},{"location":"odd/music/music_viet_su/#historical-theme","title":"Historical theme","text":""},{"location":"odd/reading/read_list/","title":"Reading list","text":"<p>The Road to Serfdom - F.A. Hayek - pdf</p> <p>Animal Farm - George Orwell - pdf</p> <p>Nineteen eighty-four - George Orwell - pdf</p> <p>\u0110\u01b0\u1eddng v\u1ec1 n\u00f4 l\u1ec7 - F.A. Hayek - pdf</p> <p>\u0110\u1eebng chet duoi tay TQ - PETER NAVARRO - pdf</p>"},{"location":"ref/","title":"Refs","text":""},{"location":"ref/chat/","title":"Chat","text":""},{"location":"ref/chat/#online","title":"Online","text":""},{"location":"ref/chat/#local","title":"Local","text":"<p>GPT4 copilot</p>"},{"location":"ref/english/english_learn/","title":"English","text":""},{"location":"ref/english/english_learn/#grammar","title":"Grammar","text":"<ul> <li>Giai thich ngu phap tieng Anh - Mai Lan Huong \u00a0  pdf</li> </ul>"},{"location":"ref/english/vocabulary_img/","title":"Vocabulary by images","text":"<p>See more</p>"},{"location":"ref/english/vocabulary_img/#clothes-and-accessories","title":"Clothes and accessories","text":""},{"location":"ref/english/vocabulary_img/#motorbike-parts","title":"Motorbike parts","text":""},{"location":"ref/raw_md/ml_in_comp_mat/","title":"Ml in comp mat","text":"Best of Atomistic Machine Learning \u269b\ufe0f\ud83e\uddec\ud83d\udc8e      <p> \ud83c\udfc6\u00a0 A ranked list of awesome atomistic machine learning (AML) projects. Updated regularly. </p> <p> </p> <p>This curated list contains 430 awesome open-source projects with a total of 190K stars grouped into 22 categories. All projects are ranked by a project-quality score, which is calculated based on various metrics automatically collected from GitHub and different package managers. If you like to add or update projects, feel free to open an issue, submit a pull request, or directly edit the projects.yaml.</p> <p>The current focus of this list is more on simulation data rather than experimental data, and more on materials rather than drug design. Nevertheless, contributions from other fields are warmly welcome!</p> <p>How to cite. See the button \"Cite this repository\" on the right side-bar.</p> <p>\ud83e\uddd9\u200d\u2642\ufe0f  Discover other best-of lists or create your own.</p>"},{"location":"ref/raw_md/ml_in_comp_mat/#contents","title":"Contents","text":"<ul> <li>Active learning 6 projects</li> <li>Community resources 30 projects</li> <li>Datasets 45 projects</li> <li>Data Structures 4 projects</li> <li>Density functional theory (ML-DFT) 33 projects</li> <li>Educational Resources 28 projects</li> <li>Explainable Artificial intelligence (XAI) 3 projects</li> <li>Electronic structure methods (ML-ESM) 5 projects</li> <li>General Tools 22 projects</li> <li>Generative Models 14 projects</li> <li>Interatomic Potentials (ML-IAP) 70 projects</li> <li>Language Models 22 projects</li> <li>Materials Discovery 12 projects</li> <li>Mathematical tools 11 projects</li> <li>Molecular Dynamics 10 projects</li> <li>Reinforcement Learning 2 projects</li> <li>Representation Engineering 25 projects</li> <li>Representation Learning 58 projects</li> <li>Universal Potentials 10 projects</li> <li>Unsupervised Learning 7 projects</li> <li>Visualization 6 projects</li> <li>Wavefunction methods (ML-WFT) 5 projects</li> <li>Others 1 projects</li> </ul>"},{"location":"ref/raw_md/ml_in_comp_mat/#explanation","title":"Explanation","text":"<ul> <li>\ud83e\udd47\ud83e\udd48\ud83e\udd49\u00a0 Combined project-quality score</li> <li>\u2b50\ufe0f\u00a0 Star count from GitHub</li> <li>\ud83d\udc23\u00a0 New project (less than 6 months old)</li> <li>\ud83d\udca4\u00a0 Inactive project (6 months no activity)</li> <li>\ud83d\udc80\u00a0 Dead project (12 months no activity)</li> <li>\ud83d\udcc8\ud83d\udcc9\u00a0 Project is trending up or down</li> <li>\u2795\u00a0 Project was recently added</li> <li>\ud83d\udc68\u200d\ud83d\udcbb\u00a0 Contributors count from GitHub</li> <li>\ud83d\udd00\u00a0 Fork count from GitHub</li> <li>\ud83d\udccb\u00a0 Issue count from GitHub</li> <li>\u23f1\ufe0f\u00a0 Last update timestamp on package manager</li> <li>\ud83d\udce5\u00a0 Download count from package manager</li> <li>\ud83d\udce6\u00a0 Number of dependent projects</li> </ul>"},{"location":"ref/raw_md/ml_in_comp_mat/#active-learning","title":"Active learning","text":"<p>Projects that focus on enabling active learning, iterative learning schemes for atomistic ML.</p> FLARE (\ud83e\udd4722 \u00b7  \u2b50 290 \u00b7 \ud83d\udcc8) - An open-source Python package for creating fast and accurate interatomic potentials. <code>MIT</code> <code>C++</code> <code>ML-IAP</code>  - [GitHub](https://github.com/mir-group/flare) (\ud83d\udc68\u200d\ud83d\udcbb 41 \u00b7 \ud83d\udd00 66 \u00b7 \ud83d\udce5 8 \u00b7 \ud83d\udce6 11 \u00b7 \ud83d\udccb 220 - 16% open \u00b7 \u23f1\ufe0f 20.09.2024):      <pre><code>git clone https://github.com/mir-group/flare\n</code></pre> IPSuite (\ud83e\udd4817 \u00b7  \u2b50 18) - A Python toolkit for FAIR development and deployment of machine-learned interatomic potentials. <code>EPL-2.0</code> <code>ML-IAP</code> <code>MD</code> <code>workflows</code> <code>HTC</code> <code>FAIR</code>  - [GitHub](https://github.com/zincware/IPSuite) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 10 \u00b7 \ud83d\udce6 6 \u00b7 \ud83d\udccb 130 - 51% open \u00b7 \u23f1\ufe0f 19.09.2024):      <pre><code>git clone https://github.com/zincware/IPSuite\n</code></pre> - [PyPi](https://pypi.org/project/ipsuite) (\ud83d\udce5 160 / month \u00b7 \u23f1\ufe0f 08.08.2024):     <pre><code>pip install ipsuite\n</code></pre> Finetuna (\ud83e\udd4910 \u00b7  \u2b50 42) - Active Learning for Machine Learning Potentials. <code>MIT</code>  - [GitHub](https://github.com/ulissigroup/finetuna) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 11 \u00b7 \ud83d\udccb 20 - 25% open \u00b7 \u23f1\ufe0f 15.05.2024):      <pre><code>git clone https://github.com/ulissigroup/finetuna\n</code></pre> ACEHAL (\ud83e\udd495 \u00b7  \u2b50 11 \u00b7 \ud83d\udca4) - Hyperactive Learning (HAL) Python interface for building Atomic Cluster Expansion potentials. <code>Unlicensed</code> <code>Julia</code>  - [GitHub](https://github.com/ACEsuit/ACEHAL) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 7 \u00b7 \ud83d\udccb 10 - 40% open \u00b7 \u23f1\ufe0f 21.09.2023):      <pre><code>git clone https://github.com/ACEsuit/ACEHAL\n</code></pre> Show 2 hidden projects...  - flare++ (\ud83e\udd4813 \u00b7  \u2b50 35 \u00b7 \ud83d\udc80) - A many-body extension of the FLARE code. <code>MIT</code> <code>C++</code> <code>ML-IAP</code> - ALEBREW (\ud83e\udd493 \u00b7  \u2b50 9) - Official repository for the paper Uncertainty-biased molecular dynamics for learning uniformly accurate interatomic.. <code>Custom</code> <code>ML-IAP</code> <code>MD</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#community-resources","title":"Community resources","text":"<p>Projects that collect atomistic ML resources or foster communication within community.</p> <p>\ud83d\udd17\u00a0AI for Science Map  - Interactive mindmap of the AI4Science research field, including atomistic machine learning, including papers,..</p> <p>\ud83d\udd17\u00a0Atomic Cluster Expansion  - Atomic Cluster Expansion (ACE) community homepage.</p> <p>\ud83d\udd17\u00a0CrystaLLM  - Generate a crystal structure from a composition. <code>language-models</code> <code>generative</code> <code>pretrained</code> <code>transformer</code></p> <p>\ud83d\udd17\u00a0GAP-ML.org community homepage <code>ML-IAP</code></p> <p>\ud83d\udd17\u00a0matsci.org  - A community forum for the discussion of anything materials science, with a focus on computational materials science..</p> <p>\ud83d\udd17\u00a0Matter Modeling Stack Exchange - Machine Learning  - Forum StackExchange, site Matter Modeling, ML-tagged questions.</p> Best-of Machine Learning with Python (\ud83e\udd4722 \u00b7  \u2b50 16K) - A ranked list of awesome machine learning Python libraries. Updated weekly. <code>CC-BY-4.0</code> <code>general-ml</code> <code>Python</code>  - [GitHub](https://github.com/ml-tooling/best-of-ml-python) (\ud83d\udc68\u200d\ud83d\udcbb 47 \u00b7 \ud83d\udd00 2.3K \u00b7 \ud83d\udccb 59 - 42% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/ml-tooling/best-of-ml-python\n</code></pre> Graph-based Deep Learning Literature (\ud83e\udd4719 \u00b7  \u2b50 4.7K) - links to conference publications in graph-based deep learning. <code>MIT</code> <code>general-ml</code> <code>rep-learn</code>  - [GitHub](https://github.com/naganandy/graph-based-deep-learning-literature) (\ud83d\udc68\u200d\ud83d\udcbb 12 \u00b7 \ud83d\udd00 770 \u00b7 \u23f1\ufe0f 09.09.2024):      <pre><code>git clone https://github.com/naganandy/graph-based-deep-learning-literature\n</code></pre> MatBench (\ud83e\udd4718 \u00b7  \u2b50 110 \u00b7 \ud83d\udca4) - Matbench: Benchmarks for materials science property prediction. <code>MIT</code> <code>datasets</code> <code>benchmarking</code> <code>model-repository</code>  - [GitHub](https://github.com/materialsproject/matbench) (\ud83d\udc68\u200d\ud83d\udcbb 25 \u00b7 \ud83d\udd00 45 \u00b7 \ud83d\udce6 16 \u00b7 \ud83d\udccb 65 - 60% open \u00b7 \u23f1\ufe0f 20.01.2024):      <pre><code>git clone https://github.com/materialsproject/matbench\n</code></pre> - [PyPi](https://pypi.org/project/matbench) (\ud83d\udce5 420 / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 27.07.2022):     <pre><code>pip install matbench\n</code></pre> MatBench Discovery (\ud83e\udd4718 \u00b7  \u2b50 92) - An evaluation framework for machine learning models simulating high-throughput materials discovery. <code>MIT</code> <code>datasets</code> <code>benchmarking</code> <code>model-repository</code>  - [GitHub](https://github.com/janosh/matbench-discovery) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 12 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 38 - 10% open \u00b7 \u23f1\ufe0f 23.09.2024):      <pre><code>git clone https://github.com/janosh/matbench-discovery\n</code></pre> - [PyPi](https://pypi.org/project/matbench-discovery) (\ud83d\udce5 1.7K / month \u00b7 \u23f1\ufe0f 11.09.2024):     <pre><code>pip install matbench-discovery\n</code></pre> OpenML (\ud83e\udd4817 \u00b7  \u2b50 660) - Open Machine Learning. <code>BSD-3</code> <code>datasets</code>  - [GitHub](https://github.com/openml/OpenML) (\ud83d\udc68\u200d\ud83d\udcbb 35 \u00b7 \ud83d\udd00 90 \u00b7 \ud83d\udccb 930 - 39% open \u00b7 \u23f1\ufe0f 08.09.2024):      <pre><code>git clone https://github.com/openml/OpenML\n</code></pre> GT4SD - Generative Toolkit for Scientific Discovery (\ud83e\udd4816 \u00b7  \u2b50 330) - Gradio apps of generative models in GT4SD. <code>MIT</code> <code>generative</code> <code>pretrained</code> <code>drug-discovery</code> <code>model-repository</code>  - [GitHub](https://github.com/GT4SD/gt4sd-core) (\ud83d\udc68\u200d\ud83d\udcbb 20 \u00b7 \ud83d\udd00 68 \u00b7 \ud83d\udccb 110 - 12% open \u00b7 \u23f1\ufe0f 12.09.2024):      <pre><code>git clone https://github.com/GT4SD/gt4sd-core\n</code></pre> AI for Science Resources (\ud83e\udd4813 \u00b7  \u2b50 490) - List of resources for AI4Science research, including learning resources. <code>GPL-3.0 license</code>  - [GitHub](https://github.com/divelab/AIRS) (\ud83d\udc68\u200d\ud83d\udcbb 29 \u00b7 \ud83d\udd00 58 \u00b7 \ud83d\udccb 15 - 6% open \u00b7 \u23f1\ufe0f 03.09.2024):      <pre><code>git clone https://github.com/divelab/AIRS\n</code></pre> Neural-Network-Models-for-Chemistry (\ud83e\udd4811 \u00b7  \u2b50 78) - A collection of Nerual Network Models for chemistry. <code>Unlicensed</code> <code>rep-learn</code>  - [GitHub](https://github.com/Eipgen/Neural-Network-Models-for-Chemistry) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 10 \u00b7 \ud83d\udccb 2 - 50% open \u00b7 \u23f1\ufe0f 20.09.2024):      <pre><code>git clone https://github.com/Eipgen/Neural-Network-Models-for-Chemistry\n</code></pre> Awesome Neural Geometry (\ud83e\udd489 \u00b7  \u2b50 910) - A curated collection of resources and research related to the geometry of representations in the brain, deep networks,.. <code>Unlicensed</code> <code>educational</code> <code>rep-learn</code>  - [GitHub](https://github.com/neurreps/awesome-neural-geometry) (\ud83d\udc68\u200d\ud83d\udcbb 12 \u00b7 \ud83d\udd00 57 \u00b7 \u23f1\ufe0f 25.09.2024):      <pre><code>git clone https://github.com/neurreps/awesome-neural-geometry\n</code></pre> GNoME Explorer (\ud83e\udd489 \u00b7  \u2b50 870) - Graph Networks for Materials Exploration Database. <code>Apache-2</code> <code>datasets</code> <code>materials-discovery</code>  - [GitHub](https://github.com/google-deepmind/materials_discovery) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udccb 22 - 81% open \u00b7 \u23f1\ufe0f 04.09.2024):      <pre><code>git clone https://github.com/google-deepmind/materials_discovery\n</code></pre> Awesome Materials Informatics (\ud83e\udd489 \u00b7  \u2b50 370) - Curated list of known efforts in materials informatics, i.e. in modern materials science. <code>Custom</code>  - [GitHub](https://github.com/tilde-lab/awesome-materials-informatics) (\ud83d\udc68\u200d\ud83d\udcbb 19 \u00b7 \ud83d\udd00 81 \u00b7 \u23f1\ufe0f 18.09.2024):      <pre><code>git clone https://github.com/tilde-lab/awesome-materials-informatics\n</code></pre> MoLFormers UI (\ud83e\udd489 \u00b7  \u2b50 250 \u00b7 \ud83d\udca4) - A family of foundation models trained on chemicals. <code>Apache-2</code> <code>transformer</code> <code>language-models</code> <code>pretrained</code> <code>drug-discovery</code>  - [GitHub](https://github.com/IBM/molformer) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 41 \u00b7 \ud83d\udccb 19 - 47% open \u00b7 \u23f1\ufe0f 16.10.2023):      <pre><code>git clone https://github.com/IBM/molformer\n</code></pre> AI for Science paper collection (\ud83e\udd489 \u00b7  \u2b50 56 \u00b7 \ud83d\udc23) - List the AI for Science papers accepted by top conferences. <code>Apache-2</code>  - [GitHub](https://github.com/sherrylixuecheng/AI_for_Science_paper_collection) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 6 \u00b7 \u23f1\ufe0f 14.09.2024):      <pre><code>git clone https://github.com/sherrylixuecheng/AI_for_Science_paper_collection\n</code></pre> optimade.science (\ud83e\udd498 \u00b7  \u2b50 8) - A sky-scanner Optimade browser-only GUI. <code>MIT</code> <code>datasets</code>  - [GitHub](https://github.com/tilde-lab/optimade.science) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 2 \u00b7 \ud83d\udccb 26 - 26% open \u00b7 \u23f1\ufe0f 10.06.2024):      <pre><code>git clone https://github.com/tilde-lab/optimade.science\n</code></pre> Awesome-Graph-Generation (\ud83e\udd497 \u00b7  \u2b50 270) - A curated list of up-to-date graph generation papers and resources. <code>Unlicensed</code> <code>rep-learn</code>  - [GitHub](https://github.com/yuanqidu/awesome-graph-generation) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 17 \u00b7 \u23f1\ufe0f 17.03.2024):      <pre><code>git clone https://github.com/yuanqidu/awesome-graph-generation\n</code></pre> Awesome Neural SBI (\ud83e\udd497 \u00b7  \u2b50 84) - Community-sourced list of papers and resources on neural simulation-based inference. <code>MIT</code> <code>active-learning</code>  - [GitHub](https://github.com/smsharma/awesome-neural-sbi) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 6 \u00b7 \ud83d\udccb 2 - 50% open \u00b7 \u23f1\ufe0f 17.06.2024):      <pre><code>git clone https://github.com/smsharma/awesome-neural-sbi\n</code></pre> Awesome-Crystal-GNNs (\ud83e\udd497 \u00b7  \u2b50 60) - This repository contains a collection of resources and papers on GNN Models on Crystal Solid State Materials. <code>MIT</code>  - [GitHub](https://github.com/kdmsit/Awesome-Crystal-GNNs) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 8 \u00b7 \u23f1\ufe0f 16.06.2024):      <pre><code>git clone https://github.com/kdmsit/Awesome-Crystal-GNNs\n</code></pre> The Collection of Database and Dataset Resources in Materials Science (\ud83e\udd496 \u00b7  \u2b50 260) - A list of databases, datasets and books/handbooks where you can find materials properties for machine learning.. <code>Unlicensed</code> <code>datasets</code>  - [GitHub](https://github.com/sedaoturak/data-resources-for-materials-science) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 42 \u00b7 \ud83d\udccb 2 - 50% open \u00b7 \u23f1\ufe0f 07.06.2024):      <pre><code>git clone https://github.com/sedaoturak/data-resources-for-materials-science\n</code></pre> Does this material exist? (\ud83e\udd495 \u00b7  \u2b50 15) - Vote on whether you think predicted crystal structures could be synthesised. <code>MIT</code> <code>for-fun</code> <code>materials-discovery</code>  - [GitHub](https://github.com/ml-evs/this-material-does-not-exist) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 3 \u00b7 \u23f1\ufe0f 10.04.2024):      <pre><code>git clone https://github.com/ml-evs/this-material-does-not-exist\n</code></pre> Show 5 hidden projects...  - MADICES Awesome Interoperability (\ud83e\udd498 \u00b7  \u2b50 1) - Linked data interoperability resources of the Machine-actionable data interoperability for the chemical sciences.. <code>MIT</code> <code>datasets</code> - A Highly Opinionated List of Open-Source Materials Informatics Resources (\ud83e\udd497 \u00b7  \u2b50 120 \u00b7 \ud83d\udc80) - A Highly Opinionated List of Open Source Materials Informatics Resources. <code>MIT</code> - Geometric-GNNs (\ud83e\udd494 \u00b7  \u2b50 92 \u00b7 \ud83d\udca4) - List of Geometric GNNs for 3D atomic systems. <code>Unlicensed</code> <code>datasets</code> <code>educational</code> <code>rep-learn</code> - GitHub topic materials-informatics (\ud83e\udd491) - GitHub topic materials-informatics. <code>Unlicensed</code> - MateriApps (\ud83e\udd491) - A Portal Site of Materials Science Simulation. <code>Unlicensed</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#datasets","title":"Datasets","text":"<p>Datasets, databases and trained models for atomistic ML.</p> <p>\ud83d\udd17\u00a0Alexandria Materials Database  - A database of millions of theoretical crystal structures (3D, 2D and 1D) discovered by machine learning accelerated..</p> <p>\ud83d\udd17\u00a0Catalysis Hub  - A web-platform for sharing data and software for computational catalysis research!.</p> <p>\ud83d\udd17\u00a0Citrination Datasets  - AI-Powered Materials Data Platform. Open Citrination has been decommissioned.</p> <p>\ud83d\udd17\u00a0crystals.ai  - Curated datasets for reproducible AI in materials science.</p> <p>\ud83d\udd17\u00a0DeepChem Models  - DeepChem models on HuggingFace. <code>model-repository</code> <code>pretrained</code> <code>language-models</code></p> <p>\ud83d\udd17\u00a0Graphs of Materials Project 20190401  - The dataset used to train the MEGNet interatomic potential. <code>ML-IAP</code></p> <p>\ud83d\udd17\u00a0HME21 Dataset  - High-temperature multi-element 2021 dataset for the PreFerred Potential (PFP).. <code>UIP</code></p> <p>\ud83d\udd17\u00a0JARVIS-Leaderboard ( \u2b50 58)  - Explore State-of-the-Art Materials Design Methods: https://www.nature.com/articles/s41524-024-01259-w. <code>model-repository</code> <code>benchmarking</code> <code>community-resource</code> <code>educational</code></p> <p>\ud83d\udd17\u00a0Materials Project - Charge Densities  - Materials Project has started offering charge density information available for download via their public API.</p> <p>\ud83d\udd17\u00a0Materials Project Trajectory (MPtrj) Dataset  - The dataset used to train the CHGNet universal potential. <code>UIP</code></p> <p>\ud83d\udd17\u00a0matterverse.ai  - Database of yet-to-be-sythesized materials predicted using state-of-the-art machine learning algorithms.</p> <p>\ud83d\udd17\u00a0MPF.2021.2.8  - The dataset used to train the M3GNet universal potential. <code>UIP</code></p> <p>\ud83d\udd17\u00a0NRELMatDB  - Computational materials database with the specific focus on materials for renewable energy applications including, but..</p> <p>\ud83d\udd17\u00a0Quantum-Machine.org Datasets  - Collection of datasets, including QM7, QM9, etc. MD, DFT. Small organic molecules, mostly.</p> <p>\ud83d\udd17\u00a0sGDML Datasets  - MD17, MD22, DFT datasets.</p> <p>\ud83d\udd17\u00a0MoleculeNet  - A Benchmark for Molecular Machine Learning. <code>benchmarking</code></p> <p>\ud83d\udd17\u00a0ZINC15  - A free database of commercially-available compounds for virtual screening. ZINC contains over 230 million purchasable.. <code>graph</code> <code>biomolecules</code></p> <p>\ud83d\udd17\u00a0ZINC20  - A free database of commercially-available compounds for virtual screening. ZINC contains over 230 million purchasable.. <code>graph</code> <code>biomolecules</code></p> OPTIMADE Python tools (\ud83e\udd4727 \u00b7  \u2b50 68) - Tools for implementing and consuming OPTIMADE APIs in Python. <code>MIT</code>  - [GitHub](https://github.com/Materials-Consortia/optimade-python-tools) (\ud83d\udc68\u200d\ud83d\udcbb 28 \u00b7 \ud83d\udd00 42 \u00b7 \ud83d\udce6 60 \u00b7 \ud83d\udccb 450 - 23% open \u00b7 \u23f1\ufe0f 23.09.2024):      <pre><code>git clone https://github.com/Materials-Consortia/optimade-python-tools\n</code></pre> - [PyPi](https://pypi.org/project/optimade) (\ud83d\udce5 8K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 16.09.2024):     <pre><code>pip install optimade\n</code></pre> - [Conda](https://anaconda.org/conda-forge/optimade) (\ud83d\udce5 91K \u00b7 \u23f1\ufe0f 16.09.2024):     <pre><code>conda install -c conda-forge optimade\n</code></pre> MPContribs (\ud83e\udd4723 \u00b7  \u2b50 35) - Platform for materials scientists to contribute and disseminate their materials data through Materials Project. <code>MIT</code>  - [GitHub](https://github.com/materialsproject/MPContribs) (\ud83d\udc68\u200d\ud83d\udcbb 25 \u00b7 \ud83d\udd00 20 \u00b7 \ud83d\udce6 39 \u00b7 \ud83d\udccb 99 - 21% open \u00b7 \u23f1\ufe0f 25.09.2024):      <pre><code>git clone https://github.com/materialsproject/MPContribs\n</code></pre> - [PyPi](https://pypi.org/project/mpcontribs-client) (\ud83d\udce5 2.6K / month \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 20.06.2024):     <pre><code>pip install mpcontribs-client\n</code></pre> FAIR Chemistry datasets (\ud83e\udd4721 \u00b7  \u2b50 770) - Datasets OC20, OC22, etc. Formerly known as Open Catalyst Project. <code>MIT</code> <code>catalysis</code>  - [GitHub](https://github.com/FAIR-Chem/fairchem) (\ud83d\udc68\u200d\ud83d\udcbb 42 \u00b7 \ud83d\udd00 230 \u00b7 \ud83d\udccb 200 - 6% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/FAIR-Chem/fairchem\n</code></pre> Open Databases Integration for Materials Design (OPTIMADE) (\ud83e\udd4818 \u00b7  \u2b50 82) - Specification of a common REST API for access to materials databases. <code>CC-BY-4.0</code>  - [GitHub](https://github.com/Materials-Consortia/OPTIMADE) (\ud83d\udc68\u200d\ud83d\udcbb 21 \u00b7 \ud83d\udd00 35 \u00b7 \ud83d\udccb 240 - 28% open \u00b7 \u23f1\ufe0f 12.06.2024):      <pre><code>git clone https://github.com/Materials-Consortia/OPTIMADE\n</code></pre> load-atoms (\ud83e\udd4815 \u00b7  \u2b50 38) - download and manipulate atomistic datasets. <code>MIT</code> <code>data-structures</code>  - [GitHub](https://github.com/jla-gardner/load-atoms) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 2 \u00b7 \ud83d\udce6 3 \u00b7 \ud83d\udccb 31 - 3% open \u00b7 \u23f1\ufe0f 16.09.2024):      <pre><code>git clone https://github.com/jla-gardner/load-atoms\n</code></pre> - [PyPi](https://pypi.org/project/load-atoms) (\ud83d\udce5 760 / month \u00b7 \u23f1\ufe0f 16.09.2024):     <pre><code>pip install load-atoms\n</code></pre> QH9 (\ud83e\udd4813 \u00b7  \u2b50 490) - A Quantum Hamiltonian Prediction Benchmark. <code>CC-BY-NC-SA-4.0</code> <code>ML-DFT</code>  - [GitHub](https://github.com/divelab/AIRS) (\ud83d\udc68\u200d\ud83d\udcbb 29 \u00b7 \ud83d\udd00 58 \u00b7 \ud83d\udccb 15 - 6% open \u00b7 \u23f1\ufe0f 03.09.2024):      <pre><code>git clone https://github.com/divelab/AIRS\n</code></pre> SPICE (\ud83e\udd4811 \u00b7  \u2b50 150) - A collection of QM data for training potential functions. <code>MIT</code> <code>ML-IAP</code> <code>MD</code>  - [GitHub](https://github.com/openmm/spice-dataset) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 9 \u00b7 \ud83d\udce5 250 \u00b7 \ud83d\udccb 63 - 25% open \u00b7 \u23f1\ufe0f 19.08.2024):      <pre><code>git clone https://github.com/openmm/spice-dataset\n</code></pre> Materials Data Facility (MDF) (\ud83e\udd489 \u00b7  \u2b50 10 \u00b7 \ud83d\udca4) - A simple way to publish, discover, and access materials datasets. Publication of very large datasets supported (e.g.,.. <code>Apache-2</code>  - [GitHub](https://github.com/materials-data-facility/connect_client) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 1 \u00b7 \ud83d\udccb 7 - 14% open \u00b7 \u23f1\ufe0f 05.02.2024):      <pre><code>git clone https://github.com/materials-data-facility/connect_client\n</code></pre> 2DMD dataset (\ud83e\udd489 \u00b7  \u2b50 6 \u00b7 \ud83d\udca4) - Code for Kazeev, N., Al-Maeeni, A.R., Romanov, I. et al. Sparse representation for machine learning the properties of.. <code>Apache-2</code> <code>material-defect</code>  - [GitHub](https://github.com/HSE-LAMBDA/ai4material_design) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 3 \u00b7 \u23f1\ufe0f 21.11.2023):      <pre><code>git clone https://github.com/HSE-LAMBDA/ai4material_design\n</code></pre> AIS Square (\ud83e\udd497 \u00b7  \u2b50 10 \u00b7 \ud83d\udca4) - A collaborative and open-source platform for sharing AI for Science datasets, models, and workflows. Home of the.. <code>LGPL-3.0</code> <code>community-resource</code> <code>model-repository</code>  - [GitHub](https://github.com/deepmodeling/AIS-Square) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 8 \u00b7 \ud83d\udccb 6 - 83% open \u00b7 \u23f1\ufe0f 06.12.2023):      <pre><code>git clone https://github.com/deepmodeling/AIS-Square\n</code></pre> The Perovskite Database Project (\ud83e\udd495 \u00b7  \u2b50 58) - Perovskite Database Project aims at making all perovskite device data, both past and future, available in a form.. <code>Unlicensed</code> <code>community-resource</code>  - [GitHub](https://github.com/Jesperkemist/perovskitedatabase) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 18 \u00b7 \u23f1\ufe0f 07.03.2024):      <pre><code>git clone https://github.com/Jesperkemist/perovskitedatabase\n</code></pre> 3DSC Database (\ud83e\udd495 \u00b7  \u2b50 15 \u00b7 \ud83d\udca4) - Repo for the paper publishing the superconductor database with 3D crystal structures. <code>Custom</code> <code>superconductors</code> <code>materials-discovery</code>  - [GitHub](https://github.com/aimat-lab/3DSC) (\ud83d\udd00 4 \u00b7 \u23f1\ufe0f 08.01.2024):      <pre><code>git clone https://github.com/aimat-lab/3DSC\n</code></pre> Show 15 hidden projects...  - ATOM3D (\ud83e\udd4818 \u00b7  \u2b50 300 \u00b7 \ud83d\udc80) - ATOM3D: tasks on molecules in three dimensions. <code>MIT</code> <code>biomolecules</code> <code>benchmarking</code> - OpenKIM (\ud83e\udd4810 \u00b7  \u2b50 31 \u00b7 \ud83d\udc80) - The Open Knowledgebase of Interatomic Models (OpenKIM) aims to be an online resource for standardized testing, long-.. <code>LGPL-2.1</code> <code>model-repository</code> <code>knowledge-base</code> <code>pretrained</code> - ANI-1 Dataset (\ud83e\udd498 \u00b7  \u2b50 96 \u00b7 \ud83d\udc80) - A data set of 20 million calculated off-equilibrium conformations for organic molecules. <code>MIT</code> - MoleculeNet Leaderboard (\ud83e\udd498 \u00b7  \u2b50 88 \u00b7 \ud83d\udc80) -  <code>MIT</code> <code>benchmarking</code> - GEOM (\ud83e\udd497 \u00b7  \u2b50 200 \u00b7 \ud83d\udc80) - GEOM: Energy-annotated molecular conformations. <code>Unlicensed</code> <code>drug-discovery</code> - ANI-1x Datasets (\ud83e\udd496 \u00b7  \u2b50 55 \u00b7 \ud83d\udc80) - The ANI-1ccx and ANI-1x data sets, coupled-cluster and density functional theory properties for organic molecules. <code>MIT</code> - COMP6 Benchmark dataset (\ud83e\udd496 \u00b7  \u2b50 39 \u00b7 \ud83d\udc80) - COMP6 Benchmark dataset for ML potentials. <code>MIT</code> - SciGlass (\ud83e\udd495 \u00b7  \u2b50 10 \u00b7 \ud83d\udc80) - The database contains a vast set of data on the properties of glass materials. <code>MIT</code> - GDB-9-Ex9 and ORNL_AISD-Ex (\ud83e\udd495 \u00b7  \u2b50 6 \u00b7 \ud83d\udc80) - Distributed computing workflow for generation and analysis of large scale molecular datasets obtained running multi-.. <code>Unlicensed</code> - linear-regression-benchmarks (\ud83e\udd495 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Data sets used for linear regression benchmarks. <code>MIT</code> <code>benchmarking</code> <code>single-paper</code> - paper-data-redundancy (\ud83e\udd494 \u00b7  \u2b50 8) - Repo for the paper Exploiting redundancy in large materials datasets for efficient machine learning with less data. <code>BSD-3</code> <code>small-data</code> <code>single-paper</code> - Visual Graph Datasets (\ud83e\udd494 \u00b7  \u2b50 2) - Datasets for the training of graph neural networks (GNNs) and subsequent visualization of attributional explanations.. <code>MIT</code> <code>XAI</code> <code>rep-learn</code> - OPTIMADE providers dashboard (\ud83e\udd494 \u00b7  \u2b50 1) - A dashboard of known providers. <code>Unlicensed</code> - nep-data (\ud83e\udd492 \u00b7  \u2b50 12 \u00b7 \ud83d\udc80) - Data related to the NEP machine-learned potential of GPUMD. <code>Unlicensed</code> <code>ML-IAP</code> <code>MD</code> <code>transport-phenomena</code> - tmQM_wB97MV Dataset (\ud83e\udd492 \u00b7  \u2b50 6) - Code for Applying Large Graph Neural Networks to Predict Transition Metal Complex Energies Using the tmQM_wB97MV.. <code>Unlicensed</code> <code>catalysis</code> <code>rep-learn</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#data-structures","title":"Data Structures","text":"<p>Projects that focus on providing data structures used in atomistic machine learning.</p> dpdata (\ud83e\udd4724 \u00b7  \u2b50 200) - A Python package for manipulating atomistic data of software in computational science. <code>LGPL-3.0</code>  - [GitHub](https://github.com/deepmodeling/dpdata) (\ud83d\udc68\u200d\ud83d\udcbb 61 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce6 120 \u00b7 \ud83d\udccb 120 - 28% open \u00b7 \u23f1\ufe0f 20.09.2024):      <pre><code>git clone https://github.com/deepmodeling/dpdata\n</code></pre> - [PyPi](https://pypi.org/project/dpdata) (\ud83d\udce5 44K / month \u00b7 \ud83d\udce6 40 \u00b7 \u23f1\ufe0f 20.09.2024):     <pre><code>pip install dpdata\n</code></pre> - [Conda](https://anaconda.org/deepmodeling/dpdata) (\ud83d\udce5 230 \u00b7 \u23f1\ufe0f 27.09.2023):     <pre><code>conda install -c deepmodeling dpdata\n</code></pre> Metatensor (\ud83e\udd4821 \u00b7  \u2b50 51) - Self-describing sparse tensor data format for atomistic machine learning and beyond. <code>BSD-3</code> <code>Rust</code> <code>C-lang</code> <code>C++</code> <code>Python</code>  - [GitHub](https://github.com/metatensor/metatensor) (\ud83d\udc68\u200d\ud83d\udcbb 22 \u00b7 \ud83d\udd00 15 \u00b7 \ud83d\udce5 27K \u00b7 \ud83d\udce6 11 \u00b7 \ud83d\udccb 210 - 34% open \u00b7 \u23f1\ufe0f 25.09.2024):      <pre><code>git clone https://github.com/lab-cosmo/metatensor\n</code></pre> mp-pyrho (\ud83e\udd4917 \u00b7  \u2b50 36 \u00b7 \ud83d\udca4) - Tools for re-griding volumetric quantum chemistry data for machine-learning purposes. <code>Custom</code> <code>ML-DFT</code>  - [GitHub](https://github.com/materialsproject/pyrho) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 7 \u00b7 \ud83d\udce6 24 \u00b7 \ud83d\udccb 4 - 25% open \u00b7 \u23f1\ufe0f 23.02.2024):      <pre><code>git clone https://github.com/materialsproject/pyrho\n</code></pre> - [PyPi](https://pypi.org/project/mp-pyrho) (\ud83d\udce5 14K / month \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 23.02.2024):     <pre><code>pip install mp-pyrho\n</code></pre> dlpack (\ud83e\udd4916 \u00b7  \u2b50 890) - common in-memory tensor structure. <code>Apache-2</code> <code>C++</code>  - [GitHub](https://github.com/dmlc/dlpack) (\ud83d\udc68\u200d\ud83d\udcbb 23 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udccb 71 - 40% open \u00b7 \u23f1\ufe0f 26.03.2024):      <pre><code>git clone https://github.com/dmlc/dlpack\n</code></pre> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#density-functional-theory-ml-dft","title":"Density functional theory (ML-DFT)","text":"<p>Projects and models that focus on quantities of DFT, such as density functional approximations (ML-DFA), the charge density, density of states, the Hamiltonian, etc.</p> <p>\ud83d\udd17\u00a0IKS-PIML  - Code and generated data for the paper Inverting the Kohn-Sham equations with physics-informed machine learning.. <code>neural-operator</code> <code>pinn</code> <code>datasets</code> <code>single-paper</code></p> JAX-DFT (\ud83e\udd4725 \u00b7  \u2b50 34K) - This library provides basic building blocks that can construct DFT calculations as a differentiable program. <code>Apache-2</code>  - [GitHub](https://github.com/google-research/google-research) (\ud83d\udc68\u200d\ud83d\udcbb 800 \u00b7 \ud83d\udd00 7.8K \u00b7 \ud83d\udccb 1.8K - 81% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/google-research/google-research\n</code></pre> MALA (\ud83e\udd4717 \u00b7  \u2b50 81 \u00b7 \ud83d\udcc9) - Materials Learning Algorithms. A framework for machine learning materials properties from first-principles data. <code>BSD-3</code>  - [GitHub](https://github.com/mala-project/mala) (\ud83d\udc68\u200d\ud83d\udcbb 44 \u00b7 \ud83d\udd00 23 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 270 - 15% open \u00b7 \u23f1\ufe0f 04.07.2024):      <pre><code>git clone https://github.com/mala-project/mala\n</code></pre> QHNet (\ud83e\udd4713 \u00b7  \u2b50 490) - Artificial Intelligence Research for Science (AIRS). <code>GPL-3.0</code> <code>rep-learn</code>  - [GitHub](https://github.com/divelab/AIRS) (\ud83d\udc68\u200d\ud83d\udcbb 29 \u00b7 \ud83d\udd00 58 \u00b7 \ud83d\udccb 15 - 6% open \u00b7 \u23f1\ufe0f 03.09.2024):      <pre><code>git clone https://github.com/divelab/AIRS\n</code></pre> SALTED (\ud83e\udd4713 \u00b7  \u2b50 30) - Symmetry-Adapted Learning of Three-dimensional Electron Densities. <code>GPL-3.0</code>  - [GitHub](https://github.com/andreagrisafi/SALTED) (\ud83d\udc68\u200d\ud83d\udcbb 17 \u00b7 \ud83d\udd00 4 \u00b7 \ud83d\udccb 6 - 16% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/andreagrisafi/SALTED\n</code></pre> DeepH-pack (\ud83e\udd4812 \u00b7  \u2b50 220) - Deep neural networks for density functional theory Hamiltonian. <code>LGPL-3.0</code> <code>Julia</code>  - [GitHub](https://github.com/mzjb/DeepH-pack) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 44 \u00b7 \ud83d\udccb 51 - 25% open \u00b7 \u23f1\ufe0f 22.05.2024):      <pre><code>git clone https://github.com/mzjb/DeepH-pack\n</code></pre> DeePKS-kit (\ud83e\udd4810 \u00b7  \u2b50 99) - a package for developing machine learning-based chemically accurate energy and density functional models. <code>LGPL-3.0</code>  - [GitHub](https://github.com/deepmodeling/deepks-kit) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 35 \u00b7 \ud83d\udccb 19 - 26% open \u00b7 \u23f1\ufe0f 13.04.2024):      <pre><code>git clone https://github.com/deepmodeling/deepks-kit\n</code></pre> Grad DFT (\ud83e\udd4810 \u00b7  \u2b50 73 \u00b7 \ud83d\udca4) - GradDFT is a JAX-based library enabling the differentiable design and experimentation of exchange-correlation.. <code>Apache-2</code>  - [GitHub](https://github.com/XanaduAI/GradDFT) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 6 \u00b7 \ud83d\udccb 54 - 20% open \u00b7 \u23f1\ufe0f 13.02.2024):      <pre><code>git clone https://github.com/XanaduAI/GradDFT\n</code></pre> HamGNN (\ud83e\udd488 \u00b7  \u2b50 55) - An E(3) equivariant Graph Neural Network for predicting electronic Hamiltonian matrix. <code>GPL-3.0</code> <code>rep-learn</code> <code>magnetism</code> <code>C-lang</code>  - [GitHub](https://github.com/QuantumLab-ZY/HamGNN) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 15 \u00b7 \ud83d\udccb 29 - 79% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/QuantumLab-ZY/HamGNN\n</code></pre> Q-stack (\ud83e\udd488 \u00b7  \u2b50 14) - Stack of codes for dedicated pre- and post-processing tasks for Quantum Machine Learning (QML). <code>MIT</code> <code>excited-states</code> <code>general-tool</code>  - [GitHub](https://github.com/lcmd-epfl/Q-stack) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 5 \u00b7 \ud83d\udccb 29 - 31% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/lcmd-epfl/Q-stack\n</code></pre> ChargE3Net (\ud83e\udd497 \u00b7  \u2b50 29) - Higher-order equivariant neural networks for charge density prediction in materials. <code>MIT</code> <code>rep-learn</code>  - [GitHub](https://github.com/AIforGreatGood/charge3net) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 8 \u00b7 \ud83d\udccb 5 - 40% open \u00b7 \u23f1\ufe0f 15.08.2024):      <pre><code>git clone https://github.com/AIforGreatGood/charge3net\n</code></pre> InfGCN for Electron Density Estimation (\ud83e\udd495 \u00b7  \u2b50 11 \u00b7 \ud83d\udca4) - Official implementation of the NeurIPS 23 spotlight paper of InfGCN. <code>MIT</code> <code>rep-learn</code> <code>neural-operator</code>  - [GitHub](https://github.com/ccr-cheng/InfGCN-pytorch) (\ud83d\udd00 3 \u00b7 \u23f1\ufe0f 05.12.2023):      <pre><code>git clone https://github.com/ccr-cheng/infgcn-pytorch\n</code></pre> Show 21 hidden projects...  - DM21 (\ud83e\udd4720 \u00b7  \u2b50 13K \u00b7 \ud83d\udc80) - This package provides a PySCF interface to the DM21 (DeepMind 21) family of exchange-correlation functionals described.. <code>Apache-2</code> - NeuralXC (\ud83e\udd4810 \u00b7  \u2b50 33 \u00b7 \ud83d\udc80) - Implementation of a machine learned density functional. <code>BSD-3</code> - PROPhet (\ud83e\udd489 \u00b7  \u2b50 62 \u00b7 \ud83d\udc80) - PROPhet is a code to integrate machine learning techniques with first-principles quantum chemistry approaches. <code>GPL-3.0</code> <code>ML-IAP</code> <code>MD</code> <code>single-paper</code> <code>C++</code> - ACEhamiltonians (\ud83e\udd489 \u00b7  \u2b50 12 \u00b7 \ud83d\udc80) - Provides tools for constructing, fitting, and predicting self-consistent Hamiltonian and overlap matrices in solid-.. <code>MIT</code> <code>Julia</code> - Mat2Spec (\ud83e\udd497 \u00b7  \u2b50 27 \u00b7 \ud83d\udc80) - Density of States Prediction for Materials Discovery via Contrastive Learning from Probabilistic Embeddings. <code>MIT</code> <code>spectroscopy</code> - Libnxc (\ud83e\udd497 \u00b7  \u2b50 16 \u00b7 \ud83d\udc80) - A library for using machine-learned exchange-correlation functionals for density-functional theory. <code>MPL-2.0</code> <code>C++</code> <code>Fortran</code> - DeepH-E3 (\ud83e\udd496 \u00b7  \u2b50 70 \u00b7 \ud83d\udc80) - General framework for E(3)-equivariant neural network representation of density functional theory Hamiltonian. <code>MIT</code> <code>magnetism</code> - DeepDFT (\ud83e\udd496 \u00b7  \u2b50 57 \u00b7 \ud83d\udc80) - Official implementation of DeepDFT model. <code>MIT</code> - rho_learn (\ud83e\udd496 \u00b7  \u2b50 4) - A proof-of-concept framework for torch-based learning of the electron density and related scalar fields. <code>MIT</code> - KSR-DFT (\ud83e\udd496 \u00b7  \u2b50 4 \u00b7 \ud83d\udc80) - Kohn-Sham regularizer for machine-learned DFT functionals. <code>Apache-2</code> - xDeepH (\ud83e\udd495 \u00b7  \u2b50 32 \u00b7 \ud83d\udc80) - Extended DeepH (xDeepH) method for magnetic materials. <code>LGPL-3.0</code> <code>magnetism</code> <code>Julia</code> - ML-DFT (\ud83e\udd495 \u00b7  \u2b50 23 \u00b7 \ud83d\udc80) - A package for density functional approximation using machine learning. <code>MIT</code> - charge-density-models (\ud83e\udd494 \u00b7  \u2b50 10 \u00b7 \ud83d\udca4) - Tools to build charge density models using [fairchem](https://github.com/FAIR-Chem/fairchem). <code>MIT</code> <code>rep-learn</code> - gprep (\ud83e\udd494 \u00b7 \ud83d\udc80) - Fitting DFTB repulsive potentials with GPR. <code>MIT</code> <code>single-paper</code> - DeepCDP (\ud83e\udd493 \u00b7  \u2b50 6 \u00b7 \ud83d\udc80) - DeepCDP: Deep learning Charge Density Prediction. <code>Unlicensed</code> - APET (\ud83e\udd493 \u00b7  \u2b50 4 \u00b7 \ud83d\udca4) - Atomic Positional Embedding-based Transformer. <code>GPL-3.0</code> <code>density-of-states</code> <code>transformer</code> - CSNN (\ud83e\udd493 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Primary codebase of CSNN - Concentric Spherical Neural Network for 3D Representation Learning. <code>BSD-3</code> - MALADA (\ud83e\udd493 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - MALA Data Acquisition: Helpful tools to build data for MALA. <code>BSD-3</code> - A3MD (\ud83e\udd492 \u00b7  \u2b50 8 \u00b7 \ud83d\udc80) - MPNN-like + Analytic Density Model = Accurate electron densities. <code>Unlicensed</code> <code>rep-learn</code> <code>single-paper</code> - kdft (\ud83e\udd491 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - The Kernel Density Functional (KDF) code allows generating ML based DFT functionals. <code>Unlicensed</code> - MLDensity ( \u2b50 2 \u00b7 \ud83d\udc80) - Linear Jacobi-Legendre expansion of the charge density for machine learning-accelerated electronic structure.. <code>Unlicensed</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#educational-resources","title":"Educational Resources","text":"<p>Tutorials, guides, cookbooks, recipes, etc.</p> <p>\ud83d\udd17\u00a0AI for Science 101 <code>community-resource</code> <code>rep-learn</code></p> <p>\ud83d\udd17\u00a0AL4MS 2023 workshop tutorials <code>active-learning</code></p> <p>\ud83d\udd17\u00a0Quantum Chemistry in the Age of Machine Learning  - Book, 2022.</p> jarvis-tools-notebooks (\ud83e\udd4712 \u00b7  \u2b50 62) - A Google-Colab Notebook Collection for Materials Design: https://jarvis.nist.gov/. <code>NIST</code>  - [GitHub](https://github.com/JARVIS-Materials-Design/jarvis-tools-notebooks) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 26 \u00b7 \u23f1\ufe0f 14.08.2024):      <pre><code>git clone https://github.com/JARVIS-Materials-Design/jarvis-tools-notebooks\n</code></pre> AI4Chemistry course (\ud83e\udd4810 \u00b7  \u2b50 130) - EPFL AI for chemistry course, Spring 2023. https://schwallergroup.github.io/ai4chem_course. <code>MIT</code> <code>chemistry</code>  - [GitHub](https://github.com/schwallergroup/ai4chem_course) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 31 \u00b7 \ud83d\udccb 4 - 25% open \u00b7 \u23f1\ufe0f 02.05.2024):      <pre><code>git clone https://github.com/schwallergroup/ai4chem_course\n</code></pre> DSECOP (\ud83e\udd489 \u00b7  \u2b50 43) - This repository contains data science educational materials developed by DSECOP Fellows. <code>CCO-1.0</code>  - [GitHub](https://github.com/GDS-Education-Community-of-Practice/DSECOP) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 25 \u00b7 \ud83d\udccb 8 - 12% open \u00b7 \u23f1\ufe0f 26.06.2024):      <pre><code>git clone https://github.com/GDS-Education-Community-of-Practice/DSECOP\n</code></pre> iam-notebooks (\ud83e\udd489 \u00b7  \u2b50 26) - Jupyter notebooks for the lectures of the Introduction to Atomistic Modeling. <code>Apache-2</code>  - [GitHub](https://github.com/ceriottm/iam-notebooks) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 5 \u00b7 \u23f1\ufe0f 26.06.2024):      <pre><code>git clone https://github.com/ceriottm/iam-notebooks\n</code></pre> OPTIMADE Tutorial Exercises (\ud83e\udd489 \u00b7  \u2b50 14 \u00b7 \ud83d\udca4) - Tutorial exercises for the OPTIMADE API. <code>MIT</code> <code>datasets</code>  - [GitHub](https://github.com/Materials-Consortia/optimade-tutorial-exercises) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 7 \u00b7 \u23f1\ufe0f 27.09.2023):      <pre><code>git clone https://github.com/Materials-Consortia/optimade-tutorial-exercises\n</code></pre> BestPractices (\ud83e\udd488 \u00b7  \u2b50 170 \u00b7 \ud83d\udca4) - Things that you should (and should not) do in your Materials Informatics research. <code>MIT</code>  - [GitHub](https://github.com/anthony-wang/BestPractices) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 70 \u00b7 \ud83d\udccb 7 - 71% open \u00b7 \u23f1\ufe0f 17.11.2023):      <pre><code>git clone https://github.com/anthony-wang/BestPractices\n</code></pre> COSMO Software Cookbook (\ud83e\udd488 \u00b7  \u2b50 16) - A cookbook wtih recipes for atomic-scale modeling of materials and molecules. <code>BSD-3</code>  - [GitHub](https://github.com/lab-cosmo/atomistic-cookbook) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 1 \u00b7 \ud83d\udccb 12 - 16% open \u00b7 \u23f1\ufe0f 23.09.2024):      <pre><code>git clone https://github.com/lab-cosmo/software-cookbook\n</code></pre> MACE-tutorials (\ud83e\udd496 \u00b7  \u2b50 38) - Another set of tutorials for the MACE interatomic potential by one of the authors. <code>MIT</code> <code>ML-IAP</code> <code>rep-learn</code> <code>MD</code>  - [GitHub](https://github.com/ilyes319/mace-tutorials) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 10 \u00b7 \u23f1\ufe0f 16.07.2024):      <pre><code>git clone https://github.com/ilyes319/mace-tutorials\n</code></pre> Show 17 hidden projects...  - Geometric GNN Dojo (\ud83e\udd4712 \u00b7  \u2b50 460 \u00b7 \ud83d\udc80) - New to geometric GNNs: try our practical notebook, prepared for MPhil students at the University of Cambridge. <code>MIT</code> <code>rep-learn</code> - DeepLearningLifeSciences (\ud83e\udd4712 \u00b7  \u2b50 350 \u00b7 \ud83d\udc80) - Example code from the book Deep Learning for the Life Sciences. <code>MIT</code> - Deep Learning for Molecules and Materials Book (\ud83e\udd4811 \u00b7  \u2b50 610 \u00b7 \ud83d\udc80) - Deep learning for molecules and materials book. <code>Custom</code> - RDKit Tutorials (\ud83e\udd488 \u00b7  \u2b50 260 \u00b7 \ud83d\udc80) - Tutorials to learn how to work with the RDKit. <code>Custom</code> - MAChINE (\ud83e\udd497 \u00b7  \u2b50 1 \u00b7 \ud83d\udca4) - Client-Server Web App to introduce usage of ML in materials science to beginners. <code>MIT</code> - Applied AI for Materials (\ud83e\udd496 \u00b7  \u2b50 58 \u00b7 \ud83d\udc80) - Course materials for Applied AI for Materials Science and Engineering. <code>Unlicensed</code> - ML for catalysis tutorials (\ud83e\udd496 \u00b7  \u2b50 8 \u00b7 \ud83d\udc80) - A jupyter book repo for tutorial on how to use OCP ML models for catalysis. <code>MIT</code> - AI4Science101 (\ud83e\udd495 \u00b7  \u2b50 83 \u00b7 \ud83d\udc80) - AI for Science. <code>Unlicensed</code> - Machine Learning for Materials Hard and Soft (\ud83e\udd495 \u00b7  \u2b50 34 \u00b7 \ud83d\udc80) - ESI-DCAFM-TACO-VDSP Summer School on Machine Learning for Materials Hard and Soft. <code>Unlicensed</code> - Data Handling, DoE and Statistical Analysis for Material Chemists (\ud83e\udd495 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Notebooks for workshops of DoE course, hosted by the Computational Materials Chemistry group at Uppsala University. <code>GPL-3.0</code> - ML-in-chemistry-101 (\ud83e\udd494 \u00b7  \u2b50 68 \u00b7 \ud83d\udc80) - The course materials for Machine Learning in Chemistry 101. <code>Unlicensed</code> - chemrev-gpr (\ud83e\udd494 \u00b7  \u2b50 6 \u00b7 \ud83d\udc80) - Notebooks accompanying the paper on GPR in materials and molecules in Chemical Reviews 2020. <code>Unlicensed</code> - AI4ChemMat Hands-On Series (\ud83e\udd494 \u00b7  \u2b50 1) - Hands-On Series organized by Chemistry and Materials working group at Argonne Nat Lab. <code>MPL-2.0</code> - PiNN Lab (\ud83e\udd493 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Material for running a lab session on atomic neural networks. <code>GPL-3.0</code> - MLDensity_tutorial (\ud83e\udd492 \u00b7  \u2b50 9 \u00b7 \ud83d\udc80) - Tutorial files to work with ML for the charge density in molecules and solids. <code>Unlicensed</code> - LAMMPS-style pair potentials with GAP (\ud83e\udd492 \u00b7  \u2b50 4 \u00b7 \ud83d\udc80) - A tutorial on how to create LAMMPS-style pair potentials and use them in combination with GAP potentials to run MD.. <code>Unlicensed</code> <code>ML-IAP</code> <code>MD</code> <code>rep-eng</code> - MALA Tutorial (\ud83e\udd492 \u00b7  \u2b50 2 \u00b7 \ud83d\udca4) - A full MALA hands-on tutorial. <code>Unlicensed</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#explainable-artificial-intelligence-xai","title":"Explainable Artificial intelligence (XAI)","text":"<p>Projects that focus on explainability and model interpretability in atomistic ML.</p> exmol (\ud83e\udd4718 \u00b7  \u2b50 280 \u00b7 \ud83d\udca4) - Explainer for black box models that predict molecule properties. <code>MIT</code>  - [GitHub](https://github.com/ur-whitelab/exmol) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 40 \u00b7 \ud83d\udce6 20 \u00b7 \ud83d\udccb 69 - 15% open \u00b7 \u23f1\ufe0f 04.12.2023):      <pre><code>git clone https://github.com/ur-whitelab/exmol\n</code></pre> - [PyPi](https://pypi.org/project/exmol) (\ud83d\udce5 890 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 03.06.2022):     <pre><code>pip install exmol\n</code></pre> MEGAN: Multi Explanation Graph Attention Student (\ud83e\udd496 \u00b7  \u2b50 5) - Minimal implementation of graph attention student model architecture. <code>MIT</code> <code>rep-learn</code>  - [GitHub](https://github.com/aimat-lab/graph_attention_student) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 1 \u00b7 \u23f1\ufe0f 19.08.2024):      <pre><code>git clone https://github.com/aimat-lab/graph_attention_student\n</code></pre> Show 1 hidden projects...  - Linear vs blackbox (\ud83e\udd493 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Code and data related to the publication: Interpretable models for extrapolation in scientific machine learning. <code>MIT</code> <code>XAI</code> <code>single-paper</code> <code>rep-eng</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#electronic-structure-methods-ml-esm","title":"Electronic structure methods (ML-ESM)","text":"<p>Projects and models that focus on quantities of electronic structure methods, which do not fit into either of the categories ML-WFT or ML-DFT.</p> Show 5 hidden projects...  - QDF for molecule (\ud83e\udd478 \u00b7  \u2b50 200 \u00b7 \ud83d\udc80) - Quantum deep field: data-driven wave function, electron density generation, and energy prediction and extrapolation.. <code>MIT</code> - QMLearn (\ud83e\udd485 \u00b7  \u2b50 11 \u00b7 \ud83d\udc80) - Quantum Machine Learning by learning one-body reduced density matrices in the AO basis... <code>MIT</code> - q-pac (\ud83e\udd485 \u00b7  \u2b50 4 \u00b7 \ud83d\udc80) - Kernel charge equilibration method. <code>MIT</code> <code>electrostatics</code> - halex (\ud83e\udd485 \u00b7  \u2b50 3 \u00b7 \ud83d\udca4) - Hamiltonian Learning for Excited States https://doi.org/10.48550/arXiv.2311.00844. <code>Unlicensed</code> <code>excited-states</code> - e3psi (\ud83e\udd493 \u00b7  \u2b50 3 \u00b7 \ud83d\udca4) - Equivariant machine learning library for learning from electronic structures. <code>LGPL-3.0</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#general-tools","title":"General Tools","text":"<p>General tools for atomistic machine learning.</p> DeepChem (\ud83e\udd4736 \u00b7  \u2b50 5.4K) - Democratizing Deep-Learning for Drug Discovery, Quantum Chemistry, Materials Science and Biology. <code>MIT</code>  - [GitHub](https://github.com/deepchem/deepchem) (\ud83d\udc68\u200d\ud83d\udcbb 250 \u00b7 \ud83d\udd00 1.7K \u00b7 \ud83d\udce6 430 \u00b7 \ud83d\udccb 1.9K - 33% open \u00b7 \u23f1\ufe0f 20.09.2024):      <pre><code>git clone https://github.com/deepchem/deepchem\n</code></pre> - [PyPi](https://pypi.org/project/deepchem) (\ud83d\udce5 40K / month \u00b7 \ud83d\udce6 13 \u00b7 \u23f1\ufe0f 20.09.2024):     <pre><code>pip install deepchem\n</code></pre> - [Conda](https://anaconda.org/conda-forge/deepchem) (\ud83d\udce5 110K \u00b7 \u23f1\ufe0f 05.04.2024):     <pre><code>conda install -c conda-forge deepchem\n</code></pre> - [Docker Hub](https://hub.docker.com/r/deepchemio/deepchem) (\ud83d\udce5 7.6K \u00b7 \u2b50 5 \u00b7 \u23f1\ufe0f 20.09.2024):     <pre><code>docker pull deepchemio/deepchem\n</code></pre> RDKit (\ud83e\udd4735 \u00b7  \u2b50 2.6K) -  <code>BSD-3</code> <code>C++</code>  - [GitHub](https://github.com/rdkit/rdkit) (\ud83d\udc68\u200d\ud83d\udcbb 230 \u00b7 \ud83d\udd00 860 \u00b7 \ud83d\udce5 1.1K \u00b7 \ud83d\udce6 3 \u00b7 \ud83d\udccb 3.4K - 29% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/rdkit/rdkit\n</code></pre> - [PyPi](https://pypi.org/project/rdkit) (\ud83d\udce5 1.8M / month \u00b7 \ud83d\udce6 710 \u00b7 \u23f1\ufe0f 07.08.2024):     <pre><code>pip install rdkit\n</code></pre> - [Conda](https://anaconda.org/rdkit/rdkit) (\ud83d\udce5 2.6M \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c rdkit rdkit\n</code></pre> Matminer (\ud83e\udd4728 \u00b7  \u2b50 470) - Data mining for materials science. <code>Custom</code>  - [GitHub](https://github.com/hackingmaterials/matminer) (\ud83d\udc68\u200d\ud83d\udcbb 54 \u00b7 \ud83d\udd00 190 \u00b7 \ud83d\udce6 320 \u00b7 \ud83d\udccb 230 - 12% open \u00b7 \u23f1\ufe0f 23.09.2024):      <pre><code>git clone https://github.com/hackingmaterials/matminer\n</code></pre> - [PyPi](https://pypi.org/project/matminer) (\ud83d\udce5 13K / month \u00b7 \ud83d\udce6 58 \u00b7 \u23f1\ufe0f 27.03.2024):     <pre><code>pip install matminer\n</code></pre> - [Conda](https://anaconda.org/conda-forge/matminer) (\ud83d\udce5 70K \u00b7 \u23f1\ufe0f 28.03.2024):     <pre><code>conda install -c conda-forge matminer\n</code></pre> QUIP (\ud83e\udd4826 \u00b7  \u2b50 350) - libAtoms/QUIP molecular dynamics framework: https://libatoms.github.io. <code>GPL-2.0</code> <code>MD</code> <code>ML-IAP</code> <code>rep-eng</code> <code>Fortran</code>  - [GitHub](https://github.com/libAtoms/QUIP) (\ud83d\udc68\u200d\ud83d\udcbb 85 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce5 670 \u00b7 \ud83d\udce6 42 \u00b7 \ud83d\udccb 470 - 22% open \u00b7 \u23f1\ufe0f 15.08.2024):      <pre><code>git clone https://github.com/libAtoms/QUIP\n</code></pre> - [PyPi](https://pypi.org/project/quippy-ase) (\ud83d\udce5 7.3K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 15.01.2023):     <pre><code>pip install quippy-ase\n</code></pre> - [Docker Hub](https://hub.docker.com/r/libatomsquip/quip) (\ud83d\udce5 9.9K \u00b7 \u2b50 4 \u00b7 \u23f1\ufe0f 24.04.2023):     <pre><code>docker pull libatomsquip/quip\n</code></pre> MAML (\ud83e\udd4824 \u00b7  \u2b50 360) - Python for Materials Machine Learning, Materials Descriptors, Machine Learning Force Fields, Deep Learning, etc. <code>BSD-3</code>  - [GitHub](https://github.com/materialsvirtuallab/maml) (\ud83d\udc68\u200d\ud83d\udcbb 33 \u00b7 \ud83d\udd00 77 \u00b7 \ud83d\udce6 10 \u00b7 \ud83d\udccb 71 - 12% open \u00b7 \u23f1\ufe0f 18.09.2024):      <pre><code>git clone https://github.com/materialsvirtuallab/maml\n</code></pre> - [PyPi](https://pypi.org/project/maml) (\ud83d\udce5 420 / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 13.06.2024):     <pre><code>pip install maml\n</code></pre> JARVIS-Tools (\ud83e\udd4823 \u00b7  \u2b50 300 \u00b7 \ud83d\udcc9) - JARVIS-Tools: an open-source software package for data-driven atomistic materials design. Publications:.. <code>Custom</code>  - [GitHub](https://github.com/usnistgov/jarvis) (\ud83d\udc68\u200d\ud83d\udcbb 15 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce6 97 \u00b7 \ud83d\udccb 90 - 50% open \u00b7 \u23f1\ufe0f 07.09.2024):      <pre><code>git clone https://github.com/usnistgov/jarvis\n</code></pre> - [PyPi](https://pypi.org/project/jarvis-tools) (\ud83d\udce5 20K / month \u00b7 \ud83d\udce6 31 \u00b7 \u23f1\ufe0f 07.09.2024):     <pre><code>pip install jarvis-tools\n</code></pre> - [Conda](https://anaconda.org/conda-forge/jarvis-tools) (\ud83d\udce5 77K \u00b7 \u23f1\ufe0f 07.09.2024):     <pre><code>conda install -c conda-forge jarvis-tools\n</code></pre> MAST-ML (\ud83e\udd4819 \u00b7  \u2b50 100) - MAterials Simulation Toolkit for Machine Learning (MAST-ML). <code>MIT</code>  - [GitHub](https://github.com/uw-cmg/MAST-ML) (\ud83d\udc68\u200d\ud83d\udcbb 18 \u00b7 \ud83d\udd00 58 \u00b7 \ud83d\udce5 120 \u00b7 \ud83d\udce6 43 \u00b7 \ud83d\udccb 220 - 14% open \u00b7 \u23f1\ufe0f 17.04.2024):      <pre><code>git clone https://github.com/uw-cmg/MAST-ML\n</code></pre> Scikit-Matter (\ud83e\udd4818 \u00b7  \u2b50 76) - A collection of scikit-learn compatible utilities that implement methods born out of the materials science and.. <code>BSD-3</code> <code>scikit-learn</code>  - [GitHub](https://github.com/scikit-learn-contrib/scikit-matter) (\ud83d\udc68\u200d\ud83d\udcbb 15 \u00b7 \ud83d\udd00 20 \u00b7 \ud83d\udce6 10 \u00b7 \ud83d\udccb 70 - 20% open \u00b7 \u23f1\ufe0f 06.08.2024):      <pre><code>git clone https://github.com/scikit-learn-contrib/scikit-matter\n</code></pre> - [PyPi](https://pypi.org/project/skmatter) (\ud83d\udce5 1.8K / month \u00b7 \u23f1\ufe0f 24.08.2023):     <pre><code>pip install skmatter\n</code></pre> - [Conda](https://anaconda.org/conda-forge/skmatter) (\ud83d\udce5 2.2K \u00b7 \u23f1\ufe0f 24.08.2023):     <pre><code>conda install -c conda-forge skmatter\n</code></pre> XenonPy (\ud83e\udd4816 \u00b7  \u2b50 130) - XenonPy is a Python Software for Materials Informatics. <code>BSD-3</code>  - [GitHub](https://github.com/yoshida-lab/XenonPy) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 57 \u00b7 \ud83d\udce5 1.4K \u00b7 \ud83d\udccb 87 - 24% open \u00b7 \u23f1\ufe0f 21.04.2024):      <pre><code>git clone https://github.com/yoshida-lab/XenonPy\n</code></pre> - [PyPi](https://pypi.org/project/xenonpy) (\ud83d\udce5 590 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 31.10.2022):     <pre><code>pip install xenonpy\n</code></pre> MLatom (\ud83e\udd4816 \u00b7  \u2b50 46) - AI-enhanced computational chemistry. <code>MIT</code> <code>UIP</code> <code>ML-IAP</code> <code>MD</code> <code>ML-DFT</code> <code>ML-ESM</code> <code>transfer-learning</code> <code>active-learning</code> <code>spectroscopy</code> <code>structure-optimization</code>  - [GitHub](https://github.com/dralgroup/mlatom) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 9 \u00b7 \ud83d\udccb 4 - 25% open \u00b7 \u23f1\ufe0f 23.09.2024):      <pre><code>git clone https://github.com/dralgroup/mlatom\n</code></pre> - [PyPi](https://pypi.org/project/mlatom) (\ud83d\udce5 1.4K / month \u00b7 \u23f1\ufe0f 23.09.2024):     <pre><code>pip install mlatom\n</code></pre> Artificial Intelligence for Science (AIRS) (\ud83e\udd4913 \u00b7  \u2b50 490) - Artificial Intelligence Research for Science (AIRS). <code>GPL-3.0 license</code> <code>rep-learn</code> <code>generative</code> <code>ML-IAP</code> <code>MD</code> <code>ML-DFT</code> <code>ML-WFT</code> <code>biomolecules</code>  - [GitHub](https://github.com/divelab/AIRS) (\ud83d\udc68\u200d\ud83d\udcbb 29 \u00b7 \ud83d\udd00 58 \u00b7 \ud83d\udccb 15 - 6% open \u00b7 \u23f1\ufe0f 03.09.2024):      <pre><code>git clone https://github.com/divelab/AIRS\n</code></pre> Equisolve (\ud83e\udd496 \u00b7  \u2b50 5 \u00b7 \ud83d\udca4) - A ML toolkit package utilizing the metatensor data format to build models for the prediction of equivariant properties.. <code>BSD-3</code> <code>ML-IAP</code>  - [GitHub](https://github.com/lab-cosmo/equisolve) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 1 \u00b7 \ud83d\udccb 23 - 82% open \u00b7 \u23f1\ufe0f 27.10.2023):      <pre><code>git clone https://github.com/lab-cosmo/equisolve\n</code></pre> Show 10 hidden projects...  - QML (\ud83e\udd4816 \u00b7  \u2b50 200 \u00b7 \ud83d\udc80) - QML: Quantum Machine Learning. <code>MIT</code> - Automatminer (\ud83e\udd4915 \u00b7  \u2b50 140 \u00b7 \ud83d\udc80) - An automatic engine for predicting materials properties. <code>Custom</code> <code>autoML</code> - AMPtorch (\ud83e\udd4911 \u00b7  \u2b50 59 \u00b7 \ud83d\udc80) - AMPtorch: Atomistic Machine Learning Package (AMP) - PyTorch. <code>GPL-3.0</code> - OpenChem (\ud83e\udd4910 \u00b7  \u2b50 670 \u00b7 \ud83d\udc80) - OpenChem: Deep Learning toolkit for Computational Chemistry and Drug Design Research. <code>MIT</code> - JAXChem (\ud83e\udd497 \u00b7  \u2b50 77 \u00b7 \ud83d\udc80) - JAXChem is a JAX-based deep learning library for complex and versatile chemical modeling. <code>MIT</code> - uncertainty_benchmarking (\ud83e\udd497 \u00b7  \u2b50 39 \u00b7 \ud83d\udc80) - Various code/notebooks to benchmark different ways we could estimate uncertainty in ML predictions. <code>Unlicensed</code> <code>benchmarking</code> <code>probabilistic</code> - torchchem (\ud83e\udd497 \u00b7  \u2b50 34 \u00b7 \ud83d\udc80) - An experimental repo for experimenting with PyTorch models. <code>MIT</code> - ACEatoms (\ud83e\udd494 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Generic code for modelling atomic properties using ACE. <code>Custom</code> <code>Julia</code> - Magpie (\ud83e\udd493) - Materials Agnostic Platform for Informatics and Exploration (Magpie). <code>MIT</code> <code>Java</code> - quantum-structure-ml (\ud83e\udd492 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Multi-class classification model for predicting the magnetic order of magnetic structures and a binary classification.. <code>Unlicensed</code> <code>magnetism</code> <code>benchmarking</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#generative-models","title":"Generative Models","text":"<p>Projects that implement generative models for atomistic ML.</p> GT4SD (\ud83e\udd4719 \u00b7  \u2b50 330) - GT4SD, an open-source library to accelerate hypothesis generation in the scientific discovery process. <code>MIT</code> <code>pretrained</code> <code>drug-discovery</code> <code>rep-learn</code>  - [GitHub](https://github.com/GT4SD/gt4sd-core) (\ud83d\udc68\u200d\ud83d\udcbb 20 \u00b7 \ud83d\udd00 68 \u00b7 \ud83d\udccb 110 - 12% open \u00b7 \u23f1\ufe0f 12.09.2024):      <pre><code>git clone https://github.com/GT4SD/gt4sd-core\n</code></pre> - [PyPi](https://pypi.org/project/gt4sd) (\ud83d\udce5 1.6K / month \u00b7 \u23f1\ufe0f 12.09.2024):     <pre><code>pip install gt4sd\n</code></pre> MoLeR (\ud83e\udd4715 \u00b7  \u2b50 260 \u00b7 \ud83d\udca4) - Implementation of MoLeR: a generative model of molecular graphs which supports scaffold-constrained generation. <code>MIT</code>  - [GitHub](https://github.com/microsoft/molecule-generation) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 42 \u00b7 \ud83d\udccb 39 - 23% open \u00b7 \u23f1\ufe0f 03.01.2024):      <pre><code>git clone https://github.com/microsoft/molecule-generation\n</code></pre> - [PyPi](https://pypi.org/project/molecule-generation) (\ud83d\udce5 310 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 05.01.2024):     <pre><code>pip install molecule-generation\n</code></pre> PMTransformer (\ud83e\udd4715 \u00b7  \u2b50 85) - Universal Transfer Learning in Porous Materials, including MOFs. <code>MIT</code> <code>transfer-learning</code> <code>pretrained</code> <code>transformer</code>  - [GitHub](https://github.com/hspark1212/MOFTransformer) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 12 \u00b7 \ud83d\udce6 6 \u00b7 \u23f1\ufe0f 20.06.2024):      <pre><code>git clone https://github.com/hspark1212/MOFTransformer\n</code></pre> - [PyPi](https://pypi.org/project/moftransformer) (\ud83d\udce5 460 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 20.06.2024):     <pre><code>pip install moftransformer\n</code></pre> SchNetPack G-SchNet (\ud83e\udd4814 \u00b7  \u2b50 46) - G-SchNet extension for SchNetPack. <code>MIT</code>  - [GitHub](https://github.com/atomistic-machine-learning/schnetpack-gschnet) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 8 \u00b7 \u23f1\ufe0f 05.09.2024):      <pre><code>git clone https://github.com/atomistic-machine-learning/schnetpack-gschnet\n</code></pre> SiMGen (\ud83e\udd489 \u00b7  \u2b50 12 \u00b7 \ud83d\udca4) - Zero Shot Molecular Generation via Similarity Kernels. <code>MIT</code> <code>viz</code>  - [GitHub](https://github.com/RokasEl/simgen) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 2 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 4 - 25% open \u00b7 \u23f1\ufe0f 15.02.2024):      <pre><code>git clone https://github.com/RokasEl/simgen\n</code></pre> - [PyPi](https://pypi.org/project/simgen) (\ud83d\udce5 38 / month \u00b7 \u23f1\ufe0f 14.02.2024):     <pre><code>pip install simgen\n</code></pre> COATI (\ud83e\udd495 \u00b7  \u2b50 98) - COATI: multi-modal contrastive pre-training for representing and traversing chemical space. <code>Apache-2</code> <code>drug-discovery</code> <code>multimodal</code> <code>pretrained</code> <code>rep-learn</code>  - [GitHub](https://github.com/terraytherapeutics/COATI) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 5 \u00b7 \ud83d\udccb 3 - 33% open \u00b7 \u23f1\ufe0f 23.03.2024):      <pre><code>git clone https://github.com/terraytherapeutics/COATI\n</code></pre> Show 8 hidden projects...  - synspace (\ud83e\udd4813 \u00b7  \u2b50 35 \u00b7 \ud83d\udc80) - Synthesis generative model. <code>MIT</code> - EDM (\ud83e\udd489 \u00b7  \u2b50 430 \u00b7 \ud83d\udc80) - E(3) Equivariant Diffusion Model for Molecule Generation in 3D. <code>MIT</code> - G-SchNet (\ud83e\udd498 \u00b7  \u2b50 130 \u00b7 \ud83d\udc80) - G-SchNet - a generative model for 3d molecular structures. <code>MIT</code> - bVAE-IM (\ud83e\udd498 \u00b7  \u2b50 11 \u00b7 \ud83d\udc80) - Implementation of Chemical Design with GPU-based Ising Machine. <code>MIT</code> <code>QML</code> <code>single-paper</code> - cG-SchNet (\ud83e\udd497 \u00b7  \u2b50 52 \u00b7 \ud83d\udc80) - cG-SchNet - a conditional generative neural network for 3d molecular structures. <code>MIT</code> - rxngenerator (\ud83e\udd497 \u00b7  \u2b50 11 \u00b7 \ud83d\udc80) - A generative model for molecular generation via multi-step chemical reactions. <code>MIT</code> - MolSLEPA (\ud83e\udd495 \u00b7  \u2b50 5 \u00b7 \ud83d\udc80) - Interpretable Fragment-based Molecule Design with Self-learning Entropic Population Annealing. <code>MIT</code> <code>XAI</code> - Mapping out phase diagrams with generative classifiers (\ud83e\udd494 \u00b7  \u2b50 7 \u00b7 \ud83d\udc80) - Repository for our ``Mapping out phase diagrams with generative models paper. <code>MIT</code> <code>phase-transition</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#interatomic-potentials-ml-iap","title":"Interatomic Potentials (ML-IAP)","text":"<p>Machine learning interatomic potentials (aka ML-IAP, MLIAP, MLIP, MLP) and force fields (ML-FF) for molecular dynamics.</p> DeePMD-kit (\ud83e\udd4727 \u00b7  \u2b50 1.5K) - A deep learning package for many-body potential energy representation and molecular dynamics. <code>LGPL-3.0</code> <code>C++</code>  - [GitHub](https://github.com/deepmodeling/deepmd-kit) (\ud83d\udc68\u200d\ud83d\udcbb 69 \u00b7 \ud83d\udd00 500 \u00b7 \ud83d\udce5 40K \u00b7 \ud83d\udce6 16 \u00b7 \ud83d\udccb 780 - 12% open \u00b7 \u23f1\ufe0f 17.09.2024):      <pre><code>git clone https://github.com/deepmodeling/deepmd-kit\n</code></pre> - [PyPi](https://pypi.org/project/deepmd-kit) (\ud83d\udce5 2.9K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 25.09.2024):     <pre><code>pip install deepmd-kit\n</code></pre> - [Conda](https://anaconda.org/deepmodeling/deepmd-kit) (\ud83d\udce5 1.3K \u00b7 \u23f1\ufe0f 06.04.2024):     <pre><code>conda install -c deepmodeling deepmd-kit\n</code></pre> - [Docker Hub](https://hub.docker.com/r/deepmodeling/deepmd-kit) (\ud83d\udce5 2.9K \u00b7 \u2b50 1 \u00b7 \u23f1\ufe0f 27.07.2024):     <pre><code>docker pull deepmodeling/deepmd-kit\n</code></pre> NequIP (\ud83e\udd4724 \u00b7  \u2b50 610) - NequIP is a code for building E(3)-equivariant interatomic potentials. <code>MIT</code>  - [GitHub](https://github.com/mir-group/nequip) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce6 25 \u00b7 \ud83d\udccb 92 - 28% open \u00b7 \u23f1\ufe0f 09.07.2024):      <pre><code>git clone https://github.com/mir-group/nequip\n</code></pre> - [PyPi](https://pypi.org/project/nequip) (\ud83d\udce5 2.3K / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 09.07.2024):     <pre><code>pip install nequip\n</code></pre> - [Conda](https://anaconda.org/conda-forge/nequip) (\ud83d\udce5 5.9K \u00b7 \u23f1\ufe0f 10.07.2024):     <pre><code>conda install -c conda-forge nequip\n</code></pre> TorchANI (\ud83e\udd4724 \u00b7  \u2b50 460 \u00b7 \ud83d\udca4) - Accurate Neural Network Potential on PyTorch. <code>MIT</code>  - [GitHub](https://github.com/aiqm/torchani) (\ud83d\udc68\u200d\ud83d\udcbb 19 \u00b7 \ud83d\udd00 130 \u00b7 \ud83d\udce6 42 \u00b7 \ud83d\udccb 170 - 13% open \u00b7 \u23f1\ufe0f 14.11.2023):      <pre><code>git clone https://github.com/aiqm/torchani\n</code></pre> - [PyPi](https://pypi.org/project/torchani) (\ud83d\udce5 2.9K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 14.11.2023):     <pre><code>pip install torchani\n</code></pre> - [Conda](https://anaconda.org/conda-forge/torchani) (\ud83d\udce5 480K \u00b7 \u23f1\ufe0f 11.09.2024):     <pre><code>conda install -c conda-forge torchani\n</code></pre> MACE (\ud83e\udd4722 \u00b7  \u2b50 490) - MACE - Fast and accurate machine learning interatomic potentials with higher order equivariant message passing. <code>MIT</code>  - [GitHub](https://github.com/ACEsuit/mace) (\ud83d\udc68\u200d\ud83d\udcbb 39 \u00b7 \ud83d\udd00 180 \u00b7 \ud83d\udccb 270 - 26% open \u00b7 \u23f1\ufe0f 18.09.2024):      <pre><code>git clone https://github.com/ACEsuit/mace\n</code></pre> TorchMD-NET (\ud83e\udd4722 \u00b7  \u2b50 320 \u00b7 \ud83d\udcc9) - Training neural network potentials. <code>MIT</code> <code>MD</code> <code>rep-learn</code> <code>transformer</code> <code>pretrained</code>  - [GitHub](https://github.com/torchmd/torchmd-net) (\ud83d\udc68\u200d\ud83d\udcbb 16 \u00b7 \ud83d\udd00 71 \u00b7 \ud83d\udccb 120 - 28% open \u00b7 \u23f1\ufe0f 28.08.2024):      <pre><code>git clone https://github.com/torchmd/torchmd-net\n</code></pre> - [Conda](https://anaconda.org/conda-forge/torchmd-net) (\ud83d\udce5 170K \u00b7 \u23f1\ufe0f 12.09.2024):     <pre><code>conda install -c conda-forge torchmd-net\n</code></pre> DP-GEN (\ud83e\udd4722 \u00b7  \u2b50 300) - The deep potential generator to generate a deep-learning based model of interatomic potential energy and force field. <code>LGPL-3.0</code> <code>workflows</code>  - [GitHub](https://github.com/deepmodeling/dpgen) (\ud83d\udc68\u200d\ud83d\udcbb 64 \u00b7 \ud83d\udd00 170 \u00b7 \ud83d\udce5 1.8K \u00b7 \ud83d\udce6 6 \u00b7 \ud83d\udccb 300 - 11% open \u00b7 \u23f1\ufe0f 10.04.2024):      <pre><code>git clone https://github.com/deepmodeling/dpgen\n</code></pre> - [PyPi](https://pypi.org/project/dpgen) (\ud83d\udce5 650 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 10.04.2024):     <pre><code>pip install dpgen\n</code></pre> - [Conda](https://anaconda.org/deepmodeling/dpgen) (\ud83d\udce5 210 \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c deepmodeling dpgen\n</code></pre> GPUMD (\ud83e\udd4821 \u00b7  \u2b50 450 \u00b7 \ud83d\udcc9) - GPUMD is a highly efficient general-purpose molecular dynamic (MD) package and enables machine-learned potentials.. <code>GPL-3.0</code> <code>MD</code> <code>C++</code> <code>electrostatics</code>  - [GitHub](https://github.com/brucefan1983/GPUMD) (\ud83d\udc68\u200d\ud83d\udcbb 34 \u00b7 \ud83d\udd00 110 \u00b7 \ud83d\udccb 190 - 12% open \u00b7 \u23f1\ufe0f 21.09.2024):      <pre><code>git clone https://github.com/brucefan1983/GPUMD\n</code></pre> fairchem (\ud83e\udd4819 \u00b7  \u2b50 770) - FAIR Chemistrys library of machine learning methods for chemistry. Formerly known as Open Catalyst Project (ocp). <code>Unlicensed</code> <code>pretrained</code> <code>rep-learn</code> <code>catalysis</code>  - [GitHub](https://github.com/FAIR-Chem/fairchem) (\ud83d\udc68\u200d\ud83d\udcbb 42 \u00b7 \ud83d\udd00 230 \u00b7 \ud83d\udccb 200 - 6% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/FAIR-Chem/fairchem\n</code></pre> apax (\ud83e\udd4818 \u00b7  \u2b50 15) - A flexible and performant framework for training machine learning potentials. <code>MIT</code>  - [GitHub](https://github.com/apax-hub/apax) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 2 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 120 - 12% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/apax-hub/apax\n</code></pre> - [PyPi](https://pypi.org/project/apax) (\ud83d\udce5 240 / month \u00b7 \u23f1\ufe0f 17.09.2024):     <pre><code>pip install apax\n</code></pre> Neural Force Field (\ud83e\udd4817 \u00b7  \u2b50 230) - Neural Network Force Field based on PyTorch. <code>MIT</code> <code>pretrained</code>  - [GitHub](https://github.com/learningmatter-mit/NeuralForceField) (\ud83d\udc68\u200d\ud83d\udcbb 41 \u00b7 \ud83d\udd00 47 \u00b7 \ud83d\udccb 20 - 10% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/learningmatter-mit/NeuralForceField\n</code></pre> wfl (\ud83e\udd4816 \u00b7  \u2b50 31) - Workflow is a Python toolkit for building interatomic potential creation and atomistic simulation workflows. <code>GPL-2.0</code> <code>workflows</code> <code>HTC</code>  - [GitHub](https://github.com/libAtoms/workflow) (\ud83d\udc68\u200d\ud83d\udcbb 19 \u00b7 \ud83d\udd00 18 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 160 - 42% open \u00b7 \u23f1\ufe0f 03.09.2024):      <pre><code>git clone https://github.com/libAtoms/workflow\n</code></pre> Ultra-Fast Force Fields (UF3) (\ud83e\udd4815 \u00b7  \u2b50 59) - UF3: a python library for generating ultra-fast interatomic potentials. <code>Apache-2</code>  - [GitHub](https://github.com/uf3/uf3) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 20 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 50 - 38% open \u00b7 \u23f1\ufe0f 06.09.2024):      <pre><code>git clone https://github.com/uf3/uf3\n</code></pre> - [PyPi](https://pypi.org/project/uf3) (\ud83d\udce5 45 / month \u00b7 \u23f1\ufe0f 27.10.2023):     <pre><code>pip install uf3\n</code></pre> PyXtalFF (\ud83e\udd4814 \u00b7  \u2b50 85 \u00b7 \ud83d\udca4) - Machine Learning Interatomic Potential Predictions. <code>MIT</code>  - [GitHub](https://github.com/MaterSim/PyXtal_FF) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 23 \u00b7 \ud83d\udccb 63 - 19% open \u00b7 \u23f1\ufe0f 07.01.2024):      <pre><code>git clone https://github.com/MaterSim/PyXtal_FF\n</code></pre> - [PyPi](https://pypi.org/project/pyxtal_ff) (\ud83d\udce5 130 / month \u00b7 \u23f1\ufe0f 21.12.2022):     <pre><code>pip install pyxtal_ff\n</code></pre> So3krates (MLFF) (\ud83e\udd4814 \u00b7  \u2b50 76) - Build neural networks for machine learning force fields with JAX. <code>MIT</code>  - [GitHub](https://github.com/thorben-frank/mlff) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 15 \u00b7 \ud83d\udccb 9 - 33% open \u00b7 \u23f1\ufe0f 23.08.2024):      <pre><code>git clone https://github.com/thorben-frank/mlff\n</code></pre> KLIFF (\ud83e\udd4814 \u00b7  \u2b50 34) - KIM-based Learning-Integrated Fitting Framework for interatomic potentials. <code>LGPL-2.1</code> <code>probabilistic</code> <code>workflows</code>  - [GitHub](https://github.com/openkim/kliff) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 20 \u00b7 \ud83d\udce6 3 \u00b7 \ud83d\udccb 41 - 53% open \u00b7 \u23f1\ufe0f 06.07.2024):      <pre><code>git clone https://github.com/openkim/kliff\n</code></pre> - [PyPi](https://pypi.org/project/kliff) (\ud83d\udce5 280 / month \u00b7 \u23f1\ufe0f 17.12.2023):     <pre><code>pip install kliff\n</code></pre> - [Conda](https://anaconda.org/conda-forge/kliff) (\ud83d\udce5 100K \u00b7 \u23f1\ufe0f 10.09.2024):     <pre><code>conda install -c conda-forge kliff\n</code></pre> DMFF (\ud83e\udd4813 \u00b7  \u2b50 150 \u00b7 \ud83d\udca4) - DMFF (Differentiable Molecular Force Field) is a Jax-based python package that provides a full differentiable.. <code>LGPL-3.0</code>  - [GitHub](https://github.com/deepmodeling/DMFF) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 41 \u00b7 \ud83d\udccb 26 - 38% open \u00b7 \u23f1\ufe0f 12.01.2024):      <pre><code>git clone https://github.com/deepmodeling/DMFF\n</code></pre> NNPOps (\ud83e\udd4813 \u00b7  \u2b50 81) - High-performance operations for neural network potentials. <code>MIT</code> <code>MD</code> <code>C++</code>  - [GitHub](https://github.com/openmm/NNPOps) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 17 \u00b7 \ud83d\udccb 55 - 38% open \u00b7 \u23f1\ufe0f 10.07.2024):      <pre><code>git clone https://github.com/openmm/NNPOps\n</code></pre> - [Conda](https://anaconda.org/conda-forge/nnpops) (\ud83d\udce5 230K \u00b7 \u23f1\ufe0f 11.09.2024):     <pre><code>conda install -c conda-forge nnpops\n</code></pre> ANI-1 (\ud83e\udd4812 \u00b7  \u2b50 220) - ANI-1 neural net potential with python interface (ASE). <code>MIT</code>  - [GitHub](https://github.com/isayev/ASE_ANI) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 55 \u00b7 \ud83d\udccb 37 - 43% open \u00b7 \u23f1\ufe0f 11.03.2024):      <pre><code>git clone https://github.com/isayev/ASE_ANI\n</code></pre> PiNN (\ud83e\udd4812 \u00b7  \u2b50 100) - A Python library for building atomic neural networks. <code>BSD-3</code>  - [GitHub](https://github.com/Teoroo-CMC/PiNN) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 32 \u00b7 \ud83d\udccb 6 - 16% open \u00b7 \u23f1\ufe0f 27.06.2024):      <pre><code>git clone https://github.com/Teoroo-CMC/PiNN\n</code></pre> - [Docker Hub](https://hub.docker.com/r/teoroo/pinn) (\ud83d\udce5 240 \u00b7 \u23f1\ufe0f 27.06.2024):     <pre><code>docker pull teoroo/pinn\n</code></pre> Pacemaker (\ud83e\udd4812 \u00b7  \u2b50 69) - Python package for fitting atomic cluster expansion (ACE) potentials. <code>Custom</code>  - [GitHub](https://github.com/ICAMS/python-ace) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 16 \u00b7 \ud83d\udccb 53 - 30% open \u00b7 \u23f1\ufe0f 06.09.2024):      <pre><code>git clone https://github.com/ICAMS/python-ace\n</code></pre> - [PyPi](https://pypi.org/project/python-ace) (\ud83d\udce5 14 / month \u00b7 \u23f1\ufe0f 24.10.2022):     <pre><code>pip install python-ace\n</code></pre> ACEfit (\ud83e\udd4812 \u00b7  \u2b50 7) -  <code>MIT</code> <code>Julia</code>  - [GitHub](https://github.com/ACEsuit/ACEfit.jl) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 6 \u00b7 \ud83d\udccb 57 - 38% open \u00b7 \u23f1\ufe0f 14.09.2024):      <pre><code>git clone https://github.com/ACEsuit/ACEfit.jl\n</code></pre> tinker-hp (\ud83e\udd4811 \u00b7  \u2b50 80) - Tinker-HP: High-Performance Massively Parallel Evolution of Tinker on CPUs &amp; GPUs. <code>Custom</code>  - [GitHub](https://github.com/TinkerTools/tinker-hp) (\ud83d\udc68\u200d\ud83d\udcbb 12 \u00b7 \ud83d\udd00 22 \u00b7 \ud83d\udccb 20 - 15% open \u00b7 \u23f1\ufe0f 11.09.2024):      <pre><code>git clone https://github.com/TinkerTools/tinker-hp\n</code></pre> calorine (\ud83e\udd4811 \u00b7  \u2b50 12) - A Python package for constructing and sampling neuroevolution potential models. https://doi.org/10.21105/joss.06264. <code>Custom</code>  - [PyPi](https://pypi.org/project/calorine) (\ud83d\udce5 1.6K / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 26.07.2024):     <pre><code>pip install calorine\n</code></pre> - [GitLab](https://gitlab.com/materials-modeling/calorine) (\ud83d\udd00 4 \u00b7 \ud83d\udccb 86 - 10% open \u00b7 \u23f1\ufe0f 26.07.2024):      <pre><code>git clone https://gitlab.com/materials-modeling/calorine\n</code></pre> CCS_fit (\ud83e\udd4811 \u00b7  \u2b50 8 \u00b7 \ud83d\udca4) - Curvature Constrained Splines. <code>GPL-3.0</code>  - [GitHub](https://github.com/Teoroo-CMC/CCS) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 11 \u00b7 \ud83d\udce5 640 \u00b7 \ud83d\udccb 14 - 57% open \u00b7 \u23f1\ufe0f 16.02.2024):      <pre><code>git clone https://github.com/Teoroo-CMC/CCS\n</code></pre> - [PyPi](https://pypi.org/project/ccs_fit) (\ud83d\udce5 1K / month \u00b7 \u23f1\ufe0f 16.02.2024):     <pre><code>pip install ccs_fit\n</code></pre> DimeNet (\ud83e\udd499 \u00b7  \u2b50 290 \u00b7 \ud83d\udca4) - DimeNet and DimeNet++ models, as proposed in Directional Message Passing for Molecular Graphs (ICLR 2020) and Fast and.. <code>Custom</code>  - [GitHub](https://github.com/gasteigerjo/dimenet) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 60 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 31 - 3% open \u00b7 \u23f1\ufe0f 03.10.2023):      <pre><code>git clone https://github.com/gasteigerjo/dimenet\n</code></pre> ACE.jl (\ud83e\udd499 \u00b7  \u2b50 65) - Parameterisation of Equivariant Properties of Particle Systems. <code>Custom</code> <code>Julia</code>  - [GitHub](https://github.com/ACEsuit/ACE.jl) (\ud83d\udc68\u200d\ud83d\udcbb 12 \u00b7 \ud83d\udd00 15 \u00b7 \ud83d\udccb 82 - 29% open \u00b7 \u23f1\ufe0f 31.08.2024):      <pre><code>git clone https://github.com/ACEsuit/ACE.jl\n</code></pre> GAP (\ud83e\udd499 \u00b7  \u2b50 40) - Gaussian Approximation Potential (GAP). <code>Custom</code>  - [GitHub](https://github.com/libAtoms/GAP) (\ud83d\udc68\u200d\ud83d\udcbb 13 \u00b7 \ud83d\udd00 20 \u00b7 \u23f1\ufe0f 17.08.2024):      <pre><code>git clone https://github.com/libAtoms/GAP\n</code></pre> ACE1.jl (\ud83e\udd499 \u00b7  \u2b50 20) - Atomic Cluster Expansion for Modelling Invariant Atomic Properties. <code>Custom</code> <code>Julia</code>  - [GitHub](https://github.com/ACEsuit/ACE1.jl) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 7 \u00b7 \ud83d\udccb 46 - 47% open \u00b7 \u23f1\ufe0f 11.09.2024):      <pre><code>git clone https://github.com/ACEsuit/ACE1.jl\n</code></pre> Point Edge Transformer (PET) (\ud83e\udd499 \u00b7  \u2b50 18) - Point Edge Transformer. <code>MIT</code> <code>rep-learn</code> <code>transformer</code>  - [GitHub](https://github.com/spozdn/pet) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 5 \u00b7 \u23f1\ufe0f 02.07.2024):      <pre><code>git clone https://github.com/spozdn/pet\n</code></pre> MACE-Jax (\ud83e\udd498 \u00b7  \u2b50 59 \u00b7 \ud83d\udca4) - Equivariant machine learning interatomic potentials in JAX. <code>MIT</code>  - [GitHub](https://github.com/ACEsuit/mace-jax) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 5 \u00b7 \ud83d\udccb 7 - 42% open \u00b7 \u23f1\ufe0f 04.10.2023):      <pre><code>git clone https://github.com/ACEsuit/mace-jax\n</code></pre> SIMPLE-NN v2 (\ud83e\udd498 \u00b7  \u2b50 40 \u00b7 \ud83d\udca4) - SIMPLE-NN is an open package that constructs Behler-Parrinello-type neural-network interatomic potentials from ab.. <code>GPL-3.0</code>  - [GitHub](https://github.com/MDIL-SNU/SIMPLE-NN_v2) (\ud83d\udc68\u200d\ud83d\udcbb 13 \u00b7 \ud83d\udd00 17 \u00b7 \ud83d\udccb 13 - 30% open \u00b7 \u23f1\ufe0f 29.12.2023):      <pre><code>git clone https://github.com/MDIL-SNU/SIMPLE-NN_v2\n</code></pre> ALF (\ud83e\udd498 \u00b7  \u2b50 30) - A framework for performing active learning for training machine-learned interatomic potentials. <code>Custom</code> <code>active-learning</code>  - [GitHub](https://github.com/lanl/ALF) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 12 \u00b7 \u23f1\ufe0f 08.08.2024):      <pre><code>git clone https://github.com/lanl/alf\n</code></pre> TurboGAP (\ud83e\udd498 \u00b7  \u2b50 16) - The TurboGAP code. <code>Custom</code> <code>Fortran</code>  - [GitHub](https://github.com/mcaroba/turbogap) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 9 \u00b7 \ud83d\udccb 10 - 70% open \u00b7 \u23f1\ufe0f 11.09.2024):      <pre><code>git clone https://github.com/mcaroba/turbogap\n</code></pre> MLXDM (\ud83e\udd498 \u00b7  \u2b50 6) - A Neural Network Potential with Rigorous Treatment of Long-Range Dispersion https://doi.org/10.1039/D2DD00150K. <code>MIT</code> <code>long-range</code>  - [GitHub](https://github.com/RowleyGroup/MLXDM) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 2 \u00b7 \u23f1\ufe0f 15.08.2024):      <pre><code>git clone https://github.com/RowleyGroup/MLXDM\n</code></pre> PyNEP (\ud83e\udd497 \u00b7  \u2b50 46) - A python interface of the machine learning potential NEP used in GPUMD. <code>MIT</code>  - [GitHub](https://github.com/bigd4/PyNEP) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 16 \u00b7 \ud83d\udccb 11 - 36% open \u00b7 \u23f1\ufe0f 01.06.2024):      <pre><code>git clone https://github.com/bigd4/PyNEP\n</code></pre> TensorPotential (\ud83e\udd496 \u00b7  \u2b50 8) - Tensorpotential is a TensorFlow based tool for development, fitting ML interatomic potentials from electronic.. <code>Custom</code>  - [GitHub](https://github.com/ICAMS/TensorPotential) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 4 \u00b7 \u23f1\ufe0f 12.09.2024):      <pre><code>git clone https://github.com/ICAMS/TensorPotential\n</code></pre> NequIP-JAX (\ud83e\udd495 \u00b7  \u2b50 17 \u00b7 \ud83d\udca4) - JAX implementation of the NequIP interatomic potential. <code>Unlicensed</code>  - [GitHub](https://github.com/mariogeiger/nequip-jax) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 3 \u00b7 \u23f1\ufe0f 01.11.2023):      <pre><code>git clone https://github.com/mariogeiger/nequip-jax\n</code></pre> Allegro-JAX ( \u2b50 17) - JAX implementation of the Allegro interatomic potential. <code>Unlicensed</code>  - [GitHub](https://github.com/mariogeiger/allegro-jax) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 2 \u00b7 \ud83d\udccb 2 - 50% open \u00b7 \u23f1\ufe0f 09.04.2024):      <pre><code>git clone https://github.com/mariogeiger/allegro-jax\n</code></pre> Show 32 hidden projects...  - MEGNet (\ud83e\udd4723 \u00b7  \u2b50 500 \u00b7 \ud83d\udc80) - Graph Networks as a Universal Machine Learning Framework for Molecules and Crystals. <code>BSD-3</code> <code>multifidelity</code> - sGDML (\ud83e\udd4816 \u00b7  \u2b50 140 \u00b7 \ud83d\udc80) - sGDML - Reference implementation of the Symmetric Gradient Domain Machine Learning model. <code>MIT</code> - n2p2 (\ud83e\udd4814 \u00b7  \u2b50 220 \u00b7 \ud83d\udc80) - n2p2 - A Neural Network Potential Package. <code>GPL-3.0</code> <code>C++</code> - TensorMol (\ud83e\udd4812 \u00b7  \u2b50 270 \u00b7 \ud83d\udc80) - Tensorflow + Molecules = TensorMol. <code>GPL-3.0</code> <code>single-paper</code> - SIMPLE-NN (\ud83e\udd4811 \u00b7  \u2b50 47 \u00b7 \ud83d\udc80) - SIMPLE-NN(SNU Interatomic Machine-learning PotentiaL packagE version Neural Network). <code>GPL-3.0</code> - Allegro (\ud83e\udd4910 \u00b7  \u2b50 330 \u00b7 \ud83d\udc80) - Allegro is an open-source code for building highly scalable and accurate equivariant deep learning interatomic.. <code>MIT</code> - NNsforMD (\ud83e\udd4910 \u00b7  \u2b50 10 \u00b7 \ud83d\udc80) - Neural network class for molecular dynamics to predict potential energy, forces and non-adiabatic couplings. <code>MIT</code> - SchNet (\ud83e\udd499 \u00b7  \u2b50 220 \u00b7 \ud83d\udc80) - SchNet - a deep learning architecture for quantum chemistry. <code>MIT</code> - GemNet (\ud83e\udd499 \u00b7  \u2b50 180 \u00b7 \ud83d\udc80) - GemNet model in PyTorch, as proposed in GemNet: Universal Directional Graph Neural Networks for Molecules (NeurIPS.. <code>Custom</code> - AIMNet (\ud83e\udd498 \u00b7  \u2b50 95 \u00b7 \ud83d\udc80) - Atoms In Molecules Neural Network Potential. <code>MIT</code> <code>single-paper</code> - SNAP (\ud83e\udd498 \u00b7  \u2b50 36 \u00b7 \ud83d\udc80) - Repository for spectral neighbor analysis potential (SNAP) model development. <code>BSD-3</code> - Atomistic Adversarial Attacks (\ud83e\udd498 \u00b7  \u2b50 31 \u00b7 \ud83d\udc80) - Code for performing adversarial attacks on atomistic systems using NN potentials. <code>MIT</code> <code>probabilistic</code> - MEGNetSparse (\ud83e\udd498 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - A library imlementing a graph neural network with sparse representation from Code for Kazeev, N., Al-Maeeni, A.R.,.. <code>MIT</code> <code>material-defect</code> - PhysNet (\ud83e\udd497 \u00b7  \u2b50 88 \u00b7 \ud83d\udc80) - Code for training PhysNet models. <code>MIT</code> <code>electrostatics</code> - MLIP-3 (\ud83e\udd496 \u00b7  \u2b50 26 \u00b7 \ud83d\udc80) - MLIP-3: Active learning on atomic environments with Moment Tensor Potentials (MTP). <code>BSD-2</code> <code>C++</code> - testing-framework (\ud83e\udd496 \u00b7  \u2b50 11 \u00b7 \ud83d\udc80) - The purpose of this repository is to aid the testing of a large number of interatomic potentials for a variety of.. <code>Unlicensed</code> <code>benchmarking</code> - PANNA (\ud83e\udd496 \u00b7  \u2b50 9 \u00b7 \ud83d\udc80) - A package to train and validate all-to-all connected network models for BP[1] and modified-BP[2] type local atomic.. <code>MIT</code> <code>benchmarking</code> - Asparagus (\ud83e\udd496 \u00b7  \u2b50 4 \u00b7 \ud83d\udc23) - Program Package for Sampling, Training and Applying ML-based Potential models https://doi.org/10.48550/arXiv.2407.15175. <code>MIT</code> <code>workflows</code> <code>sampling</code> <code>MD</code> - GN-MM (\ud83e\udd495 \u00b7  \u2b50 10 \u00b7 \ud83d\udc80) - The Gaussian Moment Neural Network (GM-NN) package developed for large-scale atomistic simulations employing atomistic.. <code>MIT</code> <code>active-learning</code> <code>MD</code> <code>rep-eng</code> <code>magnetism</code> - Alchemical learning (\ud83e\udd495 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Code for the Modeling high-entropy transition metal alloys with alchemical compression article. <code>BSD-3</code> - ACE1Pack.jl (\ud83e\udd495 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Provides convenience functionality for the usage of ACE1.jl, ACEfit.jl, JuLIP.jl for fitting interatomic potentials.. <code>MIT</code> <code>Julia</code> - Allegro-Legato (\ud83e\udd494 \u00b7  \u2b50 19 \u00b7 \ud83d\udc80) - An extension of Allegro with enhanced robustness and time-to-failure. <code>MIT</code> <code>MD</code> - glp (\ud83e\udd494 \u00b7  \u2b50 17) - tools for graph-based machine-learning potentials in jax. <code>MIT</code> - ACE Workflows (\ud83e\udd494 \u00b7 \ud83d\udca4) - Workflow Examples for ACE Models. <code>Unlicensed</code> <code>Julia</code> <code>workflows</code> - PeriodicPotentials (\ud83e\udd494 \u00b7 \ud83d\udc80) - A Periodic table app that displays potentials based on the selected elements. <code>MIT</code> <code>community-resource</code> <code>viz</code> <code>JavaScript</code> - PyFLAME (\ud83e\udd493 \u00b7 \ud83d\udc80) - An automated approach for developing neural network interatomic potentials with FLAME.. <code>Unlicensed</code> <code>active-learning</code> <code>structure-prediction</code> <code>structure-optimization</code> <code>rep-eng</code> <code>Fortran</code> - SingleNN (\ud83e\udd492 \u00b7  \u2b50 8 \u00b7 \ud83d\udc80) - An efficient package for training and executing neural-network interatomic potentials. <code>Unlicensed</code> <code>C++</code> - AisNet (\ud83e\udd492 \u00b7  \u2b50 3 \u00b7 \ud83d\udc80) - A Universal Interatomic Potential Neural Network with Encoded Local Environment Features.. <code>MIT</code> - RuNNer (\ud83e\udd492) - The RuNNer Neural Network Energy Representation is a Fortran-based framework for the construction of Behler-.. <code>GPL-3.0</code> <code>Fortran</code> - nnp-pre-training (\ud83e\udd491 \u00b7  \u2b50 6 \u00b7 \ud83d\udca4) - Synthetic pre-training for neural-network interatomic potentials. <code>Unlicensed</code> <code>pretrained</code> <code>MD</code> - mag-ace (\ud83e\udd491 \u00b7  \u2b50 2 \u00b7 \ud83d\udca4) - Magnetic ACE potential. FORTRAN interface for LAMMPS SPIN package. <code>Unlicensed</code> <code>magnetism</code> <code>MD</code> <code>Fortran</code> - mlp (\ud83e\udd491 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Proper orthogonal descriptors for efficient and accurate interatomic potentials... <code>Unlicensed</code> <code>Julia</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#language-models","title":"Language Models","text":"<p>Projects that use (large) language models (LMs, LLMs) or natural language procesing (NLP) techniques for atomistic ML.</p> paper-qa (\ud83e\udd4729 \u00b7  \u2b50 5.9K) - High accuracy RAG for answering questions from scientific documents with citations. <code>Apache-2</code> <code>ai-agent</code>  - [GitHub](https://github.com/Future-House/paper-qa) (\ud83d\udc68\u200d\ud83d\udcbb 25 \u00b7 \ud83d\udd00 550 \u00b7 \ud83d\udce6 71 \u00b7 \ud83d\udccb 200 - 30% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/whitead/paper-qa\n</code></pre> - [PyPi](https://pypi.org/project/paper-qa) (\ud83d\udce5 15K / month \u00b7 \ud83d\udce6 8 \u00b7 \u23f1\ufe0f 24.09.2024):     <pre><code>pip install paper-qa\n</code></pre> OpenBioML ChemNLP (\ud83e\udd4717 \u00b7  \u2b50 150) - ChemNLP project. <code>MIT</code> <code>datasets</code>  - [GitHub](https://github.com/OpenBioML/chemnlp) (\ud83d\udc68\u200d\ud83d\udcbb 27 \u00b7 \ud83d\udd00 46 \u00b7 \ud83d\udccb 250 - 44% open \u00b7 \u23f1\ufe0f 19.08.2024):      <pre><code>git clone https://github.com/OpenBioML/chemnlp\n</code></pre> - [PyPi](https://pypi.org/project/chemnlp) (\ud83d\udce5 97 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 07.08.2023):     <pre><code>pip install chemnlp\n</code></pre> ChemCrow (\ud83e\udd4815 \u00b7  \u2b50 590) - Open source package for the accurate solution of reasoning-intensive chemical tasks. <code>MIT</code> <code>ai-agent</code>  - [GitHub](https://github.com/ur-whitelab/chemcrow-public) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 84 \u00b7 \ud83d\udce6 5 \u00b7 \ud83d\udccb 20 - 30% open \u00b7 \u23f1\ufe0f 27.03.2024):      <pre><code>git clone https://github.com/ur-whitelab/chemcrow-public\n</code></pre> - [PyPi](https://pypi.org/project/chemcrow) (\ud83d\udce5 530 / month \u00b7 \u23f1\ufe0f 27.03.2024):     <pre><code>pip install chemcrow\n</code></pre> AtomGPT (\ud83e\udd4813 \u00b7  \u2b50 22) - AtomGPT: Atomistic Generative Pretrained Transformer for Forward and Inverse Materials Design. <code>Custom</code> <code>generative</code> <code>pretrained</code> <code>transformer</code>  - [GitHub](https://github.com/usnistgov/atomgpt) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 3 \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 22.09.2024):      <pre><code>git clone https://github.com/usnistgov/atomgpt\n</code></pre> - [PyPi](https://pypi.org/project/atomgpt) (\ud83d\udce5 230 / month \u00b7 \u23f1\ufe0f 22.09.2024):     <pre><code>pip install atomgpt\n</code></pre> gptchem (\ud83e\udd4812 \u00b7  \u2b50 220 \u00b7 \ud83d\udca4) - Use GPT-3 to solve chemistry problems. <code>MIT</code>  - [GitHub](https://github.com/kjappelbaum/gptchem) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 41 \u00b7 \ud83d\udccb 21 - 90% open \u00b7 \u23f1\ufe0f 04.10.2023):      <pre><code>git clone https://github.com/kjappelbaum/gptchem\n</code></pre> - [PyPi](https://pypi.org/project/gptchem) (\ud83d\udce5 94 / month \u00b7 \u23f1\ufe0f 04.10.2023):     <pre><code>pip install gptchem\n</code></pre> NIST ChemNLP (\ud83e\udd4811 \u00b7  \u2b50 70) - ChemNLP: A Natural Language Processing based Library for Materials Chemistry Text Data. <code>MIT</code> <code>literature-data</code>  - [GitHub](https://github.com/usnistgov/chemnlp) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 16 \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 19.08.2024):      <pre><code>git clone https://github.com/usnistgov/chemnlp\n</code></pre> - [PyPi](https://pypi.org/project/chemnlp) (\ud83d\udce5 97 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 07.08.2023):     <pre><code>pip install chemnlp\n</code></pre> ChatMOF (\ud83e\udd4811 \u00b7  \u2b50 57) - Predict and Inverse design for metal-organic framework with large-language models (llms). <code>MIT</code> <code>generative</code>  - [GitHub](https://github.com/Yeonghun1675/ChatMOF) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 8 \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 01.07.2024):      <pre><code>git clone https://github.com/Yeonghun1675/ChatMOF\n</code></pre> - [PyPi](https://pypi.org/project/chatmof) (\ud83d\udce5 340 / month \u00b7 \u23f1\ufe0f 01.07.2024):     <pre><code>pip install chatmof\n</code></pre> LLaMP (\ud83e\udd4910 \u00b7  \u2b50 59) - A web app and Python API for multi-modal RAG framework to ground LLMs on high-fidelity materials informatics. An.. <code>BSD-3</code> <code>materials-discovery</code> <code>cheminformatics</code> <code>generative</code> <code>MD</code> <code>multimodal</code> <code>language-models</code> <code>Python</code> <code>general-tool</code>  - [GitHub](https://github.com/chiang-yuan/llamp) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 7 \u00b7 \ud83d\udccb 25 - 32% open \u00b7 \u23f1\ufe0f 10.09.2024):      <pre><code>git clone https://github.com/chiang-yuan/llamp\n</code></pre> MoLFormer (\ud83e\udd499 \u00b7  \u2b50 250 \u00b7 \ud83d\udca4) - Repository for MolFormer. <code>Apache-2</code> <code>transformer</code> <code>pretrained</code> <code>drug-discovery</code>  - [GitHub](https://github.com/IBM/molformer) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 41 \u00b7 \ud83d\udccb 19 - 47% open \u00b7 \u23f1\ufe0f 16.10.2023):      <pre><code>git clone https://github.com/IBM/molformer\n</code></pre> MolSkill (\ud83e\udd499 \u00b7  \u2b50 100 \u00b7 \ud83d\udca4) - Extracting medicinal chemistry intuition via preference machine learning. <code>MIT</code> <code>drug-discovery</code> <code>recommender</code>  - [GitHub](https://github.com/microsoft/molskill) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 9 \u00b7 \ud83d\udccb 6 - 33% open \u00b7 \u23f1\ufe0f 31.10.2023):      <pre><code>git clone https://github.com/microsoft/molskill\n</code></pre> - [Conda](https://anaconda.org/msr-ai4science/molskill) (\ud83d\udce5 300 \u00b7 \u23f1\ufe0f 18.06.2023):     <pre><code>conda install -c msr-ai4science molskill\n</code></pre> chemlift (\ud83e\udd497 \u00b7  \u2b50 31 \u00b7 \ud83d\udca4) - Language-interfaced fine-tuning for chemistry. <code>MIT</code>  - [GitHub](https://github.com/lamalab-org/chemlift) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 3 \u00b7 \ud83d\udccb 18 - 61% open \u00b7 \u23f1\ufe0f 14.10.2023):      <pre><code>git clone https://github.com/lamalab-org/chemlift\n</code></pre> LLM-Prop (\ud83e\udd497 \u00b7  \u2b50 27) - A repository for the LLM-Prop implementation. <code>MIT</code>  - [GitHub](https://github.com/vertaix/LLM-Prop) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 5 \u00b7 \ud83d\udccb 2 - 50% open \u00b7 \u23f1\ufe0f 26.04.2024):      <pre><code>git clone https://github.com/vertaix/LLM-Prop\n</code></pre> crystal-text-llm (\ud83e\udd495 \u00b7  \u2b50 67) - Large language models to generate stable crystals. <code>CC-BY-NC-4.0</code> <code>materials-discovery</code>  - [GitHub](https://github.com/facebookresearch/crystal-text-llm) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 12 \u00b7 \ud83d\udccb 9 - 77% open \u00b7 \u23f1\ufe0f 18.06.2024):      <pre><code>git clone https://github.com/facebookresearch/crystal-text-llm\n</code></pre> SciBot (\ud83e\udd495 \u00b7  \u2b50 28) - SciBot is a simple demo of building a domain-specific chatbot for science. <code>Unlicensed</code> <code>ai-agent</code>  - [GitHub](https://github.com/CFN-softbio/SciBot) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 8 \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 03.09.2024):      <pre><code>git clone https://github.com/CFN-softbio/SciBot\n</code></pre> MAPI_LLM (\ud83e\udd495 \u00b7  \u2b50 9) - A LLM application developed during the LLM March MADNESS Hackathon https://doi.org/10.1039/D3DD00113J. <code>MIT</code> <code>ai-agent</code> <code>dataset</code>  - [GitHub](https://github.com/maykcaldas/MAPI_LLM) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 2 \u00b7 \u23f1\ufe0f 11.04.2024):      <pre><code>git clone https://github.com/maykcaldas/MAPI_LLM\n</code></pre> Cephalo (\ud83e\udd495 \u00b7  \u2b50 6 \u00b7 \ud83d\udc23) - Multimodal Vision-Language Models for Bio-Inspired Materials Analysis and Design. <code>Apache-2</code> <code>generative</code> <code>multimodal</code> <code>pretrained</code>  - [GitHub](https://github.com/lamm-mit/Cephalo) (\ud83d\udd00 1 \u00b7 \u23f1\ufe0f 23.07.2024):      <pre><code>git clone https://github.com/lamm-mit/Cephalo\n</code></pre> Show 6 hidden projects...  - ChemDataExtractor (\ud83e\udd4716 \u00b7  \u2b50 300 \u00b7 \ud83d\udc80) - Automatically extract chemical information from scientific documents. <code>MIT</code> <code>literature-data</code> - mat2vec (\ud83e\udd4812 \u00b7  \u2b50 620 \u00b7 \ud83d\udc80) - Supplementary Materials for Tshitoyan et al. Unsupervised word embeddings capture latent knowledge from materials.. <code>MIT</code> <code>rep-learn</code> - nlcc (\ud83e\udd4812 \u00b7  \u2b50 44 \u00b7 \ud83d\udc80) - Natural language computational chemistry command line interface. <code>MIT</code> <code>single-paper</code> - BERT-PSIE-TC (\ud83e\udd495 \u00b7  \u2b50 12 \u00b7 \ud83d\udc80) - A dataset of Curie temperatures automatically extracted from scientific literature with the use of the BERT-PSIE.. <code>MIT</code> <code>magnetism</code> - ChemDataWriter (\ud83e\udd494 \u00b7  \u2b50 14 \u00b7 \ud83d\udca4) - ChemDataWriter is a transformer-based library for automatically generating research books in the chemistry area. <code>MIT</code> <code>literature-data</code> - CatBERTa (\ud83e\udd493 \u00b7  \u2b50 19) - Large Language Model for Catalyst Property Prediction. <code>Unlicensed</code> <code>transformer</code> <code>catalysis</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#materials-discovery","title":"Materials Discovery","text":"<p>Projects that implement materials discovery methods using atomistic ML.</p> <p>\ud83d\udd17\u00a0MatterGen  - A generative model for inorganic materials design https://doi.org/10.48550/arXiv.2312.03687. <code>generative</code> <code>proprietary</code></p> aviary (\ud83e\udd4715 \u00b7  \u2b50 47) - The Wren sits on its Roost in the Aviary. <code>MIT</code>  - [GitHub](https://github.com/CompRhys/aviary) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 11 \u00b7 \ud83d\udccb 29 - 13% open \u00b7 \u23f1\ufe0f 10.09.2024):      <pre><code>git clone https://github.com/CompRhys/aviary\n</code></pre> BOSS (\ud83e\udd4713 \u00b7  \u2b50 20) - Bayesian Optimization Structure Search (BOSS). <code>Apache-2</code> <code>probabilistic</code>  - [PyPi](https://pypi.org/project/aalto-boss) (\ud83d\udce5 4K / month \u00b7 \u23f1\ufe0f 20.07.2024):     <pre><code>pip install aalto-boss\n</code></pre> - [GitLab](https://gitlab.com/cest-group/boss) (\ud83d\udd00 11 \u00b7 \ud83d\udccb 30 - 3% open \u00b7 \u23f1\ufe0f 20.07.2024):      <pre><code>git clone https://gitlab.com/cest-group/boss\n</code></pre> AGOX (\ud83e\udd4810 \u00b7  \u2b50 13) - AGOX is a package for global optimization of atomic system using e.g. the energy calculated from density functional.. <code>GPL-3.0</code> <code>structure-optimization</code>  - [PyPi](https://pypi.org/project/agox) (\ud83d\udce5 230 / month \u00b7 \u23f1\ufe0f 26.08.2024):     <pre><code>pip install agox\n</code></pre> - [GitLab](https://gitlab.com/agox/agox) (\ud83d\udd00 5 \u00b7 \ud83d\udccb 24 - 54% open \u00b7 \u23f1\ufe0f 26.08.2024):      <pre><code>git clone https://gitlab.com/agox/agox\n</code></pre> Materials Discovery: GNoME (\ud83e\udd489 \u00b7  \u2b50 870) - Graph Networks for Materials Science (GNoME) and dataset of 381,000 novel stable materials. <code>Apache-2</code> <code>UIP</code> <code>datasets</code> <code>rep-learn</code> <code>proprietary</code>  - [GitHub](https://github.com/google-deepmind/materials_discovery) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udccb 22 - 81% open \u00b7 \u23f1\ufe0f 04.09.2024):      <pre><code>git clone https://github.com/google-deepmind/materials_discovery\n</code></pre> CSPML (crystal structure prediction with machine learning-based element substitution) (\ud83e\udd487 \u00b7  \u2b50 20) - Original implementation of CSPML. <code>MIT</code> <code>structure-prediction</code>  - [GitHub](https://github.com/Minoru938/CSPML) (\ud83d\udd00 9 \u00b7 \ud83d\udccb 3 - 66% open \u00b7 \u23f1\ufe0f 25.09.2024):      <pre><code>git clone https://github.com/minoru938/cspml\n</code></pre> Show 6 hidden projects...  - Computational Autonomy for Materials Discovery (CAMD) (\ud83e\udd496 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Agent-based sequential learning software for materials discovery. <code>Apache-2</code> - MAGUS (\ud83e\udd494 \u00b7  \u2b50 60 \u00b7 \ud83d\udc80) - Machine learning And Graph theory assisted Universal structure Searcher. <code>Unlicensed</code> <code>structure-prediction</code> <code>active-learning</code> - SPINNER (\ud83e\udd494 \u00b7  \u2b50 12 \u00b7 \ud83d\udc80) - SPINNER (Structure Prediction of Inorganic crystals using Neural Network potentials with Evolutionary and Random.. <code>GPL-3.0</code> <code>C++</code> <code>structure-prediction</code> - ML-atomate (\ud83e\udd494 \u00b7  \u2b50 4 \u00b7 \ud83d\udca4) - Machine learning-assisted Atomate code for autonomous computational materials screening. <code>GPL-3.0</code> <code>active-learning</code> <code>workflows</code> - closed-loop-acceleration-benchmarks (\ud83e\udd494 \u00b7 \ud83d\udc80) - Data and scripts in support of the publication By how much can closed-loop frameworks accelerate computational.. <code>MIT</code> <code>materials-discovery</code> <code>active-learning</code> <code>single-paper</code> - sl_discovery (\ud83e\udd493 \u00b7  \u2b50 5 \u00b7 \ud83d\udc80) - Data processing and models related to Quantifying the performance of machine learning models in materials discovery. <code>Apache-2</code> <code>materials-discovery</code> <code>single-paper</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#mathematical-tools","title":"Mathematical tools","text":"<p>Projects that implement mathematical objects used in atomistic machine learning.</p> KFAC-JAX (\ud83e\udd4719 \u00b7  \u2b50 230) - Second Order Optimization and Curvature Estimation with K-FAC in JAX. <code>Apache-2</code>  - [GitHub](https://github.com/google-deepmind/kfac-jax) (\ud83d\udc68\u200d\ud83d\udcbb 15 \u00b7 \ud83d\udd00 18 \u00b7 \ud83d\udce6 10 \u00b7 \ud83d\udccb 19 - 47% open \u00b7 \u23f1\ufe0f 25.09.2024):      <pre><code>git clone https://github.com/google-deepmind/kfac-jax\n</code></pre> - [PyPi](https://pypi.org/project/kfac-jax) (\ud83d\udce5 1K / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 04.04.2024):     <pre><code>pip install kfac-jax\n</code></pre> gpax (\ud83e\udd4717 \u00b7  \u2b50 200) - Gaussian Processes for Experimental Sciences. <code>MIT</code> <code>probabilistic</code> <code>active-learning</code>  - [GitHub](https://github.com/ziatdinovmax/gpax) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 24 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 40 - 20% open \u00b7 \u23f1\ufe0f 21.05.2024):      <pre><code>git clone https://github.com/ziatdinovmax/gpax\n</code></pre> - [PyPi](https://pypi.org/project/gpax) (\ud83d\udce5 320 / month \u00b7 \u23f1\ufe0f 20.03.2024):     <pre><code>pip install gpax\n</code></pre> SpheriCart (\ud83e\udd4717 \u00b7  \u2b50 69) - Multi-language library for the calculation of spherical harmonics in Cartesian coordinates. <code>MIT</code>  - [GitHub](https://github.com/lab-cosmo/sphericart) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 11 \u00b7 \ud83d\udce5 85 \u00b7 \ud83d\udce6 3 \u00b7 \ud83d\udccb 41 - 56% open \u00b7 \u23f1\ufe0f 07.09.2024):      <pre><code>git clone https://github.com/lab-cosmo/sphericart\n</code></pre> - [PyPi](https://pypi.org/project/sphericart) (\ud83d\udce5 1K / month \u00b7 \u23f1\ufe0f 04.09.2024):     <pre><code>pip install sphericart\n</code></pre> Polynomials4ML.jl (\ud83e\udd4813 \u00b7  \u2b50 12) - Polynomials for ML: fast evaluation, batching, differentiation. <code>MIT</code> <code>Julia</code>  - [GitHub](https://github.com/ACEsuit/Polynomials4ML.jl) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 5 \u00b7 \ud83d\udccb 51 - 33% open \u00b7 \u23f1\ufe0f 22.06.2024):      <pre><code>git clone https://github.com/ACEsuit/Polynomials4ML.jl\n</code></pre> GElib (\ud83e\udd498 \u00b7  \u2b50 19) - C++/CUDA library for SO(3) equivariant operations. <code>MPL-2.0</code> <code>C++</code>  - [GitHub](https://github.com/risi-kondor/GElib) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 3 \u00b7 \ud83d\udccb 8 - 50% open \u00b7 \u23f1\ufe0f 27.07.2024):      <pre><code>git clone https://github.com/risi-kondor/GElib\n</code></pre> EquivariantOperators.jl (\ud83e\udd496 \u00b7  \u2b50 19 \u00b7 \ud83d\udca4) - This package is deprecated. Functionalities are migrating to Porcupine.jl. <code>MIT</code> <code>Julia</code>  - [GitHub](https://github.com/aced-differentiate/EquivariantOperators.jl) (\u23f1\ufe0f 27.09.2023):      <pre><code>git clone https://github.com/aced-differentiate/EquivariantOperators.jl\n</code></pre> COSMO Toolbox (\ud83e\udd496 \u00b7  \u2b50 7) - Assorted libraries and utilities for atomistic simulation analysis. <code>Unlicensed</code> <code>C++</code>  - [GitHub](https://github.com/lab-cosmo/toolbox) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 6 \u00b7 \u23f1\ufe0f 19.03.2024):      <pre><code>git clone https://github.com/lab-cosmo/toolbox\n</code></pre> Show 4 hidden projects...  - lie-nn (\ud83e\udd489 \u00b7  \u2b50 26 \u00b7 \ud83d\udc80) - Tools for building equivariant polynomials on reductive Lie groups. <code>MIT</code> <code>rep-learn</code> - cnine (\ud83e\udd496 \u00b7  \u2b50 4) - Cnine tensor library. <code>Unlicensed</code> <code>C++</code> - torch_spex (\ud83e\udd493 \u00b7  \u2b50 3) - Spherical expansions in PyTorch. <code>Unlicensed</code> - Wigner Kernels (\ud83e\udd491 \u00b7  \u2b50 2 \u00b7 \ud83d\udc80) - Collection of programs to benchmark Wigner kernels. <code>Unlicensed</code> <code>benchmarking</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#molecular-dynamics","title":"Molecular Dynamics","text":"<p>Projects that simplify the integration of molecular dynamics and atomistic machine learning.</p> JAX-MD (\ud83e\udd4726 \u00b7  \u2b50 1.2K) - Differentiable, Hardware Accelerated, Molecular Dynamics. <code>Apache-2</code>  - [GitHub](https://github.com/jax-md/jax-md) (\ud83d\udc68\u200d\ud83d\udcbb 34 \u00b7 \ud83d\udd00 190 \u00b7 \ud83d\udce6 56 \u00b7 \ud83d\udccb 150 - 46% open \u00b7 \u23f1\ufe0f 05.09.2024):      <pre><code>git clone https://github.com/jax-md/jax-md\n</code></pre> - [PyPi](https://pypi.org/project/jax-md) (\ud83d\udce5 3.3K / month \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 09.08.2023):     <pre><code>pip install jax-md\n</code></pre> FitSNAP (\ud83e\udd4818 \u00b7  \u2b50 150) - Software for generating machine-learning interatomic potentials for LAMMPS. <code>GPL-2.0</code>  - [GitHub](https://github.com/FitSNAP/FitSNAP) (\ud83d\udc68\u200d\ud83d\udcbb 24 \u00b7 \ud83d\udd00 51 \u00b7 \ud83d\udce5 11 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 73 - 21% open \u00b7 \u23f1\ufe0f 19.09.2024):      <pre><code>git clone https://github.com/FitSNAP/FitSNAP\n</code></pre> - [Conda](https://anaconda.org/conda-forge/fitsnap3) (\ud83d\udce5 8.4K \u00b7 \u23f1\ufe0f 16.06.2023):     <pre><code>conda install -c conda-forge fitsnap3\n</code></pre> mlcolvar (\ud83e\udd4817 \u00b7  \u2b50 91) - A unified framework for machine learning collective variables for enhanced sampling simulations. <code>MIT</code> <code>sampling</code>  - [GitHub](https://github.com/luigibonati/mlcolvar) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 24 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 72 - 19% open \u00b7 \u23f1\ufe0f 23.09.2024):      <pre><code>git clone https://github.com/luigibonati/mlcolvar\n</code></pre> - [PyPi](https://pypi.org/project/mlcolvar) (\ud83d\udce5 190 / month \u00b7 \u23f1\ufe0f 12.06.2024):     <pre><code>pip install mlcolvar\n</code></pre> openmm-torch (\ud83e\udd4816 \u00b7  \u2b50 180) - OpenMM plugin to define forces with neural networks. <code>Custom</code> <code>ML-IAP</code> <code>C++</code>  - [GitHub](https://github.com/openmm/openmm-torch) (\ud83d\udc68\u200d\ud83d\udcbb 8 \u00b7 \ud83d\udd00 23 \u00b7 \ud83d\udccb 92 - 28% open \u00b7 \u23f1\ufe0f 23.08.2024):      <pre><code>git clone https://github.com/openmm/openmm-torch\n</code></pre> - [Conda](https://anaconda.org/conda-forge/openmm-torch) (\ud83d\udce5 460K \u00b7 \u23f1\ufe0f 03.06.2024):     <pre><code>conda install -c conda-forge openmm-torch\n</code></pre> OpenMM-ML (\ud83e\udd4913 \u00b7  \u2b50 80) - High level API for using machine learning models in OpenMM simulations. <code>MIT</code> <code>ML-IAP</code>  - [GitHub](https://github.com/openmm/openmm-ml) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 19 \u00b7 \ud83d\udccb 55 - 36% open \u00b7 \u23f1\ufe0f 06.08.2024):      <pre><code>git clone https://github.com/openmm/openmm-ml\n</code></pre> - [Conda](https://anaconda.org/conda-forge/openmm-ml) (\ud83d\udce5 5.2K \u00b7 \u23f1\ufe0f 07.06.2024):     <pre><code>conda install -c conda-forge openmm-ml\n</code></pre> pair_nequip (\ud83e\udd4910 \u00b7  \u2b50 41) - LAMMPS pair style for NequIP. <code>MIT</code> <code>ML-IAP</code> <code>rep-learn</code>  - [GitHub](https://github.com/mir-group/pair_nequip) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 12 \u00b7 \ud83d\udccb 30 - 33% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/mir-group/pair_nequip\n</code></pre> PACE (\ud83e\udd4910 \u00b7  \u2b50 24 \u00b7 \ud83d\udca4) - The LAMMPS ML-IAP `pair_style pace`, aka Atomic Cluster Expansion (ACE), aka ML-PACE,.. <code>Custom</code>  - [GitHub](https://github.com/ICAMS/lammps-user-pace) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 10 \u00b7 \ud83d\udccb 8 - 25% open \u00b7 \u23f1\ufe0f 27.11.2023):      <pre><code>git clone https://github.com/ICAMS/lammps-user-pace\n</code></pre> pair_allegro (\ud83e\udd498 \u00b7  \u2b50 34) - LAMMPS pair style for Allegro deep learning interatomic potentials with parallelization support. <code>MIT</code> <code>ML-IAP</code> <code>rep-learn</code>  - [GitHub](https://github.com/mir-group/pair_allegro) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 8 \u00b7 \ud83d\udccb 30 - 40% open \u00b7 \u23f1\ufe0f 05.06.2024):      <pre><code>git clone https://github.com/mir-group/pair_allegro\n</code></pre> SOMD (\ud83e\udd495 \u00b7  \u2b50 12) - Molecular dynamics package designed for the SIESTA DFT code. <code>AGPL-3.0</code> <code>ML-IAP</code> <code>active-learning</code>  - [GitHub](https://github.com/initqp/somd) (\ud83d\udd00 2 \u00b7 \u23f1\ufe0f 17.08.2024):      <pre><code>git clone https://github.com/initqp/somd\n</code></pre> Show 1 hidden projects...  - interface-lammps-mlip-3 (\ud83e\udd493 \u00b7  \u2b50 5 \u00b7 \ud83d\udc80) - An interface between LAMMPS and MLIP (version 3). <code>GPL-2.0</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#reinforcement-learning","title":"Reinforcement Learning","text":"<p>Projects that focus on reinforcement learning for atomistic ML.</p> Show 2 hidden projects...  - ReLeaSE (\ud83e\udd4711 \u00b7  \u2b50 350 \u00b7 \ud83d\udc80) - Deep Reinforcement Learning for de-novo Drug Design. <code>MIT</code> <code>drug-discovery</code> - CatGym (\ud83e\udd496 \u00b7  \u2b50 11 \u00b7 \ud83d\udc80) - Surface segregation using Deep Reinforcement Learning. <code>GPL</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#representation-engineering","title":"Representation Engineering","text":"<p>Projects that offer implementations of representations aka descriptors, fingerprints of atomistic systems, and models built with them, aka feature engineering.</p> cdk (\ud83e\udd4726 \u00b7  \u2b50 490) - The Chemistry Development Kit. <code>LGPL-2.1</code> <code>cheminformatics</code> <code>Java</code>  - [GitHub](https://github.com/cdk/cdk) (\ud83d\udc68\u200d\ud83d\udcbb 160 \u00b7 \ud83d\udd00 160 \u00b7 \ud83d\udce5 22K \u00b7 \ud83d\udccb 290 - 10% open \u00b7 \u23f1\ufe0f 19.09.2024):      <pre><code>git clone https://github.com/cdk/cdk\n</code></pre> - [Maven](https://search.maven.org/artifact/org.openscience.cdk/cdk-bundle) (\ud83d\udce6 16 \u00b7 \u23f1\ufe0f 21.08.2023):     <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.openscience.cdk&lt;/groupId&gt;\n    &lt;artifactId&gt;cdk-bundle&lt;/artifactId&gt;\n    &lt;version&gt;[VERSION]&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> DScribe (\ud83e\udd4725 \u00b7  \u2b50 400) - DScribe is a python package for creating machine learning descriptors for atomistic systems. <code>Apache-2</code>  - [GitHub](https://github.com/SINGROUP/dscribe) (\ud83d\udc68\u200d\ud83d\udcbb 18 \u00b7 \ud83d\udd00 87 \u00b7 \ud83d\udce6 200 \u00b7 \ud83d\udccb 100 - 11% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/SINGROUP/dscribe\n</code></pre> - [PyPi](https://pypi.org/project/dscribe) (\ud83d\udce5 22K / month \u00b7 \ud83d\udce6 35 \u00b7 \u23f1\ufe0f 28.05.2024):     <pre><code>pip install dscribe\n</code></pre> - [Conda](https://anaconda.org/conda-forge/dscribe) (\ud83d\udce5 140K \u00b7 \u23f1\ufe0f 28.05.2024):     <pre><code>conda install -c conda-forge dscribe\n</code></pre> MODNet (\ud83e\udd4716 \u00b7  \u2b50 77) - MODNet: a framework for machine learning materials properties. <code>MIT</code> <code>pretrained</code> <code>small-data</code> <code>transfer-learning</code>  - [GitHub](https://github.com/ppdebreuck/modnet) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 32 \u00b7 \ud83d\udce6 9 \u00b7 \ud83d\udccb 53 - 49% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/ppdebreuck/modnet\n</code></pre> SISSO (\ud83e\udd4814 \u00b7  \u2b50 240) - A data-driven method combining symbolic regression and compressed sensing for accurate &amp; interpretable models. <code>Apache-2</code> <code>Fortran</code>  - [GitHub](https://github.com/rouyang2017/SISSO) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 77 \u00b7 \ud83d\udccb 76 - 23% open \u00b7 \u23f1\ufe0f 20.09.2024):      <pre><code>git clone https://github.com/rouyang2017/SISSO\n</code></pre> GlassPy (\ud83e\udd4814 \u00b7  \u2b50 26 \u00b7 \ud83d\udca4) - Python module for scientists working with glass materials. <code>GPL-3.0</code>  - [GitHub](https://github.com/drcassar/glasspy) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 7 \u00b7 \ud83d\udce6 6 \u00b7 \ud83d\udccb 13 - 53% open \u00b7 \u23f1\ufe0f 21.01.2024):      <pre><code>git clone https://github.com/drcassar/glasspy\n</code></pre> - [PyPi](https://pypi.org/project/glasspy) (\ud83d\udce5 760 / month \u00b7 \u23f1\ufe0f 05.09.2024):     <pre><code>pip install glasspy\n</code></pre> Librascal (\ud83e\udd4813 \u00b7  \u2b50 80 \u00b7 \ud83d\udca4) - A scalable and versatile library to generate representations for atomic-scale learning. <code>LGPL-2.1</code>  - [GitHub](https://github.com/lab-cosmo/librascal) (\ud83d\udc68\u200d\ud83d\udcbb 30 \u00b7 \ud83d\udd00 20 \u00b7 \ud83d\udccb 250 - 46% open \u00b7 \u23f1\ufe0f 30.11.2023):      <pre><code>git clone https://github.com/lab-cosmo/librascal\n</code></pre> Rascaline (\ud83e\udd4812 \u00b7  \u2b50 44) - Computing representations for atomistic machine learning. <code>BSD-3</code> <code>Rust</code> <code>C++</code>  - [GitHub](https://github.com/Luthaf/rascaline) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 13 \u00b7 \ud83d\udccb 69 - 46% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/Luthaf/rascaline\n</code></pre> fplib (\ud83e\udd4910 \u00b7  \u2b50 7 \u00b7 \ud83d\udcc8) - libfp is a library for calculating crystalline fingerprints and measuring similarities of materials. <code>MIT</code> <code>C-lang</code> <code>single-paper</code>  - [GitHub](https://github.com/Rutgers-ZRG/libfp) (\ud83d\udd00 1 \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/zhuligs/fplib\n</code></pre> NICE (\ud83e\udd497 \u00b7  \u2b50 12) - NICE (N-body Iteratively Contracted Equivariants) is a set of tools designed for the calculation of invariant and.. <code>MIT</code>  - [GitHub](https://github.com/lab-cosmo/nice) (\ud83d\udc68\u200d\ud83d\udcbb 4 \u00b7 \ud83d\udd00 3 \u00b7 \ud83d\udccb 3 - 66% open \u00b7 \u23f1\ufe0f 15.04.2024):      <pre><code>git clone https://github.com/lab-cosmo/nice\n</code></pre> SA-GPR (\ud83e\udd496 \u00b7  \u2b50 19) - Public repository for symmetry-adapted Gaussian Process Regression (SA-GPR). <code>LGPL-3.0</code> <code>C-lang</code>  - [GitHub](https://github.com/dilkins/TENSOAP) (\ud83d\udc68\u200d\ud83d\udcbb 5 \u00b7 \ud83d\udd00 13 \u00b7 \ud83d\udccb 7 - 28% open \u00b7 \u23f1\ufe0f 23.07.2024):      <pre><code>git clone https://github.com/dilkins/TENSOAP\n</code></pre> milad (\ud83e\udd495 \u00b7  \u2b50 30) - Moment Invariants Local Atomic Descriptor. <code>GPL-3.0</code> <code>generative</code>  - [GitHub](https://github.com/muhrin/milad) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 1 \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 20.08.2024):      <pre><code>git clone https://github.com/muhrin/milad\n</code></pre> Show 14 hidden projects...  - CatLearn (\ud83e\udd4716 \u00b7  \u2b50 100 \u00b7 \ud83d\udc80) -  <code>GPL-3.0</code> <code>surface-science</code> - CBFV (\ud83e\udd4812 \u00b7  \u2b50 25 \u00b7 \ud83d\udc80) - Tool to quickly create a composition-based feature vector. <code>Unlicensed</code> - BenchML (\ud83e\udd4812 \u00b7  \u2b50 15 \u00b7 \ud83d\udc80) - ML benchmarking and pipeling framework. <code>Apache-2</code> <code>benchmarking</code> - cmlkit (\ud83e\udd4911 \u00b7  \u2b50 34 \u00b7 \ud83d\udc80) - tools for machine learning in condensed matter physics and quantum chemistry. <code>MIT</code> <code>benchmarking</code> - SkipAtom (\ud83e\udd499 \u00b7  \u2b50 24 \u00b7 \ud83d\udc80) - Distributed representations of atoms, inspired by the Skip-gram model. <code>MIT</code> - SOAPxx (\ud83e\udd496 \u00b7  \u2b50 7 \u00b7 \ud83d\udc80) - A SOAP implementation. <code>GPL-2.0</code> <code>C++</code> - soap_turbo (\ud83e\udd496 \u00b7  \u2b50 5 \u00b7 \ud83d\udc80) - soap_turbo comprises a series of libraries to be used in combination with QUIP/GAP and TurboGAP. <code>Custom</code> <code>Fortran</code> - pyLODE (\ud83e\udd496 \u00b7  \u2b50 3 \u00b7 \ud83d\udc80) - Pythonic implementation of LOng Distance Equivariants. <code>Apache-2</code> <code>electrostatics</code> - AMP (\ud83e\udd496 \u00b7 \ud83d\udc80) - Amp is an open-source package designed to easily bring machine-learning to atomistic calculations. <code>Unlicensed</code> - MXenes4HER (\ud83e\udd495 \u00b7  \u2b50 6 \u00b7 \ud83d\udc80) - Predicting hydrogen evolution (HER) activity over 4500 MXene materials https://doi.org/10.1039/D3TA00344B. <code>GPL-3.0</code> <code>materials-discovery</code> <code>catalysis</code> <code>scikit-learn</code> <code>single-paper</code> - SISSO++ (\ud83e\udd495 \u00b7  \u2b50 3 \u00b7 \ud83d\udc80) - C++ Implementation of SISSO with python bindings. <code>Apache-2</code> <code>C++</code> - automl-materials (\ud83e\udd494 \u00b7  \u2b50 5 \u00b7 \ud83d\udc80) - AutoML for Regression Tasks on Small Tabular Data in Materials Design. <code>MIT</code> <code>autoML</code> <code>benchmarking</code> <code>single-paper</code> - magnetism-prediction (\ud83e\udd494 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - DFT-aided Machine Learning Search for Magnetism in Fe-based Bimetallic Chalcogenides. <code>Apache-2</code> <code>magnetism</code> <code>single-paper</code> - ML-for-CurieTemp-Predictions (\ud83e\udd493 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Machine Learning Predictions of High-Curie-Temperature Materials. <code>MIT</code> <code>single-paper</code> <code>magnetism</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#representation-learning","title":"Representation Learning","text":"<p>General models that learn a representations aka embeddings of atomistic systems, such as message-passing neural networks (MPNN).</p> Deep Graph Library (DGL) (\ud83e\udd4739 \u00b7  \u2b50 13K) - Python package built to ease deep learning on graph, on top of existing DL frameworks. <code>Apache-2</code>  - [GitHub](https://github.com/dmlc/dgl) (\ud83d\udc68\u200d\ud83d\udcbb 300 \u00b7 \ud83d\udd00 3K \u00b7 \ud83d\udce6 300 \u00b7 \ud83d\udccb 2.9K - 18% open \u00b7 \u23f1\ufe0f 25.09.2024):      <pre><code>git clone https://github.com/dmlc/dgl\n</code></pre> - [PyPi](https://pypi.org/project/dgl) (\ud83d\udce5 110K / month \u00b7 \ud83d\udce6 150 \u00b7 \u23f1\ufe0f 13.05.2024):     <pre><code>pip install dgl\n</code></pre> - [Conda](https://anaconda.org/dglteam/dgl) (\ud83d\udce5 370K \u00b7 \u23f1\ufe0f 03.09.2024):     <pre><code>conda install -c dglteam dgl\n</code></pre> PyG Models (\ud83e\udd4735 \u00b7  \u2b50 21K) - Representation learning models implemented in PyTorch Geometric. <code>MIT</code> <code>general-ml</code>  - [GitHub](https://github.com/pyg-team/pytorch_geometric) (\ud83d\udc68\u200d\ud83d\udcbb 520 \u00b7 \ud83d\udd00 3.6K \u00b7 \ud83d\udce6 6.5K \u00b7 \ud83d\udccb 3.7K - 27% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/pyg-team/pytorch_geometric\n</code></pre> e3nn (\ud83e\udd4728 \u00b7  \u2b50 950) - A modular framework for neural networks with Euclidean symmetry. <code>MIT</code>  - [GitHub](https://github.com/e3nn/e3nn) (\ud83d\udc68\u200d\ud83d\udcbb 31 \u00b7 \ud83d\udd00 140 \u00b7 \ud83d\udce6 300 \u00b7 \ud83d\udccb 160 - 14% open \u00b7 \u23f1\ufe0f 25.08.2024):      <pre><code>git clone https://github.com/e3nn/e3nn\n</code></pre> - [PyPi](https://pypi.org/project/e3nn) (\ud83d\udce5 94K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 13.04.2022):     <pre><code>pip install e3nn\n</code></pre> - [Conda](https://anaconda.org/conda-forge/e3nn) (\ud83d\udce5 22K \u00b7 \u23f1\ufe0f 18.06.2023):     <pre><code>conda install -c conda-forge e3nn\n</code></pre> SchNetPack (\ud83e\udd4728 \u00b7  \u2b50 770) - SchNetPack - Deep Neural Networks for Atomistic Systems. <code>MIT</code>  - [GitHub](https://github.com/atomistic-machine-learning/schnetpack) (\ud83d\udc68\u200d\ud83d\udcbb 36 \u00b7 \ud83d\udd00 210 \u00b7 \ud83d\udce6 90 \u00b7 \ud83d\udccb 250 - 2% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/atomistic-machine-learning/schnetpack\n</code></pre> - [PyPi](https://pypi.org/project/schnetpack) (\ud83d\udce5 1.4K / month \u00b7 \ud83d\udce6 4 \u00b7 \u23f1\ufe0f 05.09.2024):     <pre><code>pip install schnetpack\n</code></pre> MatGL (Materials Graph Library) (\ud83e\udd4724 \u00b7  \u2b50 250) - Graph deep learning library for materials. <code>BSD-3</code> <code>multifidelity</code>  - [GitHub](https://github.com/materialsvirtuallab/matgl) (\ud83d\udc68\u200d\ud83d\udcbb 17 \u00b7 \ud83d\udd00 59 \u00b7 \ud83d\udce6 46 \u00b7 \ud83d\udccb 97 - 7% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/materialsvirtuallab/matgl\n</code></pre> - [PyPi](https://pypi.org/project/m3gnet) (\ud83d\udce5 1.7K / month \u00b7 \ud83d\udce6 5 \u00b7 \u23f1\ufe0f 17.11.2022):     <pre><code>pip install m3gnet\n</code></pre> e3nn-jax (\ud83e\udd4822 \u00b7  \u2b50 180) - jax library for E3 Equivariant Neural Networks. <code>Apache-2</code>  - [GitHub](https://github.com/e3nn/e3nn-jax) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 18 \u00b7 \ud83d\udce6 38 \u00b7 \ud83d\udccb 22 - 4% open \u00b7 \u23f1\ufe0f 14.08.2024):      <pre><code>git clone https://github.com/e3nn/e3nn-jax\n</code></pre> - [PyPi](https://pypi.org/project/e3nn-jax) (\ud83d\udce5 3.4K / month \u00b7 \ud83d\udce6 13 \u00b7 \u23f1\ufe0f 14.08.2024):     <pre><code>pip install e3nn-jax\n</code></pre> NVIDIA Deep Learning Examples for Tensor Cores (\ud83e\udd4821 \u00b7  \u2b50 13K) - State-of-the-Art Deep Learning scripts organized by models - easy to train and deploy with reproducible accuracy and.. <code>Custom</code> <code>educational</code> <code>drug-discovery</code>  - [GitHub](https://github.com/NVIDIA/DeepLearningExamples) (\ud83d\udc68\u200d\ud83d\udcbb 120 \u00b7 \ud83d\udd00 3.1K \u00b7 \ud83d\udccb 880 - 35% open \u00b7 \u23f1\ufe0f 04.04.2024):      <pre><code>git clone https://github.com/NVIDIA/DeepLearningExamples\n</code></pre> DIG: Dive into Graphs (\ud83e\udd4821 \u00b7  \u2b50 1.9K \u00b7 \ud83d\udca4) - A library for graph deep learning research. <code>GPL-3.0</code>  - [GitHub](https://github.com/divelab/DIG) (\ud83d\udc68\u200d\ud83d\udcbb 50 \u00b7 \ud83d\udd00 280 \u00b7 \ud83d\udccb 210 - 16% open \u00b7 \u23f1\ufe0f 04.02.2024):      <pre><code>git clone https://github.com/divelab/DIG\n</code></pre> - [PyPi](https://pypi.org/project/dive-into-graphs) (\ud83d\udce5 540 / month \u00b7 \u23f1\ufe0f 27.06.2022):     <pre><code>pip install dive-into-graphs\n</code></pre> ALIGNN (\ud83e\udd4821 \u00b7  \u2b50 220) - Atomistic Line Graph Neural Network https://scholar.google.com/citations?user=9Q-tNnwAAAAJ&amp;hl=en. <code>Custom</code>  - [GitHub](https://github.com/usnistgov/alignn) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 79 \u00b7 \ud83d\udce6 14 \u00b7 \ud83d\udccb 64 - 62% open \u00b7 \u23f1\ufe0f 09.09.2024):      <pre><code>git clone https://github.com/usnistgov/alignn\n</code></pre> - [PyPi](https://pypi.org/project/alignn) (\ud83d\udce5 2.7K / month \u00b7 \ud83d\udce6 6 \u00b7 \u23f1\ufe0f 09.09.2024):     <pre><code>pip install alignn\n</code></pre> Uni-Mol (\ud83e\udd4818 \u00b7  \u2b50 670) - Official Repository for the Uni-Mol Series Methods. <code>MIT</code> <code>pretrained</code>  - [GitHub](https://github.com/deepmodeling/Uni-Mol) (\ud83d\udc68\u200d\ud83d\udcbb 17 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udce5 15K \u00b7 \ud83d\udccb 160 - 40% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/deepmodeling/Uni-Mol\n</code></pre> kgcnn (\ud83e\udd4818 \u00b7  \u2b50 110) - Graph convolutions in Keras with TensorFlow, PyTorch or Jax. <code>MIT</code>  - [GitHub](https://github.com/aimat-lab/gcnn_keras) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 29 \u00b7 \ud83d\udce6 18 \u00b7 \ud83d\udccb 86 - 13% open \u00b7 \u23f1\ufe0f 06.05.2024):      <pre><code>git clone https://github.com/aimat-lab/gcnn_keras\n</code></pre> - [PyPi](https://pypi.org/project/kgcnn) (\ud83d\udce5 570 / month \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 27.02.2024):     <pre><code>pip install kgcnn\n</code></pre> matsciml (\ud83e\udd4817 \u00b7  \u2b50 140) - Open MatSci ML Toolkit is a framework for prototyping and scaling out deep learning models for materials discovery.. <code>MIT</code> <code>workflows</code> <code>benchmarking</code>  - [GitHub](https://github.com/IntelLabs/matsciml) (\ud83d\udc68\u200d\ud83d\udcbb 12 \u00b7 \ud83d\udd00 19 \u00b7 \ud83d\udccb 59 - 35% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/IntelLabs/matsciml\n</code></pre> Graphormer (\ud83e\udd4816 \u00b7  \u2b50 2.1K) - Graphormer is a general-purpose deep learning backbone for molecular modeling. <code>MIT</code> <code>transformer</code> <code>pretrained</code>  - [GitHub](https://github.com/microsoft/Graphormer) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 330 \u00b7 \ud83d\udccb 160 - 58% open \u00b7 \u23f1\ufe0f 28.05.2024):      <pre><code>git clone https://github.com/microsoft/Graphormer\n</code></pre> escnn (\ud83e\udd4816 \u00b7  \u2b50 350) - Equivariant Steerable CNNs Library for Pytorch https://quva-lab.github.io/escnn/. <code>Custom</code>  - [GitHub](https://github.com/QUVA-Lab/escnn) (\ud83d\udc68\u200d\ud83d\udcbb 10 \u00b7 \ud83d\udd00 44 \u00b7 \ud83d\udccb 75 - 50% open \u00b7 \u23f1\ufe0f 18.09.2024):      <pre><code>git clone https://github.com/QUVA-Lab/escnn\n</code></pre> - [PyPi](https://pypi.org/project/escnn) (\ud83d\udce5 970 / month \u00b7 \ud83d\udce6 6 \u00b7 \u23f1\ufe0f 01.04.2022):     <pre><code>pip install escnn\n</code></pre> HydraGNN (\ud83e\udd4814 \u00b7  \u2b50 61) - Distributed PyTorch implementation of multi-headed graph convolutional neural networks. <code>BSD-3</code>  - [GitHub](https://github.com/ORNL/HydraGNN) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 26 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 49 - 34% open \u00b7 \u23f1\ufe0f 21.09.2024):      <pre><code>git clone https://github.com/ORNL/HydraGNN\n</code></pre> Compositionally-Restricted Attention-Based Network (CrabNet) (\ud83e\udd4813 \u00b7  \u2b50 12) - Predict materials properties using only the composition information!. <code>MIT</code>  - [GitHub](https://github.com/sparks-baird/CrabNet) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 5 \u00b7 \ud83d\udce6 13 \u00b7 \ud83d\udccb 18 - 83% open \u00b7 \u23f1\ufe0f 09.09.2024):      <pre><code>git clone https://github.com/sparks-baird/CrabNet\n</code></pre> - [PyPi](https://pypi.org/project/crabnet) (\ud83d\udce5 390 / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 10.01.2023):     <pre><code>pip install crabnet\n</code></pre> hippynn (\ud83e\udd4812 \u00b7  \u2b50 67) - python library for atomistic machine learning. <code>Custom</code> <code>workflows</code>  - [GitHub](https://github.com/lanl/hippynn) (\ud83d\udc68\u200d\ud83d\udcbb 14 \u00b7 \ud83d\udd00 23 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 18 - 33% open \u00b7 \u23f1\ufe0f 20.09.2024):      <pre><code>git clone https://github.com/lanl/hippynn\n</code></pre> Atom2Vec (\ud83e\udd4810 \u00b7  \u2b50 35 \u00b7 \ud83d\udca4) - Atom2Vec: a simple way to describe atoms for machine learning. <code>MIT</code>  - [GitHub](https://github.com/idocx/Atom2Vec) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 9 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 3 - 66% open \u00b7 \u23f1\ufe0f 23.02.2024):      <pre><code>git clone https://github.com/idocx/Atom2Vec\n</code></pre> - [PyPi](https://pypi.org/project/atom2vec) (\ud83d\udce5 93 / month \u00b7 \u23f1\ufe0f 23.02.2024):     <pre><code>pip install atom2vec\n</code></pre> FAENet (\ud83e\udd4810 \u00b7  \u2b50 33 \u00b7 \ud83d\udca4) - Frame Averaging Equivariant GNN for materials modeling. <code>MIT</code>  - [GitHub](https://github.com/vict0rsch/faenet) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 2 \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 12.10.2023):      <pre><code>git clone https://github.com/vict0rsch/faenet\n</code></pre> - [PyPi](https://pypi.org/project/faenet) (\ud83d\udce5 95 / month \u00b7 \u23f1\ufe0f 14.09.2023):     <pre><code>pip install faenet\n</code></pre> Equiformer (\ud83e\udd499 \u00b7  \u2b50 200) - [ICLR 2023 Spotlight] Equiformer: Equivariant Graph Attention Transformer for 3D Atomistic Graphs. <code>MIT</code> <code>transformer</code>  - [GitHub](https://github.com/atomicarchitects/equiformer) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 38 \u00b7 \ud83d\udccb 14 - 42% open \u00b7 \u23f1\ufe0f 18.07.2024):      <pre><code>git clone https://github.com/atomicarchitects/equiformer\n</code></pre> EquiformerV2 (\ud83e\udd499 \u00b7  \u2b50 200) - [ICLR 2024] EquiformerV2: Improved Equivariant Transformer for Scaling to Higher-Degree Representations. <code>MIT</code>  - [GitHub](https://github.com/atomicarchitects/equiformer_v2) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 26 \u00b7 \ud83d\udccb 18 - 83% open \u00b7 \u23f1\ufe0f 16.07.2024):      <pre><code>git clone https://github.com/atomicarchitects/equiformer_v2\n</code></pre> ai4material_design (\ud83e\udd499 \u00b7  \u2b50 6 \u00b7 \ud83d\udca4) - Code for Kazeev, N., Al-Maeeni, A.R., Romanov, I. et al. Sparse representation for machine learning the properties of.. <code>Apache-2</code> <code>pretrained</code> <code>material-defect</code>  - [GitHub](https://github.com/HSE-LAMBDA/ai4material_design) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 3 \u00b7 \u23f1\ufe0f 21.11.2023):      <pre><code>git clone https://github.com/HSE-LAMBDA/ai4material_design\n</code></pre> graphite (\ud83e\udd498 \u00b7  \u2b50 58) - A repository for implementing graph network models based on atomic structures. <code>MIT</code>  - [GitHub](https://github.com/LLNL/graphite) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 9 \u00b7 \ud83d\udce6 11 \u00b7 \ud83d\udccb 4 - 75% open \u00b7 \u23f1\ufe0f 08.08.2024):      <pre><code>git clone https://github.com/llnl/graphite\n</code></pre> DeeperGATGNN (\ud83e\udd498 \u00b7  \u2b50 46 \u00b7 \ud83d\udca4) - Scalable graph neural networks for materials property prediction. <code>MIT</code>  - [GitHub](https://github.com/usccolumbia/deeperGATGNN) (\ud83d\udc68\u200d\ud83d\udcbb 3 \u00b7 \ud83d\udd00 8 \u00b7 \ud83d\udccb 12 - 33% open \u00b7 \u23f1\ufe0f 19.01.2024):      <pre><code>git clone https://github.com/usccolumbia/deeperGATGNN\n</code></pre> Show 34 hidden projects...  - dgl-lifesci (\ud83e\udd4723 \u00b7  \u2b50 710 \u00b7 \ud83d\udc80) - Python package for graph neural networks in chemistry and biology. <code>Apache-2</code> - benchmarking-gnns (\ud83e\udd4814 \u00b7  \u2b50 2.5K \u00b7 \ud83d\udc80) - Repository for benchmarking graph neural networks. <code>MIT</code> <code>single-paper</code> <code>benchmarking</code> - Crystal Graph Convolutional Neural Networks (CGCNN) (\ud83e\udd4812 \u00b7  \u2b50 640 \u00b7 \ud83d\udc80) - Crystal graph convolutional neural networks for predicting material properties. <code>MIT</code> - Neural fingerprint (nfp) (\ud83e\udd4812 \u00b7  \u2b50 57 \u00b7 \ud83d\udc80) - Keras layers for end-to-end learning with rdkit and pymatgen. <code>Custom</code> - pretrained-gnns (\ud83e\udd4810 \u00b7  \u2b50 960 \u00b7 \ud83d\udc80) - Strategies for Pre-training Graph Neural Networks. <code>MIT</code> <code>pretrained</code> - GDC (\ud83e\udd4810 \u00b7  \u2b50 260 \u00b7 \ud83d\udc80) - Graph Diffusion Convolution, as proposed in Diffusion Improves Graph Learning (NeurIPS 2019). <code>MIT</code> <code>generative</code> - SE(3)-Transformers (\ud83e\udd499 \u00b7  \u2b50 480 \u00b7 \ud83d\udc80) - code for the SE3 Transformers paper: https://arxiv.org/abs/2006.10503. <code>MIT</code> <code>single-paper</code> <code>transformer</code> - GATGNN: Global Attention Graph Neural Network (\ud83e\udd499 \u00b7  \u2b50 69 \u00b7 \ud83d\udc80) - Pytorch Repository for our work: Graph convolutional neural networks with global attention for improved materials.. <code>MIT</code> - molecularGNN_smiles (\ud83e\udd498 \u00b7  \u2b50 290 \u00b7 \ud83d\udc80) - The code of a graph neural network (GNN) for molecules, which is based on learning representations of r-radius.. <code>Apache-2</code> - CGAT (\ud83e\udd498 \u00b7  \u2b50 25 \u00b7 \ud83d\udc80) - Crystal graph attention neural networks for materials prediction. <code>MIT</code> - UVVisML (\ud83e\udd498 \u00b7  \u2b50 22 \u00b7 \ud83d\udc80) - Predict optical properties of molecules with machine learning. <code>MIT</code> <code>optical-properties</code> <code>single-paper</code> <code>probabilistic</code> - T-e3nn (\ud83e\udd498 \u00b7  \u2b50 8 \u00b7 \ud83d\udc80) - Time-reversal Euclidean neural networks based on e3nn. <code>MIT</code> <code>magnetism</code> - tensorfieldnetworks (\ud83e\udd497 \u00b7  \u2b50 150 \u00b7 \ud83d\udc80) - Rotation- and translation-equivariant neural networks for 3D point clouds. <code>MIT</code> - DTNN (\ud83e\udd497 \u00b7  \u2b50 76 \u00b7 \ud83d\udc80) - Deep Tensor Neural Network. <code>MIT</code> - Cormorant (\ud83e\udd497 \u00b7  \u2b50 59 \u00b7 \ud83d\udc80) - Codebase for Cormorant Neural Networks. <code>Custom</code> - AdsorbML (\ud83e\udd497 \u00b7  \u2b50 35 \u00b7 \ud83d\udc80) -  <code>MIT</code> <code>surface-science</code> <code>single-paper</code> - escnn_jax (\ud83e\udd497 \u00b7  \u2b50 26 \u00b7 \ud83d\udc80) - Equivariant Steerable CNNs Library for Pytorch https://quva-lab.github.io/escnn/. <code>Custom</code> - ML4pXRDs (\ud83e\udd497 \u00b7 \ud83d\udc80) - Contains code to train neural networks based on simulated powder XRDs from synthetic crystals. <code>MIT</code> <code>XRD</code> <code>single-paper</code> - MACE-Layer (\ud83e\udd496 \u00b7  \u2b50 33 \u00b7 \ud83d\udc80) - Higher order equivariant graph neural networks for 3D point clouds. <code>MIT</code> - charge_transfer_nnp (\ud83e\udd496 \u00b7  \u2b50 29 \u00b7 \ud83d\udc80) - Graph neural network potential with charge transfer. <code>MIT</code> <code>electrostatics</code> - GLAMOUR (\ud83e\udd496 \u00b7  \u2b50 21 \u00b7 \ud83d\udc80) - Graph Learning over Macromolecule Representations. <code>MIT</code> <code>single-paper</code> - Autobahn (\ud83e\udd495 \u00b7  \u2b50 30 \u00b7 \ud83d\udc80) - Repository for Autobahn: Automorphism Based Graph Neural Networks. <code>MIT</code> - FieldSchNet (\ud83e\udd495 \u00b7  \u2b50 17 \u00b7 \ud83d\udc80) - Deep neural network for molecules in external fields. <code>MIT</code> - SCFNN (\ud83e\udd495 \u00b7  \u2b50 15 \u00b7 \ud83d\udc80) - Self-consistent determination of long-range electrostatics in neural network potentials. <code>MIT</code> <code>C++</code> <code>electrostatics</code> <code>single-paper</code> - CraTENet (\ud83e\udd495 \u00b7  \u2b50 13 \u00b7 \ud83d\udc80) - An attention-based deep neural network for thermoelectric transport properties. <code>MIT</code> <code>transport-phenomena</code> - EGraFFBench (\ud83e\udd495 \u00b7  \u2b50 8 \u00b7 \ud83d\udca4) -  <code>Unlicensed</code> <code>single-paper</code> <code>benchmarking</code> <code>ML-IAP</code> - Per-Site CGCNN (\ud83e\udd495 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Crystal graph convolutional neural networks for predicting material properties. <code>MIT</code> <code>pretrained</code> <code>single-paper</code> - Per-site PAiNN (\ud83e\udd495 \u00b7  \u2b50 1 \u00b7 \ud83d\udc80) - Fork of PaiNN for PerovskiteOrderingGCNNs. <code>MIT</code> <code>probabilistic</code> <code>pretrained</code> <code>single-paper</code> - Graph Transport Network (\ud83e\udd494 \u00b7  \u2b50 16 \u00b7 \ud83d\udc80) - Graph transport network (GTN), as proposed in Scalable Optimal Transport in High Dimensions for Graph Distances,.. <code>Custom</code> <code>transport-phenomena</code> - gkx: Green-Kubo Method in JAX (\ud83e\udd494 \u00b7  \u2b50 4) - Green-Kubo + JAX + MLPs = Anharmonic Thermal Conductivities Done Fast. <code>MIT</code> <code>transport-phenomena</code> - atom_by_atom (\ud83e\udd493 \u00b7  \u2b50 7 \u00b7 \ud83d\udca4) - Atom-by-atom design of metal oxide catalysts for the oxygen evolution reaction with Machine Learning. <code>Unlicensed</code> <code>surface-science</code> <code>single-paper</code> - Element encoder (\ud83e\udd493 \u00b7  \u2b50 6 \u00b7 \ud83d\udc80) - Autoencoder neural network to compress properties of atomic species into a vector representation. <code>GPL-3.0</code> <code>single-paper</code> - Point Edge Transformer (\ud83e\udd492) - Smooth, exact rotational symmetrization for deep learning on point clouds. <code>CC-BY-4.0</code> - SphericalNet (\ud83e\udd491 \u00b7  \u2b50 3 \u00b7 \ud83d\udc80) - Implementation of Clebsch-Gordan Networks (CGnet: https://arxiv.org/pdf/1806.09231.pdf) by GElib &amp; cnine libraries in.. <code>Unlicensed</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#universal-potentials","title":"Universal Potentials","text":"<p>Machine-learned interatomic potentials (ML-IAP) that have been trained on large, chemically and structural diverse datasets. For materials, this means e.g. datasets that include a majority of the periodic table.</p> <p>\ud83d\udd17\u00a0TeaNet  - Universal neural network interatomic potential inspired by iterative electronic relaxations.. <code>ML-IAP</code></p> <p>\ud83d\udd17\u00a0PreFerred Potential (PFP)  - Universal neural network potential for material discovery https://doi.org/10.1038/s41467-022-30687-9. <code>ML-IAP</code> <code>proprietary</code></p> <p>\ud83d\udd17\u00a0MatterSim  - A Deep Learning Atomistic Model Across Elements, Temperatures and Pressures https://doi.org/10.48550/arXiv.2405.04967. <code>ML-IAP</code> <code>active-learning</code> <code>proprietary</code></p> DPA-2 (\ud83e\udd4726 \u00b7  \u2b50 1.5K) - Towards a universal large atomic model for molecular and material simulation https://doi.org/10.48550/arXiv.2312.15492. <code>LGPL-3.0</code> <code>ML-IAP</code> <code>pretrained</code> <code>workflows</code> <code>datasets</code>  - [GitHub](https://github.com/deepmodeling/deepmd-kit) (\ud83d\udc68\u200d\ud83d\udcbb 69 \u00b7 \ud83d\udd00 500 \u00b7 \ud83d\udce5 40K \u00b7 \ud83d\udce6 16 \u00b7 \ud83d\udccb 780 - 12% open \u00b7 \u23f1\ufe0f 17.09.2024):      <pre><code>git clone https://github.com/deepmodeling/deepmd-kit\n</code></pre> CHGNet (\ud83e\udd4823 \u00b7  \u2b50 230) - Pretrained universal neural network potential for charge-informed atomistic modeling https://chgnet.lbl.gov. <code>Custom</code> <code>ML-IAP</code> <code>MD</code> <code>pretrained</code> <code>electrostatics</code> <code>magnetism</code> <code>structure-relaxation</code>  - [GitHub](https://github.com/CederGroupHub/chgnet) (\ud83d\udc68\u200d\ud83d\udcbb 9 \u00b7 \ud83d\udd00 62 \u00b7 \ud83d\udce6 32 \u00b7 \ud83d\udccb 59 - 5% open \u00b7 \u23f1\ufe0f 16.09.2024):      <pre><code>git clone https://github.com/CederGroupHub/chgnet\n</code></pre> - [PyPi](https://pypi.org/project/chgnet) (\ud83d\udce5 29K / month \u00b7 \ud83d\udce6 21 \u00b7 \u23f1\ufe0f 16.09.2024):     <pre><code>pip install chgnet\n</code></pre> MACE-MP (\ud83e\udd4819 \u00b7  \u2b50 460) - Pretrained foundation models for materials chemistry. <code>MIT</code> <code>ML-IAP</code> <code>pretrained</code> <code>rep-learn</code> <code>MD</code>  - [GitHub](https://github.com/ACEsuit/mace-mp) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 170 \u00b7 \ud83d\udce5 26K \u00b7 \ud83d\udccb 9 - 22% open \u00b7 \u23f1\ufe0f 24.04.2024):      <pre><code>git clone https://github.com/ACEsuit/mace-mp\n</code></pre> - [PyPi](https://pypi.org/project/mace-torch) (\ud83d\udce5 9.3K / month \u00b7 \ud83d\udce6 14 \u00b7 \u23f1\ufe0f 16.07.2024):     <pre><code>pip install mace-torch\n</code></pre> SevenNet (\ud83e\udd4915 \u00b7  \u2b50 110) - SevenNet (Scalable EquiVariance Enabled Neural Network) is a graph neural network interatomic potential package that.. <code>GPL-3.0</code> <code>ML-IAP</code> <code>MD</code> <code>pretrained</code>  - [GitHub](https://github.com/MDIL-SNU/SevenNet) (\ud83d\udc68\u200d\ud83d\udcbb 11 \u00b7 \ud83d\udd00 13 \u00b7 \ud83d\udce6 3 \u00b7 \ud83d\udccb 21 - 52% open \u00b7 \u23f1\ufe0f 18.09.2024):      <pre><code>git clone https://github.com/MDIL-SNU/SevenNet\n</code></pre> Orb Models (\ud83e\udd4914 \u00b7  \u2b50 150 \u00b7 \ud83d\udc23) - ORB forcefield models from Orbital Materials. <code>Custom</code> <code>ML-IAP</code> <code>pretrained</code>  - [GitHub](https://github.com/orbital-materials/orb-models) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 18 \u00b7 \ud83d\udce6 1 \u00b7 \ud83d\udccb 10 - 20% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/orbital-materials/orb-models\n</code></pre> - [PyPi](https://pypi.org/project/orb-models) (\ud83d\udce5 1.3K / month \u00b7 \u23f1\ufe0f 13.09.2024):     <pre><code>pip install orb-models\n</code></pre> Joint Multidomain Pre-Training (JMP) (\ud83e\udd495 \u00b7  \u2b50 38 \u00b7 \ud83d\udc23) - Code for From Molecules to Materials Pre-training Large Generalizable Models for Atomic Property Prediction. <code>CC-BY-NC-4.0</code> <code>pretrained</code> <code>ML-IAP</code> <code>general-tool</code>  - [GitHub](https://github.com/facebookresearch/JMP) (\ud83d\udc68\u200d\ud83d\udcbb 1 \u00b7 \ud83d\udd00 5 \u00b7 \u23f1\ufe0f 07.05.2024):      <pre><code>git clone https://github.com/facebookresearch/JMP\n</code></pre> Show 1 hidden projects...  - M3GNet (\ud83e\udd4819 \u00b7  \u2b50 230 \u00b7 \ud83d\udc80) - Materials graph network with 3-body interactions featuring a DFT surrogate crystal relaxer and a state-of-the-art.. <code>BSD-3</code> <code>ML-IAP</code> <code>pretrained</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#unsupervised-learning","title":"Unsupervised Learning","text":"<p>Projects that focus on unsupervised learning (USL) for atomistic ML, such as dimensionality reduction, clustering and visualization.</p> DADApy (\ud83e\udd4719 \u00b7  \u2b50 100) - Distance-based Analysis of DAta-manifolds in python. <code>Apache-2</code>  - [GitHub](https://github.com/sissa-data-science/DADApy) (\ud83d\udc68\u200d\ud83d\udcbb 20 \u00b7 \ud83d\udd00 18 \u00b7 \ud83d\udce6 8 \u00b7 \ud83d\udccb 36 - 25% open \u00b7 \u23f1\ufe0f 16.09.2024):      <pre><code>git clone https://github.com/sissa-data-science/DADApy\n</code></pre> - [PyPi](https://pypi.org/project/dadapy) (\ud83d\udce5 200 / month \u00b7 \u23f1\ufe0f 02.07.2024):     <pre><code>pip install dadapy\n</code></pre> ASAP (\ud83e\udd4811 \u00b7  \u2b50 140) - ASAP is a package that can quickly analyze and visualize datasets of crystal or molecular structures. <code>MIT</code>  - [GitHub](https://github.com/BingqingCheng/ASAP) (\ud83d\udc68\u200d\ud83d\udcbb 6 \u00b7 \ud83d\udd00 28 \u00b7 \ud83d\udce6 6 \u00b7 \ud83d\udccb 25 - 24% open \u00b7 \u23f1\ufe0f 27.06.2024):      <pre><code>git clone https://github.com/BingqingCheng/ASAP\n</code></pre> Show 5 hidden projects...  - Sketchmap (\ud83e\udd488 \u00b7  \u2b50 44 \u00b7 \ud83d\udc80) - Suite of programs to perform non-linear dimensionality reduction -- sketch-map in particular. <code>GPL-3.0</code> <code>C++</code> - Coarse-Graining-Auto-encoders (\ud83e\udd495 \u00b7  \u2b50 21 \u00b7 \ud83d\udc80) - Implementation of coarse-graining Autoencoders. <code>Unlicensed</code> <code>single-paper</code> - paper-ml-robustness-material-property (\ud83e\udd495 \u00b7  \u2b50 4 \u00b7 \ud83d\udc80) - A critical examination of robustness and generalizability of machine learning prediction of materials properties. <code>BSD-3</code> <code>datasets</code> <code>single-paper</code> - KmdPlus (\ud83e\udd494 \u00b7  \u2b50 3) - This module contains a class for treating kernel mean descriptor (KMD), and a function for generating descriptors with.. <code>MIT</code> - Descriptor Embedding and Clustering for Atomisitic-environment Framework (DECAF) ( \u2b50 2) - Provides a workflow to obtain clustering of local environments in dataset of structures. <code>Unlicensed</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#visualization","title":"Visualization","text":"<p>Projects that focus on visualization (viz.) for atomistic ML.</p> Crystal Toolkit (\ud83e\udd4723 \u00b7  \u2b50 150) - Crystal Toolkit is a framework for building web apps for materials science and is currently powering the new Materials.. <code>MIT</code>  - [GitHub](https://github.com/materialsproject/crystaltoolkit) (\ud83d\udc68\u200d\ud83d\udcbb 28 \u00b7 \ud83d\udd00 57 \u00b7 \ud83d\udce6 38 \u00b7 \ud83d\udccb 110 - 47% open \u00b7 \u23f1\ufe0f 20.09.2024):      <pre><code>git clone https://github.com/materialsproject/crystaltoolkit\n</code></pre> - [PyPi](https://pypi.org/project/crystal-toolkit) (\ud83d\udce5 1.6K / month \u00b7 \ud83d\udce6 8 \u00b7 \u23f1\ufe0f 04.09.2024):     <pre><code>pip install crystal-toolkit\n</code></pre> pymatviz (\ud83e\udd4821 \u00b7  \u2b50 160 \u00b7 \ud83d\udcc9) - A toolkit for visualizations in materials informatics. <code>MIT</code> <code>general-tool</code> <code>probabilistic</code>  - [GitHub](https://github.com/janosh/pymatviz) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 13 \u00b7 \ud83d\udce6 8 \u00b7 \ud83d\udccb 45 - 24% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/janosh/pymatviz\n</code></pre> - [PyPi](https://pypi.org/project/pymatviz) (\ud83d\udce5 3.7K / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 01.09.2024):     <pre><code>pip install pymatviz\n</code></pre> Chemiscope (\ud83e\udd4819 \u00b7  \u2b50 130) - An interactive structure/property explorer for materials and molecules. <code>BSD-3</code> <code>JavaScript</code>  - [GitHub](https://github.com/lab-cosmo/chemiscope) (\ud83d\udc68\u200d\ud83d\udcbb 22 \u00b7 \ud83d\udd00 32 \u00b7 \ud83d\udce5 310 \u00b7 \ud83d\udce6 6 \u00b7 \ud83d\udccb 120 - 29% open \u00b7 \u23f1\ufe0f 26.09.2024):      <pre><code>git clone https://github.com/lab-cosmo/chemiscope\n</code></pre> - [npm](https://www.npmjs.com/package/chemiscope) (\ud83d\udce5 23 / month \u00b7 \ud83d\udce6 3 \u00b7 \u23f1\ufe0f 15.03.2023):     <pre><code>npm install chemiscope\n</code></pre> ZnDraw (\ud83e\udd4819 \u00b7  \u2b50 30) - A powerful tool for visualizing, modifying, and analysing atomistic systems. <code>EPL-2.0</code> <code>MD</code> <code>generative</code> <code>JavaScript</code>  - [GitHub](https://github.com/zincware/ZnDraw) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 3 \u00b7 \ud83d\udce6 4 \u00b7 \ud83d\udccb 320 - 31% open \u00b7 \u23f1\ufe0f 17.09.2024):      <pre><code>git clone https://github.com/zincware/ZnDraw\n</code></pre> - [PyPi](https://pypi.org/project/zndraw) (\ud83d\udce5 880 / month \u00b7 \ud83d\udce6 2 \u00b7 \u23f1\ufe0f 26.08.2024):     <pre><code>pip install zndraw\n</code></pre> Elementari (\ud83e\udd4912 \u00b7  \u2b50 130) - Interactive browser visualizations for materials science: periodic tables, 3d crystal structures, Bohr atoms, nuclei,.. <code>MIT</code> <code>JavaScript</code>  - [GitHub](https://github.com/janosh/elementari) (\ud83d\udc68\u200d\ud83d\udcbb 2 \u00b7 \ud83d\udd00 12 \u00b7 \ud83d\udce6 3 \u00b7 \ud83d\udccb 7 - 28% open \u00b7 \u23f1\ufe0f 19.07.2024):      <pre><code>git clone https://github.com/janosh/elementari\n</code></pre> - [npm](https://www.npmjs.com/package/elementari) (\ud83d\udce5 140 / month \u00b7 \ud83d\udce6 1 \u00b7 \u23f1\ufe0f 15.01.2024):     <pre><code>npm install elementari\n</code></pre> Show 1 hidden projects...  - Atomvision (\ud83e\udd4912 \u00b7  \u2b50 29 \u00b7 \ud83d\udc80) - Deep learning framework for atomistic image data. <code>Custom</code> <code>computer-vision</code> <code>experimental-data</code> <code>rep-learn</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#wavefunction-methods-ml-wft","title":"Wavefunction methods (ML-WFT)","text":"<p>Projects and models that focus on quantities of wavefunction theory methods, such as Monte Carlo techniques like deep learning variational Monte Carlo (DL-VMC), quantum chemistry methods, etc.</p> DeepQMC (\ud83e\udd4720 \u00b7  \u2b50 340 \u00b7 \ud83d\udcc8) - Deep learning quantum Monte Carlo for electrons in real space. <code>MIT</code>  - [GitHub](https://github.com/deepqmc/deepqmc) (\ud83d\udc68\u200d\ud83d\udcbb 13 \u00b7 \ud83d\udd00 58 \u00b7 \ud83d\udce6 2 \u00b7 \ud83d\udccb 46 - 8% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/deepqmc/deepqmc\n</code></pre> - [PyPi](https://pypi.org/project/deepqmc) (\ud83d\udce5 210 / month \u00b7 \u23f1\ufe0f 24.09.2024):     <pre><code>pip install deepqmc\n</code></pre> FermiNet (\ud83e\udd4815 \u00b7  \u2b50 720) - An implementation of the Fermionic Neural Network for ab-initio electronic structure calculations. <code>Apache-2</code> <code>transformer</code>  - [GitHub](https://github.com/google-deepmind/ferminet) (\ud83d\udc68\u200d\ud83d\udcbb 18 \u00b7 \ud83d\udd00 120 \u00b7 \ud83d\udccb 50 - 2% open \u00b7 \u23f1\ufe0f 24.09.2024):      <pre><code>git clone https://github.com/google-deepmind/ferminet\n</code></pre> DeepErwin (\ud83e\udd498 \u00b7  \u2b50 47) - DeepErwin is a python 3.8+ package that implements and optimizes JAX 2.x wave function models for numerical solutions.. <code>Custom</code>  - [GitHub](https://github.com/mdsunivie/deeperwin) (\ud83d\udc68\u200d\ud83d\udcbb 7 \u00b7 \ud83d\udd00 6 \u00b7 \ud83d\udce5 10 \u00b7 \u23f1\ufe0f 07.06.2024):      <pre><code>git clone https://github.com/mdsunivie/deeperwin\n</code></pre> - [PyPi](https://pypi.org/project/deeperwin) (\ud83d\udce5 73 / month \u00b7 \u23f1\ufe0f 14.12.2021):     <pre><code>pip install deeperwin\n</code></pre> Show 2 hidden projects...  - ACEpsi.jl (\ud83e\udd496 \u00b7  \u2b50 2 \u00b7 \ud83d\udca4) - ACE wave function parameterizations. <code>MIT</code> <code>rep-eng</code> <code>Julia</code> - SchNOrb (\ud83e\udd495 \u00b7  \u2b50 59 \u00b7 \ud83d\udc80) - Unifying machine learning and quantum chemistry with a deep neural network for molecular wavefunctions. <code>MIT</code> <p></p>"},{"location":"ref/raw_md/ml_in_comp_mat/#others","title":"Others","text":"Show 1 hidden projects..."},{"location":"ref/raw_md/ml_in_comp_mat/#contribution","title":"Contribution","text":"<p>Contributions are encouraged and always welcome! If you like to add or update projects, choose one of the following ways:</p> <ul> <li>Open an issue by selecting one of the provided categories from the issue page and fill in the requested information.</li> <li>Modify the projects.yaml with your additions or changes, and submit a pull request. This can also be done directly via the Github UI.</li> </ul> <p>If you like to contribute to or share suggestions regarding the project metadata collection or markdown generation, please refer to the best-of-generator repository. If you like to create your own best-of list, we recommend to follow this guide.</p> <p>For more information on how to add or update projects, please read the contribution guidelines. By participating in this project, you agree to abide by its Code of Conduct.</p>"},{"location":"ref/raw_md/ml_in_comp_mat/#license","title":"License","text":""},{"location":"ref/reading/2_Mech_Terminologies/","title":"Terminologies in Mechanics","text":""},{"location":"ref/reading/2_Mech_Terminologies/#toughness-vs-resilience","title":"Toughness vs Resilience","text":"<ul> <li>Toughness is the ability of a material to absorb energy and plastically deform without fracturing. Other definition, is the amount of energy per unit volume that a material can absorb before rupturing. It is the energy of mechanical deformation per unit volume prior to fracture.</li> </ul> \\[ Toughness = \\frac{energy} {volume} = \\int_0^{\\epsilon_{rupture}} \\sigma d\\epsilon \\] <ul> <li>To be tough, a material must be both strong (high UTS) and ductile. Eg., brittle materials (like ceramics) that are strong but with limited ductility are not tough; conversely, very ductile materials with low strengths are also not tough.</li> <li>If the upper limit of integration up to the yield point is restricted, the energy absorbed per unit volume is known as the modulus of resilience.</li> <li>NOTE, this toughness is DIFFERENCE with fracture toughness, which describes load bearing capabilities of materials with flaws.</li> </ul>"},{"location":"ref/reading/2_Mech_Terminologies/#strength-vs-stifness","title":"Strength vs stifness","text":""},{"location":"ref/reading/6_Tracking/","title":"Visitor","text":"<p>Live MapsLive MapsSEO audit tools</p> <p>Flag CounterFlag CounterSEO audit tools</p> <p>Website CounterWebsite Counter</p>"},{"location":"ref/reading/basic_science/","title":"Basic Science","text":""},{"location":"ref/reading/basic_science/#basic-sciences","title":"Basic Sciences","text":""},{"location":"ref/reading/basic_science/#mechanics","title":"Mechanics","text":""},{"location":"ref/reading/basic_science/#basic-mechanics","title":"Basic Mechanics","text":"Engineering Mechanics 1: Statics D. Gross pdf Engineering Mechanics 2: Mechanics of Materials D. Gross pdf Statics and Mechanics of Materials F.P. Beer pdf Mechanics of Materials F.P. Beer pdf Mechanics of Materials R.C. Hibbeler pdf Engineering Themordynamics Rajput pdf Fundamentals of Engineering Themordynamics J. Moran pdf Refrigeration and Air Conditioning pdf Fundamentals of Heat and Mass Transfer pdf Learn Multibody Dynamics html"},{"location":"ref/reading/basic_science/#advanced-mechanics","title":"Advanced Mechanics","text":"<ul> <li>Advanced Engineering Dynamics - Harrison - pdf </li> <li>Fundamentals of Protein Structure and Function - pdf </li> <li>Equilibrium Thermodynamics - pdf </li> <li>Quantum Mechanics: Concepts and applications - pdf </li> <li>Quantum Theory and Statistical Thermodynamics - pdf </li> </ul>"},{"location":"ref/reading/basic_science/#physics","title":"Physics","text":"<ul> <li>Chemistry - html </li> <li>Physic 1 - html </li> <li>Physic 2 - html </li> <li>Physic 3 - html </li> <li>Theoretical Physics - html </li> <li>Statistical Physics - html </li> <li>Physics Notebook - html </li> </ul>"},{"location":"ref/reading/basic_science/#mathematics","title":"Mathematics","text":"<ul> <li>Jupyter Guide to Linear Algebra Notebook</li> <li>Tensor_Vertor_Note - pdf</li> <li>Advanced Engineering Mathematics - E. Kreyszig - pdf </li> <li>Understanding Engineering Mathematics - pdf </li> <li>Vector Calculus - pdf </li> <li>A CONCISE HANDBOOK OF MATHEMATICS, PHYSICS, AND ENGINEERING SCIENCES - pdf </li> <li>MINIMUM MATHEMATICS - pdf </li> <li>Introduction to Tensor Calculus - pdf </li> <li>Statistics - G\u00fcl - Notebook </li> </ul>"},{"location":"ref/reading/computational/","title":"Computational","text":""},{"location":"ref/reading/computational/#computational","title":"Computational","text":""},{"location":"ref/reading/computational/#thangs-note","title":"Thang's Note","text":"<ul> <li>Computational Mechanics &amp; Multiscale methods    \u00a0  Notebook</li> <li>Modelling with DFT    \u00a0  Notebook</li> <li>Modelling with MD    \u00a0  Notebook</li> <li>Thang Note for ML    \u00a0  Notebook</li> <li>Learn code    \u00a0  Notebook</li> </ul>"},{"location":"ref/reading/computational/#methods","title":"Methods","text":""},{"location":"ref/reading/computational/#multiscale","title":"Multiscale","text":"<ul> <li>Lecture Multiscale Methods in Computational Mechanics   \u00a0    Notebook</li> </ul>"},{"location":"ref/reading/computational/#dft","title":"DFT","text":"<ul> <li> <p>Modeling materials using density functional theory  \u00a0  html, pdf</p> </li> <li> <p>Computational Chemistry from Laptop to HPC - eChem team \u00a0  Notebook</p> </li> </ul>"},{"location":"ref/reading/computational/#md","title":"MD","text":"<ul> <li>Understanding Molecular Simulation - D. Frenkel  \u00a0   pdf</li> <li> <p>Molecular Modelling: Priciples and Applications - \u00a0   pdf</p> </li> <li> <p>Theory and Modeling of Polymer Nanocomposites - \u00a0   pdf</p> </li> <li>Introduction to Materials Informatics - \u00a0   notebook</li> </ul>"},{"location":"ref/reading/computational/#enhanced-sampling","title":"Enhanced Sampling","text":"<ul> <li>Enhanced sampling methods for molecular dynamics simulations - \u00a0   pdf</li> <li>Hands-on tutorials: Advanced sampling methods using GROMACS - \u00a0 html</li> </ul>"},{"location":"ref/reading/computational/#fem","title":"FEM","text":"<ul> <li>Introduction FEM - Lecture note \u00a0  pdf</li> <li>A first Course in Finite Elements - J. Fish \u00a0   pdf</li> <li>An Indtroduction to The Finite Element Method - J.N. Reddy \u00a0  pdf</li> <li>Computational Mechanics - \u00a0 Notebook, Github</li> </ul>"},{"location":"ref/reading/computational/#machine-learning","title":"Machine Learning","text":""},{"location":"ref/reading/computational/#ml-in-computational","title":"ML in Computational","text":"<ul> <li>Machine learning in Computational fluid mechanics \u00a0 Notebook,  Github</li> <li>Deep Learning in Computational Mechanics \u00a0 pdf</li> <li>Deep Learning for Particle Physicists \u00a0 Notebook</li> <li>Deep Learning for Molecules and Materials \u00a0 Notebook</li> </ul>"},{"location":"ref/reading/computational/#ml-basic","title":"ML Basic","text":"<ul> <li>PyTorch for Deep Learning - D.Bourke  \u00a0 Notebook</li> <li>Tensorflow for Deep Learning - D.Bourke  \u00a0 Notebook</li> <li>Zero to Mastery Machine Learning - D.Bourke  \u00a0 Repo</li> <li> <p>Learn Transformers - D.Bourke  \u00a0 Repo</p> </li> <li> <p>Natural Language Processing - HuggingFace html</p> </li> <li> <p>Physics-based Deep Learning - N. Thuerey \u00a0 pdf,  Notebook</p> </li> <li>An Introduction to Machine Learning  - \u00a0  pdf</li> <li>Introduction to Machine Learning with Python - \u00a0  pdf</li> <li>Thoughtful Machine Learning with Python - \u00a0 pdf</li> <li>Practical Python AI Projects - \u00a0 pdf</li> <li>Fundamentals of Deep Learning - \u00a0 pdf</li> <li>Deep Learning - \u00a0 pdf</li> <li>Hands-On Machine Learning with Scikit-Learn and TensorFlow|| Notebook|</li> <li>NoteBooks-Statistics-and-MachineLearning - \u00a0 Notebook|</li> <li>Introduction to machine learning with Jupyter notebooks|| Notebook|</li> </ul>"},{"location":"ref/reading/computational/#natural-language-processing-npl","title":"Natural Language Processing (NPL)","text":"<ul> <li>A Complete LangChain Guide - Nanonets \u00a0 html</li> </ul>"},{"location":"ref/reading/computational/#programming","title":"Programming","text":""},{"location":"ref/reading/computational/#python","title":"Python","text":"<ul> <li>Python Programming for Data Science - notebook</li> <li>A Primer on Scientific Programming withPython - pdf</li> <li>Python Data Science Handbook - notebook</li> <li>Scientific Computing for Chemists with Python - notebook = Numerical Analysis with Applications in Python - Notebook</li> </ul>"},{"location":"ref/reading/computational/#cpp","title":"CPP","text":"<ul> <li>CPP for python programmers  - html</li> <li>learn C++   - Link</li> <li>The problem solver's guide to coding - pdf</li> </ul>"},{"location":"ref/reading/computational/#others","title":"others","text":"<ul> <li>The Linux Command Line   - pdf</li> <li>Introduction to Algorithms - pdf</li> <li>Understanding Regular Expressions (Regex) - Link</li> <li>Data Science from Scratch -  pdf</li> <li>Software engineering and systems engineering - course |   notebook</li> </ul>"},{"location":"ref/reading/mechanic_solid/","title":"Mechanics of solid","text":""},{"location":"ref/reading/mechanic_solid/#elasticity","title":"Elasticity","text":"<ul> <li>Lecture Notes on The Mechanics of Elastic Solids (MIT) \u00a0  html</li> <li>Vol1. A Brief Review of Some Mathematical Preliminaries \u00a0  pdf</li> <li>Vol2. Continuum Mechanics \u00a0  pdf</li> <li>Vol3. An Introduction to Finite Elasticity \u00a0  pdf</li> </ul> <p>Read more</p>"},{"location":"ref/video/1_research_ethic/","title":"Researh Ethics","text":""},{"location":"ref/video/1_research_ethic/#research-ethic","title":"Research Ethic","text":"<p>More about research ethics</p> The Predator Effect - Understanding the past, present and future \u00f2 deceptive academic journals pdf An Editor\u2019s Perspective: From submission to decision pdf"},{"location":"ref/video/2_calculus_essence/","title":"The essence of calculus","text":""},{"location":"research/publication/","title":"Publication","text":""},{"location":"research/publication/#publications","title":"PUBLICATIONS","text":"<p>Articles in my ORCID profile  Articles in my Google Scholar profile </p>"},{"location":"research/publication/#journal-articles","title":"Journal Articles","text":"<p> Hide Graphical Abstract </p> <p>2022</p> <p>Hydrogenated Graphene with Tunable Poisson\u2019s Ratio Using Machine Learning: Implication for Wearable Devices and Strain Sensors </p> <p>Ho, Viet Hung*; Nguyen, Cao Thang*; Nguyen, Hoang D.*; Oh, Hyun Suk; Shin, Myoungsu; Kim, Sung Youb </p> <p>ACS Applied Nano Materials (2022), DOI: 10.1021/acsanm.2c01950 </p> <p>* equal contribution </p> Abstract <p>The Poisson\u2019s ratio of two-dimensional materials such as graphene can be tailored by surface hydrogenation. The density and distribution of hydrogenation may significantly affect the Poisson\u2019s ratio of the graphene structure. Therefore, optimization of the distribution of hydrogenation is useful to achieve the structure with a targeted Poisson\u2019s ratio. For this purpose, we developed an inverse design algorithm based on machine learning using the XGBoost method to reveal the relationship between the Poisson\u2019s ratio and distribution of hydrogenation. Based on this relationship, we can optimize the hydrogenated graphene structure to have a low Poisson\u2019s ratio. Instead of performing molecular dynamic simulations for all possible structures, we could find the optimal structures using the search algorithm and save significant computational resources. This algorithm could successfully discover structures with low Poisson\u2019s ratios around \u22120.5 after only 1600 simulations in a large design space of approximately 5.2 \u00d7 106\u00a0possible configurations. Moreover, the optimal structures were found to exhibit excellent flexibility under compression of around \u221265% without failure and can be used in many applications such as flexible strain sensors. Our results demonstrate the applicability of machine learning to the efficient development of new metamaterials with desired properties.</p> <p>2022</p> <p>Negative out-of-plane Poisson's ratio of bilayer graphane </p> <p>Ho, Viet Hung; Ho, Duc Tam; Nguyen, Cao Thang; Kim, Sung Youb </p> <p>Nanotechnology 33 (25) (2022), DOI: 10.1088/1361-6528/ac5da0 </p> Abstract <p>With its excellent mechanical and thermal properties, bilayer graphane is a promising material for realizing future nanoelectromechanical systems. In this study, we focus on the auxetic behavior of bilayer graphane under external loading along various directions through atomistic simulations. We numerically and theoretically reveal the mechanism of the auxeticity in terms of intrinsic interactions between carbon atoms by constructing bilayer graphane. Given that the origin of the auxeticity is intrinsic rather than extrinsic, the work provides a novel technique to control the dimensions of nanoscale bilayer graphane by simply changing the external conditions without the requirement of complex structural design of the material.</p> <p>2019</p> <p>Pattern transformation induced by elastic instability of metallic porous structures </p> <p>Nguyen, Cao Thang*; Ho, Duc Tam*; Choi, Seung Tae; Chun, Doo-Man; Kim, Sung Youb </p> <p>Computational Materials Science 157 (2019), DOI: 10.1016/j.commatsci.2018.10.023 </p> <p>* equal contribution </p> Abstract <p>Uniform pattern transformation can be observed in some structures with periodic arrays of pores at a critical compressive load because of buckling of the constituents of the structures. This pattern transformation can be exploited to design structures for various potential applications. Previous studies have focused on the instability of periodic porous structures of which the base materials were elastomers, and applications of these structures may be narrow because of the elastomer limitations of low melting temperature and stiffness. In addition, material failures such as plasticity and fracture were rarely discussed in previous studies. Here, we introduce metals as the base materials for some periodic metallic porous nanostructures (PMPNs). Our molecular dynamics simulation results show that PMPNs can exhibit pattern transformation at a critical strain because of buckling. In addition, we develop a simple formulation by incorporating the effect of surface on the Euler\u2013Bernoulli beam theory to predict the critical load for the buckling of nanostructures. The prediction of our model is in good agreement with the molecular dynamics simulation results. When the applied strain is sufficiently large, the nanoscale metals experience dislocation-medicated plasticity. We also show that the pore shape of the PMPNs strongly affects the characteristics of the periodic metallic structures including the effective Young\u2019s modulus, critical strain for micro-buckling, and critical strain for plasticity.</p> <p>2019</p> <p>Auxeticity in Metals and Periodic Metallic Porous Structures Induced by Elastic Instabilities </p> <p>Ho, Duc Tam*; Nguyen, Cao Thang*; Kwon, Soon-Yong; Kim, Sung Youb </p> <p>physica status solidi (b) 256 (1) (2019), DOI: 10.1002/pssb.201800122 </p> <p>* equal contribution </p> Abstract <p>Materials with a negative Poisson's ratio (auxetics) are counter intuitive because their mechanical response is unusual. On the other hand, instabilities are usually regarded as deleterious phenomena and thus their prevention is needed. Here, numerical and theoretical evidences have been provided to show that two different elastic instabilities are, rather than deleterious, useful phenomena that cause auxeticity. It has been shown that a negative Poisson's ratio can be found in some face-centered cubic (FCC) single crystals at a finite strain as they are under uniaxial stress along the [100]-direction. The auxeticity is associated with a phase transformation induced by the Born\u2013Hill's elastic instability, i.e., an elastic material instability. In addition, it has been found that periodic metallic porous structures can also show a negative Poisson's ratio at finite compressive strain. In this case, buckling of the micro-structure of the porous structures, which is an elastic and geometric instability, is respondent for the auxeticity.</p> <p>2019</p> <p>Auxeticity in Metals and Periodic Metallic Porous Structures Induced by Elastic Instabilities (Phys. Status Solidi B 1/2019) </p> <p>Ho, Duc Tam*; Nguyen, Cao Thang*; Kwon, Soon-Yong; Kim, Sung Youb </p> <p>physica status solidi (b) 256 (1) (2019), DOI: 10.1002/pssb.201970010 </p> <p>* equal contribution </p> Abstract <p>The search for new auxetic mechanisms and more auxetic materials are two important research directions in the study of auxeticity. It is well known that instabilities are usually regarded as deleterious phenomena and thus their prevention is needed. However, the work of Sung Youb Kim and his research group (article no. 1800122) shows that some elastic instabilities act as mechanisms for auxeticity in several metals and periodic metallic porous structures. The upper part of the cover figure shows that the Born\u2013Hill's elastic instability, i.e., an elastic material instability, causes a phase transformation leading to auxeticity in a facecentered cubic metal. The lower part of the figure describes another elastic instability, i.e., buckling of the microstructure of a periodic metallic porous structure, that induces a pattern transformation causing auxeticity in the structure. Details of relevant numerical results can be found in the article.</p>"},{"location":"research/publication/#manuscripts","title":"Manuscripts","text":"<p>2022</p> <p>Fast fabrication technique for high-quality van der Waals heterostructures using inert shielding gas environment </p> <p>Nguyen, Van Huy; Kim, Minwook; Nguyen, Cao Thang; Suleman, Muhammad; Nguyen, Dinh Cong </p> <p>Private arXiv  (2022)</p> <p>2022</p> <p>Origami-inspired Graphene/PMMA composite with tunable auxetic property </p> <p>Nguyen, Cao Thang; Kim, Sung Youb </p> <p>Private arXiv  (2022)</p> <p>2022</p> <p>An enhanced sampling approach for computing the temperature-dependent free energy </p> <p>Nguyen, Cao Thang; Kim, Sung Youb </p> <p>Private arXiv  (2022)</p> <p>2021</p> <p>Coalescence-enhanced melting in the incipient stage of surface melting </p> <p>Nguyen, Cao Thang; Ho, Duc Tam; Kim, Sung Youb </p> <p>Private arXiv  (2021)</p> <p>2021</p> <p>Mechanical vs. thermodynamic melting of metals from the mean-force dynamics calculation </p> <p>Nguyen, Cao Thang; Kim, Sung Youb </p> <p>Private arXiv  (2021)</p> <p>2020</p> <p>Finite-size effect on the thermodynamics melting predicted by free energy approach </p> <p>Nguyen, Cao Thang; Ho, Viet Hung; Kim, Sung Youb </p> <p>Private arXiv  (2020)</p>"},{"location":"research/publication/#codestools","title":"Codes/Tools","text":"<p>2021</p> <p>thatool: an object-oriented Python package for pre-processing and post-processing data from MD simulations. </p> <p>Nguyen, Cao Thang </p> <p>Documentation  (2021)</p> <p>\\\\ This package is available for Pip and Conda repositories.</p> <p>2020</p> <p>mediaLib: an OOP Python package for working with media files </p> <p>Nguyen, Cao Thang </p> <p>Documentation  (2020)</p> <p>\\\\ This package is available for Pip and Conda repositories.</p>"},{"location":"research/publication_nofig/","title":"Publication nofig","text":""},{"location":"research/publication_nofig/#publications","title":"PUBLICATIONS","text":"<p>Articles in my ORCID profile  Articles in my Google Scholar profile </p>"},{"location":"research/publication_nofig/#journal-articles","title":"Journal Articles","text":"<p> Show Graphical Abstract </p> <p>2022</p> <p>Hydrogenated Graphene with Tunable Poisson\u2019s Ratio Using Machine Learning: Implication for Wearable Devices and Strain Sensors </p> <p>Ho, Viet Hung*; Nguyen, Cao Thang*; Nguyen, Hoang D.*; Oh, Hyun Suk; Shin, Myoungsu; Kim, Sung Youb </p> <p>ACS Applied Nano Materials (2022), DOI: 10.1021/acsanm.2c01950 </p> <p>* equal contribution </p> Abstract <p>The Poisson\u2019s ratio of two-dimensional materials such as graphene can be tailored by surface hydrogenation. The density and distribution of hydrogenation may significantly affect the Poisson\u2019s ratio of the graphene structure. Therefore, optimization of the distribution of hydrogenation is useful to achieve the structure with a targeted Poisson\u2019s ratio. For this purpose, we developed an inverse design algorithm based on machine learning using the XGBoost method to reveal the relationship between the Poisson\u2019s ratio and distribution of hydrogenation. Based on this relationship, we can optimize the hydrogenated graphene structure to have a low Poisson\u2019s ratio. Instead of performing molecular dynamic simulations for all possible structures, we could find the optimal structures using the search algorithm and save significant computational resources. This algorithm could successfully discover structures with low Poisson\u2019s ratios around \u22120.5 after only 1600 simulations in a large design space of approximately 5.2 \u00d7 106\u00a0possible configurations. Moreover, the optimal structures were found to exhibit excellent flexibility under compression of around \u221265% without failure and can be used in many applications such as flexible strain sensors. Our results demonstrate the applicability of machine learning to the efficient development of new metamaterials with desired properties.</p> <p>2022</p> <p>Negative out-of-plane Poisson's ratio of bilayer graphane </p> <p>Ho, Viet Hung; Ho, Duc Tam; Nguyen, Cao Thang; Kim, Sung Youb </p> <p>Nanotechnology 33 (25) (2022), DOI: 10.1088/1361-6528/ac5da0 </p> Abstract <p>With its excellent mechanical and thermal properties, bilayer graphane is a promising material for realizing future nanoelectromechanical systems. In this study, we focus on the auxetic behavior of bilayer graphane under external loading along various directions through atomistic simulations. We numerically and theoretically reveal the mechanism of the auxeticity in terms of intrinsic interactions between carbon atoms by constructing bilayer graphane. Given that the origin of the auxeticity is intrinsic rather than extrinsic, the work provides a novel technique to control the dimensions of nanoscale bilayer graphane by simply changing the external conditions without the requirement of complex structural design of the material.</p> <p>2019</p> <p>Pattern transformation induced by elastic instability of metallic porous structures </p> <p>Nguyen, Cao Thang*; Ho, Duc Tam*; Choi, Seung Tae; Chun, Doo-Man; Kim, Sung Youb </p> <p>Computational Materials Science 157 (2019), DOI: 10.1016/j.commatsci.2018.10.023 </p> <p>* equal contribution </p> Abstract <p>Uniform pattern transformation can be observed in some structures with periodic arrays of pores at a critical compressive load because of buckling of the constituents of the structures. This pattern transformation can be exploited to design structures for various potential applications. Previous studies have focused on the instability of periodic porous structures of which the base materials were elastomers, and applications of these structures may be narrow because of the elastomer limitations of low melting temperature and stiffness. In addition, material failures such as plasticity and fracture were rarely discussed in previous studies. Here, we introduce metals as the base materials for some periodic metallic porous nanostructures (PMPNs). Our molecular dynamics simulation results show that PMPNs can exhibit pattern transformation at a critical strain because of buckling. In addition, we develop a simple formulation by incorporating the effect of surface on the Euler\u2013Bernoulli beam theory to predict the critical load for the buckling of nanostructures. The prediction of our model is in good agreement with the molecular dynamics simulation results. When the applied strain is sufficiently large, the nanoscale metals experience dislocation-medicated plasticity. We also show that the pore shape of the PMPNs strongly affects the characteristics of the periodic metallic structures including the effective Young\u2019s modulus, critical strain for micro-buckling, and critical strain for plasticity.</p> <p>2019</p> <p>Auxeticity in Metals and Periodic Metallic Porous Structures Induced by Elastic Instabilities </p> <p>Ho, Duc Tam*; Nguyen, Cao Thang*; Kwon, Soon-Yong; Kim, Sung Youb </p> <p>physica status solidi (b) 256 (1) (2019), DOI: 10.1002/pssb.201800122 </p> <p>* equal contribution </p> Abstract <p>Materials with a negative Poisson's ratio (auxetics) are counter intuitive because their mechanical response is unusual. On the other hand, instabilities are usually regarded as deleterious phenomena and thus their prevention is needed. Here, numerical and theoretical evidences have been provided to show that two different elastic instabilities are, rather than deleterious, useful phenomena that cause auxeticity. It has been shown that a negative Poisson's ratio can be found in some face-centered cubic (FCC) single crystals at a finite strain as they are under uniaxial stress along the [100]-direction. The auxeticity is associated with a phase transformation induced by the Born\u2013Hill's elastic instability, i.e., an elastic material instability. In addition, it has been found that periodic metallic porous structures can also show a negative Poisson's ratio at finite compressive strain. In this case, buckling of the micro-structure of the porous structures, which is an elastic and geometric instability, is respondent for the auxeticity.</p> <p>2019</p> <p>Auxeticity in Metals and Periodic Metallic Porous Structures Induced by Elastic Instabilities (Phys. Status Solidi B 1/2019) </p> <p>Ho, Duc Tam*; Nguyen, Cao Thang*; Kwon, Soon-Yong; Kim, Sung Youb </p> <p>physica status solidi (b) 256 (1) (2019), DOI: 10.1002/pssb.201970010 </p> <p>* equal contribution </p> Abstract <p>The search for new auxetic mechanisms and more auxetic materials are two important research directions in the study of auxeticity. It is well known that instabilities are usually regarded as deleterious phenomena and thus their prevention is needed. However, the work of Sung Youb Kim and his research group (article no. 1800122) shows that some elastic instabilities act as mechanisms for auxeticity in several metals and periodic metallic porous structures. The upper part of the cover figure shows that the Born\u2013Hill's elastic instability, i.e., an elastic material instability, causes a phase transformation leading to auxeticity in a facecentered cubic metal. The lower part of the figure describes another elastic instability, i.e., buckling of the microstructure of a periodic metallic porous structure, that induces a pattern transformation causing auxeticity in the structure. Details of relevant numerical results can be found in the article.</p>"},{"location":"research/publication_nofig/#manuscripts","title":"Manuscripts","text":"<p>2022</p> <p>Fast fabrication technique for high-quality van der Waals heterostructures using inert shielding gas environment </p> <p>Nguyen, Van Huy; Kim, Minwook; Nguyen, Cao Thang; Suleman, Muhammad; Nguyen, Dinh Cong </p> <p>Private arXiv  (2022)</p> <p>2022</p> <p>Origami-inspired Graphene/PMMA composite with tunable auxetic property </p> <p>Nguyen, Cao Thang; Kim, Sung Youb </p> <p>Private arXiv  (2022)</p> <p>2022</p> <p>An enhanced sampling approach for computing the temperature-dependent free energy </p> <p>Nguyen, Cao Thang; Kim, Sung Youb </p> <p>Private arXiv  (2022)</p> <p>2021</p> <p>Coalescence-enhanced melting in the incipient stage of surface melting </p> <p>Nguyen, Cao Thang; Ho, Duc Tam; Kim, Sung Youb </p> <p>Private arXiv  (2021)</p> <p>2021</p> <p>Mechanical vs. thermodynamic melting of metals from the mean-force dynamics calculation </p> <p>Nguyen, Cao Thang; Kim, Sung Youb </p> <p>Private arXiv  (2021)</p> <p>2020</p> <p>Finite-size effect on the thermodynamics melting predicted by free energy approach </p> <p>Nguyen, Cao Thang; Ho, Viet Hung; Kim, Sung Youb </p> <p>Private arXiv  (2020)</p>"},{"location":"research/publication_nofig/#codestools","title":"Codes/Tools","text":"<p>2021</p> <p>thatool: an object-oriented Python package for pre-processing and post-processing data from MD simulations. </p> <p>Nguyen, Cao Thang </p> <p>Documentation  (2021)</p> <p>\\\\ This package is available for Pip and Conda repositories.</p> <p>2020</p> <p>mediaLib: an OOP Python package for working with media files </p> <p>Nguyen, Cao Thang </p> <p>Documentation  (2020)</p> <p>\\\\ This package is available for Pip and Conda repositories.</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/category/python/","title":"Python","text":""},{"location":"blog/category/science/","title":"Science","text":""},{"location":"blog/category/ml/","title":"ML","text":""},{"location":"blog/category/latex/","title":"Latex","text":""}]}